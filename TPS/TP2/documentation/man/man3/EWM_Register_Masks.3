.TH "EWM_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EWM_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEWM_BASE\fP   (0x40061000u)"
.br
.ti -1c
.RI "#define \fBEWM\fP   ((\fBEWM_Type\fP *)\fBEWM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBEWM_BASE_ADDRS\fP   { \fBEWM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBEWM_BASE_PTRS\fP   { \fBEWM\fP }"
.br
.ti -1c
.RI "#define \fBEWM_IRQS\fP   { \fBWDOG_EWM_IRQn\fP }"
.br
.in -1c
.SS "CTRL - Control Register"

.in +1c
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_EWMEN_SHIFT\fP)) & \fBEWM_CTRL_EWMEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_ASSIN_SHIFT\fP)) & \fBEWM_CTRL_ASSIN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INEN_SHIFT\fP)) & \fBEWM_CTRL_INEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INTEN_SHIFT\fP)) & \fBEWM_CTRL_INTEN_MASK\fP)"
.br
.in -1c
.SS "SERV - Service Register"

.in +1c
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_SERV_SERVICE_SHIFT\fP)) & \fBEWM_SERV_SERVICE_MASK\fP)"
.br
.in -1c
.SS "CMPL - Compare Low Register"

.in +1c
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPL_COMPAREL_SHIFT\fP)) & \fBEWM_CMPL_COMPAREL_MASK\fP)"
.br
.in -1c
.SS "CMPH - Compare High Register"

.in +1c
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPH_COMPAREH_SHIFT\fP)) & \fBEWM_CMPH_COMPAREH_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define EWM   ((\fBEWM_Type\fP *)\fBEWM_BASE\fP)"
Peripheral EWM base pointer 
.SS "#define EWM_BASE   (0x40061000u)"
Peripheral EWM base address 
.SS "#define EWM_BASE_ADDRS   { \fBEWM_BASE\fP }"
Array initializer of EWM peripheral base addresses 
.SS "#define EWM_BASE_PTRS   { \fBEWM\fP }"
Array initializer of EWM peripheral base pointers 
.SS "#define EWM_CMPH_COMPAREH(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPH_COMPAREH_SHIFT\fP)) & \fBEWM_CMPH_COMPAREH_MASK\fP)"

.SS "#define EWM_CMPH_COMPAREH_MASK   (0xFFU)"

.SS "#define EWM_CMPH_COMPAREH_SHIFT   (0U)"

.SS "#define EWM_CMPL_COMPAREL(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPL_COMPAREL_SHIFT\fP)) & \fBEWM_CMPL_COMPAREL_MASK\fP)"

.SS "#define EWM_CMPL_COMPAREL_MASK   (0xFFU)"

.SS "#define EWM_CMPL_COMPAREL_SHIFT   (0U)"

.SS "#define EWM_CTRL_ASSIN(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_ASSIN_SHIFT\fP)) & \fBEWM_CTRL_ASSIN_MASK\fP)"

.SS "#define EWM_CTRL_ASSIN_MASK   (0x2U)"

.SS "#define EWM_CTRL_ASSIN_SHIFT   (1U)"

.SS "#define EWM_CTRL_EWMEN(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_EWMEN_SHIFT\fP)) & \fBEWM_CTRL_EWMEN_MASK\fP)"

.SS "#define EWM_CTRL_EWMEN_MASK   (0x1U)"

.SS "#define EWM_CTRL_EWMEN_SHIFT   (0U)"

.SS "#define EWM_CTRL_INEN(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INEN_SHIFT\fP)) & \fBEWM_CTRL_INEN_MASK\fP)"

.SS "#define EWM_CTRL_INEN_MASK   (0x4U)"

.SS "#define EWM_CTRL_INEN_SHIFT   (2U)"

.SS "#define EWM_CTRL_INTEN(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INTEN_SHIFT\fP)) & \fBEWM_CTRL_INTEN_MASK\fP)"

.SS "#define EWM_CTRL_INTEN_MASK   (0x8U)"

.SS "#define EWM_CTRL_INTEN_SHIFT   (3U)"

.SS "#define EWM_IRQS   { \fBWDOG_EWM_IRQn\fP }"
Interrupt vectors for the EWM peripheral type 
.SS "#define EWM_SERV_SERVICE(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_SERV_SERVICE_SHIFT\fP)) & \fBEWM_SERV_SERVICE_MASK\fP)"

.SS "#define EWM_SERV_SERVICE_MASK   (0xFFU)"

.SS "#define EWM_SERV_SERVICE_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
