.TH "LLWU_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LLWU_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLLWU_BASE\fP   (0x4007C000u)"
.br
.ti -1c
.RI "#define \fBLLWU\fP   ((\fBLLWU_Type\fP *)\fBLLWU_BASE\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_BASE_ADDRS\fP   { \fBLLWU_BASE\fP }"
.br
.ti -1c
.RI "#define \fBLLWU_BASE_PTRS\fP   { \fBLLWU\fP }"
.br
.ti -1c
.RI "#define \fBLLWU_IRQS\fP   { \fBLLWU_IRQn\fP }"
.br
.in -1c
.SS "PE1 - LLWU Pin Enable 1 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE0_SHIFT\fP)) & \fBLLWU_PE1_WUPE0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE1_SHIFT\fP)) & \fBLLWU_PE1_WUPE1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE2_SHIFT\fP)) & \fBLLWU_PE1_WUPE2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE3_SHIFT\fP)) & \fBLLWU_PE1_WUPE3_MASK\fP)"
.br
.in -1c
.SS "PE2 - LLWU Pin Enable 2 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE4_SHIFT\fP)) & \fBLLWU_PE2_WUPE4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE5_SHIFT\fP)) & \fBLLWU_PE2_WUPE5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE6_SHIFT\fP)) & \fBLLWU_PE2_WUPE6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE7_SHIFT\fP)) & \fBLLWU_PE2_WUPE7_MASK\fP)"
.br
.in -1c
.SS "PE3 - LLWU Pin Enable 3 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE8_SHIFT\fP)) & \fBLLWU_PE3_WUPE8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE9_SHIFT\fP)) & \fBLLWU_PE3_WUPE9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE10_SHIFT\fP)) & \fBLLWU_PE3_WUPE10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE11_SHIFT\fP)) & \fBLLWU_PE3_WUPE11_MASK\fP)"
.br
.in -1c
.SS "PE4 - LLWU Pin Enable 4 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE12_SHIFT\fP)) & \fBLLWU_PE4_WUPE12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE13_SHIFT\fP)) & \fBLLWU_PE4_WUPE13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE14_SHIFT\fP)) & \fBLLWU_PE4_WUPE14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE15_SHIFT\fP)) & \fBLLWU_PE4_WUPE15_MASK\fP)"
.br
.in -1c
.SS "ME - LLWU Module Enable register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_ME_WUME0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME0_SHIFT\fP)) & \fBLLWU_ME_WUME0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME1_SHIFT\fP)) & \fBLLWU_ME_WUME1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME2_SHIFT\fP)) & \fBLLWU_ME_WUME2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME3_SHIFT\fP)) & \fBLLWU_ME_WUME3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME4_SHIFT\fP)) & \fBLLWU_ME_WUME4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME5_SHIFT\fP)) & \fBLLWU_ME_WUME5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME6_SHIFT\fP)) & \fBLLWU_ME_WUME6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME7_SHIFT\fP)) & \fBLLWU_ME_WUME7_MASK\fP)"
.br
.in -1c
.SS "F1 - LLWU Flag 1 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_F1_WUF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF0_SHIFT\fP)) & \fBLLWU_F1_WUF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF1_SHIFT\fP)) & \fBLLWU_F1_WUF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF2_SHIFT\fP)) & \fBLLWU_F1_WUF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF3_SHIFT\fP)) & \fBLLWU_F1_WUF3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF4_SHIFT\fP)) & \fBLLWU_F1_WUF4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF5_SHIFT\fP)) & \fBLLWU_F1_WUF5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF6_SHIFT\fP)) & \fBLLWU_F1_WUF6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF7_SHIFT\fP)) & \fBLLWU_F1_WUF7_MASK\fP)"
.br
.in -1c
.SS "F2 - LLWU Flag 2 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_F2_WUF8_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF8_SHIFT\fP)) & \fBLLWU_F2_WUF8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF9_SHIFT\fP)) & \fBLLWU_F2_WUF9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF10_SHIFT\fP)) & \fBLLWU_F2_WUF10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF11_SHIFT\fP)) & \fBLLWU_F2_WUF11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF12_SHIFT\fP)) & \fBLLWU_F2_WUF12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF13_SHIFT\fP)) & \fBLLWU_F2_WUF13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF14_SHIFT\fP)) & \fBLLWU_F2_WUF14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF15_SHIFT\fP)) & \fBLLWU_F2_WUF15_MASK\fP)"
.br
.in -1c
.SS "F3 - LLWU Flag 3 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF0_SHIFT\fP)) & \fBLLWU_F3_MWUF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF1_SHIFT\fP)) & \fBLLWU_F3_MWUF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF2_SHIFT\fP)) & \fBLLWU_F3_MWUF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF3_SHIFT\fP)) & \fBLLWU_F3_MWUF3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF4_SHIFT\fP)) & \fBLLWU_F3_MWUF4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF5_SHIFT\fP)) & \fBLLWU_F3_MWUF5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF6_SHIFT\fP)) & \fBLLWU_F3_MWUF6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF7_SHIFT\fP)) & \fBLLWU_F3_MWUF7_MASK\fP)"
.br
.in -1c
.SS "FILT1 - LLWU Pin Filter 1 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT1_FILTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTE_SHIFT\fP)) & \fBLLWU_FILT1_FILTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTF_SHIFT\fP)) & \fBLLWU_FILT1_FILTF_MASK\fP)"
.br
.in -1c
.SS "FILT2 - LLWU Pin Filter 2 register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT2_FILTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTE_SHIFT\fP)) & \fBLLWU_FILT2_FILTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTF_SHIFT\fP)) & \fBLLWU_FILT2_FILTF_MASK\fP)"
.br
.in -1c
.SS "RST - LLWU Reset Enable register"

.in +1c
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_RSTFILT_SHIFT\fP)) & \fBLLWU_RST_RSTFILT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_LLRSTE_SHIFT\fP)) & \fBLLWU_RST_LLRSTE_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define LLWU   ((\fBLLWU_Type\fP *)\fBLLWU_BASE\fP)"
Peripheral LLWU base pointer 
.SS "#define LLWU_BASE   (0x4007C000u)"
Peripheral LLWU base address 
.SS "#define LLWU_BASE_ADDRS   { \fBLLWU_BASE\fP }"
Array initializer of LLWU peripheral base addresses 
.SS "#define LLWU_BASE_PTRS   { \fBLLWU\fP }"
Array initializer of LLWU peripheral base pointers 
.SS "#define LLWU_F1_WUF0(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF0_SHIFT\fP)) & \fBLLWU_F1_WUF0_MASK\fP)"

.SS "#define LLWU_F1_WUF0_MASK   (0x1U)"

.SS "#define LLWU_F1_WUF0_SHIFT   (0U)"

.SS "#define LLWU_F1_WUF1(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF1_SHIFT\fP)) & \fBLLWU_F1_WUF1_MASK\fP)"

.SS "#define LLWU_F1_WUF1_MASK   (0x2U)"

.SS "#define LLWU_F1_WUF1_SHIFT   (1U)"

.SS "#define LLWU_F1_WUF2(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF2_SHIFT\fP)) & \fBLLWU_F1_WUF2_MASK\fP)"

.SS "#define LLWU_F1_WUF2_MASK   (0x4U)"

.SS "#define LLWU_F1_WUF2_SHIFT   (2U)"

.SS "#define LLWU_F1_WUF3(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF3_SHIFT\fP)) & \fBLLWU_F1_WUF3_MASK\fP)"

.SS "#define LLWU_F1_WUF3_MASK   (0x8U)"

.SS "#define LLWU_F1_WUF3_SHIFT   (3U)"

.SS "#define LLWU_F1_WUF4(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF4_SHIFT\fP)) & \fBLLWU_F1_WUF4_MASK\fP)"

.SS "#define LLWU_F1_WUF4_MASK   (0x10U)"

.SS "#define LLWU_F1_WUF4_SHIFT   (4U)"

.SS "#define LLWU_F1_WUF5(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF5_SHIFT\fP)) & \fBLLWU_F1_WUF5_MASK\fP)"

.SS "#define LLWU_F1_WUF5_MASK   (0x20U)"

.SS "#define LLWU_F1_WUF5_SHIFT   (5U)"

.SS "#define LLWU_F1_WUF6(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF6_SHIFT\fP)) & \fBLLWU_F1_WUF6_MASK\fP)"

.SS "#define LLWU_F1_WUF6_MASK   (0x40U)"

.SS "#define LLWU_F1_WUF6_SHIFT   (6U)"

.SS "#define LLWU_F1_WUF7(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF7_SHIFT\fP)) & \fBLLWU_F1_WUF7_MASK\fP)"

.SS "#define LLWU_F1_WUF7_MASK   (0x80U)"

.SS "#define LLWU_F1_WUF7_SHIFT   (7U)"

.SS "#define LLWU_F2_WUF10(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF10_SHIFT\fP)) & \fBLLWU_F2_WUF10_MASK\fP)"

.SS "#define LLWU_F2_WUF10_MASK   (0x4U)"

.SS "#define LLWU_F2_WUF10_SHIFT   (2U)"

.SS "#define LLWU_F2_WUF11(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF11_SHIFT\fP)) & \fBLLWU_F2_WUF11_MASK\fP)"

.SS "#define LLWU_F2_WUF11_MASK   (0x8U)"

.SS "#define LLWU_F2_WUF11_SHIFT   (3U)"

.SS "#define LLWU_F2_WUF12(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF12_SHIFT\fP)) & \fBLLWU_F2_WUF12_MASK\fP)"

.SS "#define LLWU_F2_WUF12_MASK   (0x10U)"

.SS "#define LLWU_F2_WUF12_SHIFT   (4U)"

.SS "#define LLWU_F2_WUF13(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF13_SHIFT\fP)) & \fBLLWU_F2_WUF13_MASK\fP)"

.SS "#define LLWU_F2_WUF13_MASK   (0x20U)"

.SS "#define LLWU_F2_WUF13_SHIFT   (5U)"

.SS "#define LLWU_F2_WUF14(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF14_SHIFT\fP)) & \fBLLWU_F2_WUF14_MASK\fP)"

.SS "#define LLWU_F2_WUF14_MASK   (0x40U)"

.SS "#define LLWU_F2_WUF14_SHIFT   (6U)"

.SS "#define LLWU_F2_WUF15(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF15_SHIFT\fP)) & \fBLLWU_F2_WUF15_MASK\fP)"

.SS "#define LLWU_F2_WUF15_MASK   (0x80U)"

.SS "#define LLWU_F2_WUF15_SHIFT   (7U)"

.SS "#define LLWU_F2_WUF8(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF8_SHIFT\fP)) & \fBLLWU_F2_WUF8_MASK\fP)"

.SS "#define LLWU_F2_WUF8_MASK   (0x1U)"

.SS "#define LLWU_F2_WUF8_SHIFT   (0U)"

.SS "#define LLWU_F2_WUF9(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF9_SHIFT\fP)) & \fBLLWU_F2_WUF9_MASK\fP)"

.SS "#define LLWU_F2_WUF9_MASK   (0x2U)"

.SS "#define LLWU_F2_WUF9_SHIFT   (1U)"

.SS "#define LLWU_F3_MWUF0(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF0_SHIFT\fP)) & \fBLLWU_F3_MWUF0_MASK\fP)"

.SS "#define LLWU_F3_MWUF0_MASK   (0x1U)"

.SS "#define LLWU_F3_MWUF0_SHIFT   (0U)"

.SS "#define LLWU_F3_MWUF1(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF1_SHIFT\fP)) & \fBLLWU_F3_MWUF1_MASK\fP)"

.SS "#define LLWU_F3_MWUF1_MASK   (0x2U)"

.SS "#define LLWU_F3_MWUF1_SHIFT   (1U)"

.SS "#define LLWU_F3_MWUF2(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF2_SHIFT\fP)) & \fBLLWU_F3_MWUF2_MASK\fP)"

.SS "#define LLWU_F3_MWUF2_MASK   (0x4U)"

.SS "#define LLWU_F3_MWUF2_SHIFT   (2U)"

.SS "#define LLWU_F3_MWUF3(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF3_SHIFT\fP)) & \fBLLWU_F3_MWUF3_MASK\fP)"

.SS "#define LLWU_F3_MWUF3_MASK   (0x8U)"

.SS "#define LLWU_F3_MWUF3_SHIFT   (3U)"

.SS "#define LLWU_F3_MWUF4(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF4_SHIFT\fP)) & \fBLLWU_F3_MWUF4_MASK\fP)"

.SS "#define LLWU_F3_MWUF4_MASK   (0x10U)"

.SS "#define LLWU_F3_MWUF4_SHIFT   (4U)"

.SS "#define LLWU_F3_MWUF5(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF5_SHIFT\fP)) & \fBLLWU_F3_MWUF5_MASK\fP)"

.SS "#define LLWU_F3_MWUF5_MASK   (0x20U)"

.SS "#define LLWU_F3_MWUF5_SHIFT   (5U)"

.SS "#define LLWU_F3_MWUF6(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF6_SHIFT\fP)) & \fBLLWU_F3_MWUF6_MASK\fP)"

.SS "#define LLWU_F3_MWUF6_MASK   (0x40U)"

.SS "#define LLWU_F3_MWUF6_SHIFT   (6U)"

.SS "#define LLWU_F3_MWUF7(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF7_SHIFT\fP)) & \fBLLWU_F3_MWUF7_MASK\fP)"

.SS "#define LLWU_F3_MWUF7_MASK   (0x80U)"

.SS "#define LLWU_F3_MWUF7_SHIFT   (7U)"

.SS "#define LLWU_FILT1_FILTE(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTE_SHIFT\fP)) & \fBLLWU_FILT1_FILTE_MASK\fP)"

.SS "#define LLWU_FILT1_FILTE_MASK   (0x60U)"

.SS "#define LLWU_FILT1_FILTE_SHIFT   (5U)"

.SS "#define LLWU_FILT1_FILTF(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTF_SHIFT\fP)) & \fBLLWU_FILT1_FILTF_MASK\fP)"

.SS "#define LLWU_FILT1_FILTF_MASK   (0x80U)"

.SS "#define LLWU_FILT1_FILTF_SHIFT   (7U)"

.SS "#define LLWU_FILT1_FILTSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT1_FILTSEL_MASK\fP)"

.SS "#define LLWU_FILT1_FILTSEL_MASK   (0xFU)"

.SS "#define LLWU_FILT1_FILTSEL_SHIFT   (0U)"

.SS "#define LLWU_FILT2_FILTE(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTE_SHIFT\fP)) & \fBLLWU_FILT2_FILTE_MASK\fP)"

.SS "#define LLWU_FILT2_FILTE_MASK   (0x60U)"

.SS "#define LLWU_FILT2_FILTE_SHIFT   (5U)"

.SS "#define LLWU_FILT2_FILTF(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTF_SHIFT\fP)) & \fBLLWU_FILT2_FILTF_MASK\fP)"

.SS "#define LLWU_FILT2_FILTF_MASK   (0x80U)"

.SS "#define LLWU_FILT2_FILTF_SHIFT   (7U)"

.SS "#define LLWU_FILT2_FILTSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT2_FILTSEL_MASK\fP)"

.SS "#define LLWU_FILT2_FILTSEL_MASK   (0xFU)"

.SS "#define LLWU_FILT2_FILTSEL_SHIFT   (0U)"

.SS "#define LLWU_IRQS   { \fBLLWU_IRQn\fP }"
Interrupt vectors for the LLWU peripheral type 
.SS "#define LLWU_ME_WUME0(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME0_SHIFT\fP)) & \fBLLWU_ME_WUME0_MASK\fP)"

.SS "#define LLWU_ME_WUME0_MASK   (0x1U)"

.SS "#define LLWU_ME_WUME0_SHIFT   (0U)"

.SS "#define LLWU_ME_WUME1(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME1_SHIFT\fP)) & \fBLLWU_ME_WUME1_MASK\fP)"

.SS "#define LLWU_ME_WUME1_MASK   (0x2U)"

.SS "#define LLWU_ME_WUME1_SHIFT   (1U)"

.SS "#define LLWU_ME_WUME2(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME2_SHIFT\fP)) & \fBLLWU_ME_WUME2_MASK\fP)"

.SS "#define LLWU_ME_WUME2_MASK   (0x4U)"

.SS "#define LLWU_ME_WUME2_SHIFT   (2U)"

.SS "#define LLWU_ME_WUME3(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME3_SHIFT\fP)) & \fBLLWU_ME_WUME3_MASK\fP)"

.SS "#define LLWU_ME_WUME3_MASK   (0x8U)"

.SS "#define LLWU_ME_WUME3_SHIFT   (3U)"

.SS "#define LLWU_ME_WUME4(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME4_SHIFT\fP)) & \fBLLWU_ME_WUME4_MASK\fP)"

.SS "#define LLWU_ME_WUME4_MASK   (0x10U)"

.SS "#define LLWU_ME_WUME4_SHIFT   (4U)"

.SS "#define LLWU_ME_WUME5(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME5_SHIFT\fP)) & \fBLLWU_ME_WUME5_MASK\fP)"

.SS "#define LLWU_ME_WUME5_MASK   (0x20U)"

.SS "#define LLWU_ME_WUME5_SHIFT   (5U)"

.SS "#define LLWU_ME_WUME6(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME6_SHIFT\fP)) & \fBLLWU_ME_WUME6_MASK\fP)"

.SS "#define LLWU_ME_WUME6_MASK   (0x40U)"

.SS "#define LLWU_ME_WUME6_SHIFT   (6U)"

.SS "#define LLWU_ME_WUME7(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME7_SHIFT\fP)) & \fBLLWU_ME_WUME7_MASK\fP)"

.SS "#define LLWU_ME_WUME7_MASK   (0x80U)"

.SS "#define LLWU_ME_WUME7_SHIFT   (7U)"

.SS "#define LLWU_PE1_WUPE0(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE0_SHIFT\fP)) & \fBLLWU_PE1_WUPE0_MASK\fP)"

.SS "#define LLWU_PE1_WUPE0_MASK   (0x3U)"

.SS "#define LLWU_PE1_WUPE0_SHIFT   (0U)"

.SS "#define LLWU_PE1_WUPE1(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE1_SHIFT\fP)) & \fBLLWU_PE1_WUPE1_MASK\fP)"

.SS "#define LLWU_PE1_WUPE1_MASK   (0xCU)"

.SS "#define LLWU_PE1_WUPE1_SHIFT   (2U)"

.SS "#define LLWU_PE1_WUPE2(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE2_SHIFT\fP)) & \fBLLWU_PE1_WUPE2_MASK\fP)"

.SS "#define LLWU_PE1_WUPE2_MASK   (0x30U)"

.SS "#define LLWU_PE1_WUPE2_SHIFT   (4U)"

.SS "#define LLWU_PE1_WUPE3(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE3_SHIFT\fP)) & \fBLLWU_PE1_WUPE3_MASK\fP)"

.SS "#define LLWU_PE1_WUPE3_MASK   (0xC0U)"

.SS "#define LLWU_PE1_WUPE3_SHIFT   (6U)"

.SS "#define LLWU_PE2_WUPE4(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE4_SHIFT\fP)) & \fBLLWU_PE2_WUPE4_MASK\fP)"

.SS "#define LLWU_PE2_WUPE4_MASK   (0x3U)"

.SS "#define LLWU_PE2_WUPE4_SHIFT   (0U)"

.SS "#define LLWU_PE2_WUPE5(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE5_SHIFT\fP)) & \fBLLWU_PE2_WUPE5_MASK\fP)"

.SS "#define LLWU_PE2_WUPE5_MASK   (0xCU)"

.SS "#define LLWU_PE2_WUPE5_SHIFT   (2U)"

.SS "#define LLWU_PE2_WUPE6(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE6_SHIFT\fP)) & \fBLLWU_PE2_WUPE6_MASK\fP)"

.SS "#define LLWU_PE2_WUPE6_MASK   (0x30U)"

.SS "#define LLWU_PE2_WUPE6_SHIFT   (4U)"

.SS "#define LLWU_PE2_WUPE7(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE7_SHIFT\fP)) & \fBLLWU_PE2_WUPE7_MASK\fP)"

.SS "#define LLWU_PE2_WUPE7_MASK   (0xC0U)"

.SS "#define LLWU_PE2_WUPE7_SHIFT   (6U)"

.SS "#define LLWU_PE3_WUPE10(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE10_SHIFT\fP)) & \fBLLWU_PE3_WUPE10_MASK\fP)"

.SS "#define LLWU_PE3_WUPE10_MASK   (0x30U)"

.SS "#define LLWU_PE3_WUPE10_SHIFT   (4U)"

.SS "#define LLWU_PE3_WUPE11(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE11_SHIFT\fP)) & \fBLLWU_PE3_WUPE11_MASK\fP)"

.SS "#define LLWU_PE3_WUPE11_MASK   (0xC0U)"

.SS "#define LLWU_PE3_WUPE11_SHIFT   (6U)"

.SS "#define LLWU_PE3_WUPE8(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE8_SHIFT\fP)) & \fBLLWU_PE3_WUPE8_MASK\fP)"

.SS "#define LLWU_PE3_WUPE8_MASK   (0x3U)"

.SS "#define LLWU_PE3_WUPE8_SHIFT   (0U)"

.SS "#define LLWU_PE3_WUPE9(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE9_SHIFT\fP)) & \fBLLWU_PE3_WUPE9_MASK\fP)"

.SS "#define LLWU_PE3_WUPE9_MASK   (0xCU)"

.SS "#define LLWU_PE3_WUPE9_SHIFT   (2U)"

.SS "#define LLWU_PE4_WUPE12(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE12_SHIFT\fP)) & \fBLLWU_PE4_WUPE12_MASK\fP)"

.SS "#define LLWU_PE4_WUPE12_MASK   (0x3U)"

.SS "#define LLWU_PE4_WUPE12_SHIFT   (0U)"

.SS "#define LLWU_PE4_WUPE13(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE13_SHIFT\fP)) & \fBLLWU_PE4_WUPE13_MASK\fP)"

.SS "#define LLWU_PE4_WUPE13_MASK   (0xCU)"

.SS "#define LLWU_PE4_WUPE13_SHIFT   (2U)"

.SS "#define LLWU_PE4_WUPE14(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE14_SHIFT\fP)) & \fBLLWU_PE4_WUPE14_MASK\fP)"

.SS "#define LLWU_PE4_WUPE14_MASK   (0x30U)"

.SS "#define LLWU_PE4_WUPE14_SHIFT   (4U)"

.SS "#define LLWU_PE4_WUPE15(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE15_SHIFT\fP)) & \fBLLWU_PE4_WUPE15_MASK\fP)"

.SS "#define LLWU_PE4_WUPE15_MASK   (0xC0U)"

.SS "#define LLWU_PE4_WUPE15_SHIFT   (6U)"

.SS "#define LLWU_RST_LLRSTE(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_LLRSTE_SHIFT\fP)) & \fBLLWU_RST_LLRSTE_MASK\fP)"

.SS "#define LLWU_RST_LLRSTE_MASK   (0x2U)"

.SS "#define LLWU_RST_LLRSTE_SHIFT   (1U)"

.SS "#define LLWU_RST_RSTFILT(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_RSTFILT_SHIFT\fP)) & \fBLLWU_RST_RSTFILT_MASK\fP)"

.SS "#define LLWU_RST_RSTFILT_MASK   (0x1U)"

.SS "#define LLWU_RST_RSTFILT_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
