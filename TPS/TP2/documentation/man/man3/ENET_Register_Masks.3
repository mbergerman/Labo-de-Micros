.TH "ENET_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ENET_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBENET_BASE\fP   (0x400C0000u)"
.br
.ti -1c
.RI "#define \fBENET\fP   ((\fBENET_Type\fP *)\fBENET_BASE\fP)"
.br
.ti -1c
.RI "#define \fBENET_BASE_ADDRS\fP   { \fBENET_BASE\fP }"
.br
.ti -1c
.RI "#define \fBENET_BASE_PTRS\fP   { \fBENET\fP }"
.br
.ti -1c
.RI "#define \fBENET_Transmit_IRQS\fP   { \fBENET_Transmit_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_Receive_IRQS\fP   { \fBENET_Receive_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_Error_IRQS\fP   { \fBENET_Error_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_1588_Timer_IRQS\fP   { \fBENET_1588_Timer_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_BUFF_ALIGNMENT\fP   (16U)"
.br
.in -1c
.SS "EIR - Interrupt Event Register"

.in +1c
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_TIMER_SHIFT\fP)) & \fBENET_EIR_TS_TIMER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIR_TS_AVAIL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_WAKEUP_SHIFT\fP)) & \fBENET_EIR_WAKEUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_PLR_SHIFT\fP)) & \fBENET_EIR_PLR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_UN_SHIFT\fP)) & \fBENET_EIR_UN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RL_SHIFT\fP)) & \fBENET_EIR_RL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_LC_SHIFT\fP)) & \fBENET_EIR_LC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_EBERR_SHIFT\fP)) & \fBENET_EIR_EBERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_MII_SHIFT\fP)) & \fBENET_EIR_MII_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXB_SHIFT\fP)) & \fBENET_EIR_RXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXF_SHIFT\fP)) & \fBENET_EIR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXB_SHIFT\fP)) & \fBENET_EIR_TXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXF_SHIFT\fP)) & \fBENET_EIR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_GRA_SHIFT\fP)) & \fBENET_EIR_GRA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABT_SHIFT\fP)) & \fBENET_EIR_BABT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABR_SHIFT\fP)) & \fBENET_EIR_BABR_MASK\fP)"
.br
.in -1c
.SS "EIMR - Interrupt Mask Register"

.in +1c
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_TIMER_SHIFT\fP)) & \fBENET_EIMR_TS_TIMER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIMR_TS_AVAIL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_WAKEUP_SHIFT\fP)) & \fBENET_EIMR_WAKEUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_PLR_SHIFT\fP)) & \fBENET_EIMR_PLR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_UN_SHIFT\fP)) & \fBENET_EIMR_UN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RL_SHIFT\fP)) & \fBENET_EIMR_RL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_LC_SHIFT\fP)) & \fBENET_EIMR_LC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_EBERR_SHIFT\fP)) & \fBENET_EIMR_EBERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_MII_SHIFT\fP)) & \fBENET_EIMR_MII_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXB_SHIFT\fP)) & \fBENET_EIMR_RXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXF_SHIFT\fP)) & \fBENET_EIMR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXB_SHIFT\fP)) & \fBENET_EIMR_TXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXF_SHIFT\fP)) & \fBENET_EIMR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_GRA_SHIFT\fP)) & \fBENET_EIMR_GRA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABT_SHIFT\fP)) & \fBENET_EIMR_BABT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABR_SHIFT\fP)) & \fBENET_EIMR_BABR_MASK\fP)"
.br
.in -1c
.SS "RDAR - Receive Descriptor Active Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RDAR_RDAR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_RDAR_RDAR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_RDAR_RDAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDAR_RDAR_SHIFT\fP)) & \fBENET_RDAR_RDAR_MASK\fP)"
.br
.in -1c
.SS "TDAR - Transmit Descriptor Active Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TDAR_TDAR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_TDAR_TDAR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_TDAR_TDAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDAR_TDAR_SHIFT\fP)) & \fBENET_TDAR_TDAR_MASK\fP)"
.br
.in -1c
.SS "ECR - Ethernet Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ECR_RESET_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_RESET_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_RESET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_RESET_SHIFT\fP)) & \fBENET_ECR_RESET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_ETHEREN_SHIFT\fP)) & \fBENET_ECR_ETHEREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_MAGICEN_SHIFT\fP)) & \fBENET_ECR_MAGICEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_SLEEP_SHIFT\fP)) & \fBENET_ECR_SLEEP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_EN1588_SHIFT\fP)) & \fBENET_ECR_EN1588_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBGEN_SHIFT\fP)) & \fBENET_ECR_DBGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_STOPEN_SHIFT\fP)) & \fBENET_ECR_STOPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBSWP_SHIFT\fP)) & \fBENET_ECR_DBSWP_MASK\fP)"
.br
.in -1c
.SS "MMFR - MII Management Frame Register"

.in +1c
.ti -1c
.RI "#define \fBENET_MMFR_DATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_DATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_DATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_DATA_SHIFT\fP)) & \fBENET_MMFR_DATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_TA_SHIFT\fP)) & \fBENET_MMFR_TA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA_MASK\fP   (0x7C0000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_RA_SHIFT\fP)) & \fBENET_MMFR_RA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA_MASK\fP   (0xF800000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_PA_SHIFT\fP)) & \fBENET_MMFR_PA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_OP_SHIFT\fP)) & \fBENET_MMFR_OP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_ST_SHIFT\fP)) & \fBENET_MMFR_ST_MASK\fP)"
.br
.in -1c
.SS "MSCR - MII Speed Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED_MASK\fP   (0x7EU)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_MII_SPEED_SHIFT\fP)) & \fBENET_MSCR_MII_SPEED_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_DIS_PRE_SHIFT\fP)) & \fBENET_MSCR_DIS_PRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_HOLDTIME_SHIFT\fP)) & \fBENET_MSCR_HOLDTIME_MASK\fP)"
.br
.in -1c
.SS "MIBC - MIB Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_CLEAR_SHIFT\fP)) & \fBENET_MIBC_MIB_CLEAR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_IDLE_SHIFT\fP)) & \fBENET_MIBC_MIB_IDLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_DIS_SHIFT\fP)) & \fBENET_MIBC_MIB_DIS_MASK\fP)"
.br
.in -1c
.SS "RCR - Receive Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RCR_LOOP_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_LOOP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_LOOP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_LOOP_SHIFT\fP)) & \fBENET_RCR_LOOP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_DRT_SHIFT\fP)) & \fBENET_RCR_DRT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MII_MODE_SHIFT\fP)) & \fBENET_RCR_MII_MODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PROM_SHIFT\fP)) & \fBENET_RCR_PROM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_BC_REJ_SHIFT\fP)) & \fBENET_RCR_BC_REJ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_FCE_SHIFT\fP)) & \fBENET_RCR_FCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_MODE_SHIFT\fP)) & \fBENET_RCR_RMII_MODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_10T_SHIFT\fP)) & \fBENET_RCR_RMII_10T_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PADEN_SHIFT\fP)) & \fBENET_RCR_PADEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PAUFWD_SHIFT\fP)) & \fBENET_RCR_PAUFWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CRCFWD_SHIFT\fP)) & \fBENET_RCR_CRCFWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CFEN_SHIFT\fP)) & \fBENET_RCR_CFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL_MASK\fP   (0x3FFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MAX_FL_SHIFT\fP)) & \fBENET_RCR_MAX_FL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_NLC_SHIFT\fP)) & \fBENET_RCR_NLC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_GRS_SHIFT\fP)) & \fBENET_RCR_GRS_MASK\fP)"
.br
.in -1c
.SS "TCR - Transmit Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TCR_GTS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_GTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_GTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_GTS_SHIFT\fP)) & \fBENET_TCR_GTS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_FDEN_SHIFT\fP)) & \fBENET_TCR_FDEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_TFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_TFC_PAUSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_RFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_RFC_PAUSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL_MASK\fP   (0xE0U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDSEL_SHIFT\fP)) & \fBENET_TCR_ADDSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDINS_SHIFT\fP)) & \fBENET_TCR_ADDINS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_CRCFWD_SHIFT\fP)) & \fBENET_TCR_CRCFWD_MASK\fP)"
.br
.in -1c
.SS "PALR - Physical Address Lower Register"

.in +1c
.ti -1c
.RI "#define \fBENET_PALR_PADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_PALR_PADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_PALR_PADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PALR_PADDR1_SHIFT\fP)) & \fBENET_PALR_PADDR1_MASK\fP)"
.br
.in -1c
.SS "PAUR - Physical Address Upper Register"

.in +1c
.ti -1c
.RI "#define \fBENET_PAUR_TYPE_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_TYPE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_TYPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_TYPE_SHIFT\fP)) & \fBENET_PAUR_TYPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_PADDR2_SHIFT\fP)) & \fBENET_PAUR_PADDR2_MASK\fP)"
.br
.in -1c
.SS "OPD - Opcode/Pause Duration Register"

.in +1c
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_PAUSE_DUR_SHIFT\fP)) & \fBENET_OPD_PAUSE_DUR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_OPCODE_SHIFT\fP)) & \fBENET_OPD_OPCODE_MASK\fP)"
.br
.in -1c
.SS "IAUR - Descriptor Individual Upper Address Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IAUR_IADDR1_SHIFT\fP)) & \fBENET_IAUR_IADDR1_MASK\fP)"
.br
.in -1c
.SS "IALR - Descriptor Individual Lower Address Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IALR_IADDR2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IALR_IADDR2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IALR_IADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IALR_IADDR2_SHIFT\fP)) & \fBENET_IALR_IADDR2_MASK\fP)"
.br
.in -1c
.SS "GAUR - Descriptor Group Upper Address Register"

.in +1c
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GAUR_GADDR1_SHIFT\fP)) & \fBENET_GAUR_GADDR1_MASK\fP)"
.br
.in -1c
.SS "GALR - Descriptor Group Lower Address Register"

.in +1c
.ti -1c
.RI "#define \fBENET_GALR_GADDR2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_GALR_GADDR2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_GALR_GADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GALR_GADDR2_SHIFT\fP)) & \fBENET_GALR_GADDR2_MASK\fP)"
.br
.in -1c
.SS "TFWR - Transmit FIFO Watermark Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TFWR_TFWR_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_TFWR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_TFWR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_TFWR_SHIFT\fP)) & \fBENET_TFWR_TFWR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_STRFWD_SHIFT\fP)) & \fBENET_TFWR_STRFWD_MASK\fP)"
.br
.in -1c
.SS "RDSR - Receive Descriptor Ring Start Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START_MASK\fP   (0xFFFFFFF8U)"
.br
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDSR_R_DES_START_SHIFT\fP)) & \fBENET_RDSR_R_DES_START_MASK\fP)"
.br
.in -1c
.SS "TDSR - Transmit Buffer Descriptor Ring Start Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START_MASK\fP   (0xFFFFFFF8U)"
.br
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDSR_X_DES_START_SHIFT\fP)) & \fBENET_TDSR_X_DES_START_MASK\fP)"
.br
.in -1c
.SS "MRBR - Maximum Receive Buffer Size Register"

.in +1c
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE_MASK\fP   (0x3FF0U)"
.br
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MRBR_R_BUF_SIZE_SHIFT\fP)) & \fBENET_MRBR_R_BUF_SIZE_MASK\fP)"
.br
.in -1c
.SS "RSFL - Receive FIFO Section Full Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSFL_RX_SECTION_FULL_SHIFT\fP)) & \fBENET_RSFL_RX_SECTION_FULL_MASK\fP)"
.br
.in -1c
.SS "RSEM - Receive FIFO Section Empty Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_RX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_RX_SECTION_EMPTY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_STAT_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_STAT_SECTION_EMPTY_MASK\fP)"
.br
.in -1c
.SS "RAEM - Receive FIFO Almost Empty Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAEM_RX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_RAEM_RX_ALMOST_EMPTY_MASK\fP)"
.br
.in -1c
.SS "RAFL - Receive FIFO Almost Full Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAFL_RX_ALMOST_FULL_SHIFT\fP)) & \fBENET_RAFL_RX_ALMOST_FULL_MASK\fP)"
.br
.in -1c
.SS "TSEM - Transmit FIFO Section Empty Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TSEM_TX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_TSEM_TX_SECTION_EMPTY_MASK\fP)"
.br
.in -1c
.SS "TAEM - Transmit FIFO Almost Empty Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAEM_TX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_TAEM_TX_ALMOST_EMPTY_MASK\fP)"
.br
.in -1c
.SS "TAFL - Transmit FIFO Almost Full Threshold"

.in +1c
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAFL_TX_ALMOST_FULL_SHIFT\fP)) & \fBENET_TAFL_TX_ALMOST_FULL_MASK\fP)"
.br
.in -1c
.SS "TIPG - Transmit Inter-Packet Gap"

.in +1c
.ti -1c
.RI "#define \fBENET_TIPG_IPG_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBENET_TIPG_IPG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TIPG_IPG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TIPG_IPG_SHIFT\fP)) & \fBENET_TIPG_IPG_MASK\fP)"
.br
.in -1c
.SS "FTRL - Frame Truncation Length"

.in +1c
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL_MASK\fP   (0x3FFFU)"
.br
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_FTRL_TRUNC_FL_SHIFT\fP)) & \fBENET_FTRL_TRUNC_FL_MASK\fP)"
.br
.in -1c
.SS "TACC - Transmit Accelerator Function Configuration"

.in +1c
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_SHIFT16_SHIFT\fP)) & \fBENET_TACC_SHIFT16_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_IPCHK_SHIFT\fP)) & \fBENET_TACC_IPCHK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_PROCHK_SHIFT\fP)) & \fBENET_TACC_PROCHK_MASK\fP)"
.br
.in -1c
.SS "RACC - Receive Accelerator Function Configuration"

.in +1c
.ti -1c
.RI "#define \fBENET_RACC_PADREM_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PADREM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PADREM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PADREM_SHIFT\fP)) & \fBENET_RACC_PADREM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_IPDIS_SHIFT\fP)) & \fBENET_RACC_IPDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PRODIS_SHIFT\fP)) & \fBENET_RACC_PRODIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_LINEDIS_SHIFT\fP)) & \fBENET_RACC_LINEDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_SHIFT16_SHIFT\fP)) & \fBENET_RACC_SHIFT16_MASK\fP)"
.br
.in -1c
.SS "RMON_T_PACKETS - Tx Packet Count Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_PACKETS_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_PACKETS_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_BC_PKT - Tx Broadcast Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_BC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_BC_PKT_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_MC_PKT - Tx Multicast Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_MC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_MC_PKT_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_CRC_ALIGN_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_UNDERSIZE_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OVERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_OVERSIZE_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_FRAG_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_FRAG_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_JAB_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_JAB_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_COL - Tx Collision Count Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_COL_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_COL_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P64 - Tx 64-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P64_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P64_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P65TO127_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P65TO127_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P128TO255_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P128TO255_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P256TO511_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P256TO511_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P512TO1023_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P512TO1023_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P1024TO2047_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P1024TO2047_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P_GTE2048_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P_GTE2048_TXPKTS_MASK\fP)"
.br
.in -1c
.SS "RMON_T_OCTETS - Tx Octets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OCTETS_TXOCTS_SHIFT\fP)) & \fBENET_RMON_T_OCTETS_TXOCTS_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FRAME_OK_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_1COL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_1COL_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MCOL_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_DEF_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_DEF_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_LCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_LCOL_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_EXCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_EXCOL_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MACERR_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_CSERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_CSERR_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FDXFC_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_OCTETS_OK_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_PACKETS - Rx Packet Count Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_PACKETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_PACKETS_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_BC_PKT - Rx Broadcast Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_BC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_BC_PKT_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_MC_PKT - Rx Multicast Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_MC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_MC_PKT_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_CRC_ALIGN_COUNT_SHIFT\fP)) & \fBENET_RMON_R_CRC_ALIGN_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_UNDERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_UNDERSIZE_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OVERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OVERSIZE_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_FRAG_COUNT_SHIFT\fP)) & \fBENET_RMON_R_FRAG_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_JAB_COUNT_SHIFT\fP)) & \fBENET_RMON_R_JAB_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P64 - Rx 64-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P64_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P64_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P65TO127_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P65TO127_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P128TO255_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P128TO255_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P256TO511_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P256TO511_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P512TO1023_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P512TO1023_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P1024TO2047_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P1024TO2047_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P_GTE2048_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P_GTE2048_COUNT_MASK\fP)"
.br
.in -1c
.SS "RMON_R_OCTETS - Rx Octets Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OCTETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OCTETS_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_DROP - Frames not Counted Correctly Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_DROP_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_DROP_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_FRAME_OK - Frames Received OK Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FRAME_OK_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_CRC - Frames Received with CRC Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_CRC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_CRC_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_ALIGN_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_ALIGN_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_MACERR_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FDXFC_COUNT_MASK\fP)"
.br
.in -1c
.SS "IEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register"

.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_OCTETS_OK_COUNT_MASK\fP)"
.br
.in -1c
.SS "ATCR - Adjustable Timer Control Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATCR_EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_EN_SHIFT\fP)) & \fBENET_ATCR_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFEN_SHIFT\fP)) & \fBENET_ATCR_OFFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFRST_SHIFT\fP)) & \fBENET_ATCR_OFFRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PEREN_SHIFT\fP)) & \fBENET_ATCR_PEREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PINPER_SHIFT\fP)) & \fBENET_ATCR_PINPER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_RESTART_SHIFT\fP)) & \fBENET_ATCR_RESTART_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_CAPTURE_SHIFT\fP)) & \fBENET_ATCR_CAPTURE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_SLAVE_SHIFT\fP)) & \fBENET_ATCR_SLAVE_MASK\fP)"
.br
.in -1c
.SS "ATVR - Timer Value Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATVR_ATIME_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATVR_ATIME_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATVR_ATIME\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATVR_ATIME_SHIFT\fP)) & \fBENET_ATVR_ATIME_MASK\fP)"
.br
.in -1c
.SS "ATOFF - Timer Offset Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATOFF_OFFSET_SHIFT\fP)) & \fBENET_ATOFF_OFFSET_MASK\fP)"
.br
.in -1c
.SS "ATPER - Timer Period Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATPER_PERIOD_SHIFT\fP)) & \fBENET_ATPER_PERIOD_MASK\fP)"
.br
.in -1c
.SS "ATCOR - Timer Correction Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATCOR_COR_MASK\fP   (0x7FFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATCOR_COR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATCOR_COR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCOR_COR_SHIFT\fP)) & \fBENET_ATCOR_COR_MASK\fP)"
.br
.in -1c
.SS "ATINC - Time-Stamping Clock Period Register"

.in +1c
.ti -1c
.RI "#define \fBENET_ATINC_INC_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_SHIFT\fP)) & \fBENET_ATINC_INC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR_MASK\fP   (0x7F00U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_CORR_SHIFT\fP)) & \fBENET_ATINC_INC_CORR_MASK\fP)"
.br
.in -1c
.SS "ATSTMP - Timestamp of Last Transmitted Frame"

.in +1c
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATSTMP_TIMESTAMP_SHIFT\fP)) & \fBENET_ATSTMP_TIMESTAMP_MASK\fP)"
.br
.in -1c
.SS "TGSR - Timer Global Status Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TGSR_TF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF0_SHIFT\fP)) & \fBENET_TGSR_TF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF1_SHIFT\fP)) & \fBENET_TGSR_TF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF2_SHIFT\fP)) & \fBENET_TGSR_TF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF3_SHIFT\fP)) & \fBENET_TGSR_TF3_MASK\fP)"
.br
.in -1c
.SS "TCSR - Timer Control Status Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TCSR_TDRE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TDRE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TDRE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TDRE_SHIFT\fP)) & \fBENET_TCSR_TDRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE_MASK\fP   (0x3CU)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TMODE_SHIFT\fP)) & \fBENET_TCSR_TMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TIE_SHIFT\fP)) & \fBENET_TCSR_TIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TF_SHIFT\fP)) & \fBENET_TCSR_TF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_COUNT\fP   (4U)"
.br
.in -1c
.SS "TCCR - Timer Compare Capture Register"

.in +1c
.ti -1c
.RI "#define \fBENET_TCCR_TCC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_TCC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_TCC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCCR_TCC_SHIFT\fP)) & \fBENET_TCCR_TCC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_COUNT\fP   (4U)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define ENET   ((\fBENET_Type\fP *)\fBENET_BASE\fP)"
Peripheral ENET base pointer 
.SS "#define ENET_1588_Timer_IRQS   { \fBENET_1588_Timer_IRQn\fP }"

.SS "#define ENET_ATCOR_COR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCOR_COR_SHIFT\fP)) & \fBENET_ATCOR_COR_MASK\fP)"

.SS "#define ENET_ATCOR_COR_MASK   (0x7FFFFFFFU)"

.SS "#define ENET_ATCOR_COR_SHIFT   (0U)"

.SS "#define ENET_ATCR_CAPTURE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_CAPTURE_SHIFT\fP)) & \fBENET_ATCR_CAPTURE_MASK\fP)"

.SS "#define ENET_ATCR_CAPTURE_MASK   (0x800U)"

.SS "#define ENET_ATCR_CAPTURE_SHIFT   (11U)"

.SS "#define ENET_ATCR_EN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_EN_SHIFT\fP)) & \fBENET_ATCR_EN_MASK\fP)"

.SS "#define ENET_ATCR_EN_MASK   (0x1U)"

.SS "#define ENET_ATCR_EN_SHIFT   (0U)"

.SS "#define ENET_ATCR_OFFEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFEN_SHIFT\fP)) & \fBENET_ATCR_OFFEN_MASK\fP)"

.SS "#define ENET_ATCR_OFFEN_MASK   (0x4U)"

.SS "#define ENET_ATCR_OFFEN_SHIFT   (2U)"

.SS "#define ENET_ATCR_OFFRST(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFRST_SHIFT\fP)) & \fBENET_ATCR_OFFRST_MASK\fP)"

.SS "#define ENET_ATCR_OFFRST_MASK   (0x8U)"

.SS "#define ENET_ATCR_OFFRST_SHIFT   (3U)"

.SS "#define ENET_ATCR_PEREN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PEREN_SHIFT\fP)) & \fBENET_ATCR_PEREN_MASK\fP)"

.SS "#define ENET_ATCR_PEREN_MASK   (0x10U)"

.SS "#define ENET_ATCR_PEREN_SHIFT   (4U)"

.SS "#define ENET_ATCR_PINPER(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PINPER_SHIFT\fP)) & \fBENET_ATCR_PINPER_MASK\fP)"

.SS "#define ENET_ATCR_PINPER_MASK   (0x80U)"

.SS "#define ENET_ATCR_PINPER_SHIFT   (7U)"

.SS "#define ENET_ATCR_RESTART(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_RESTART_SHIFT\fP)) & \fBENET_ATCR_RESTART_MASK\fP)"

.SS "#define ENET_ATCR_RESTART_MASK   (0x200U)"

.SS "#define ENET_ATCR_RESTART_SHIFT   (9U)"

.SS "#define ENET_ATCR_SLAVE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_SLAVE_SHIFT\fP)) & \fBENET_ATCR_SLAVE_MASK\fP)"

.SS "#define ENET_ATCR_SLAVE_MASK   (0x2000U)"

.SS "#define ENET_ATCR_SLAVE_SHIFT   (13U)"

.SS "#define ENET_ATINC_INC(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_SHIFT\fP)) & \fBENET_ATINC_INC_MASK\fP)"

.SS "#define ENET_ATINC_INC_CORR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_CORR_SHIFT\fP)) & \fBENET_ATINC_INC_CORR_MASK\fP)"

.SS "#define ENET_ATINC_INC_CORR_MASK   (0x7F00U)"

.SS "#define ENET_ATINC_INC_CORR_SHIFT   (8U)"

.SS "#define ENET_ATINC_INC_MASK   (0x7FU)"

.SS "#define ENET_ATINC_INC_SHIFT   (0U)"

.SS "#define ENET_ATOFF_OFFSET(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATOFF_OFFSET_SHIFT\fP)) & \fBENET_ATOFF_OFFSET_MASK\fP)"

.SS "#define ENET_ATOFF_OFFSET_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_ATOFF_OFFSET_SHIFT   (0U)"

.SS "#define ENET_ATPER_PERIOD(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATPER_PERIOD_SHIFT\fP)) & \fBENET_ATPER_PERIOD_MASK\fP)"

.SS "#define ENET_ATPER_PERIOD_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_ATPER_PERIOD_SHIFT   (0U)"

.SS "#define ENET_ATSTMP_TIMESTAMP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATSTMP_TIMESTAMP_SHIFT\fP)) & \fBENET_ATSTMP_TIMESTAMP_MASK\fP)"

.SS "#define ENET_ATSTMP_TIMESTAMP_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_ATSTMP_TIMESTAMP_SHIFT   (0U)"

.SS "#define ENET_ATVR_ATIME(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATVR_ATIME_SHIFT\fP)) & \fBENET_ATVR_ATIME_MASK\fP)"

.SS "#define ENET_ATVR_ATIME_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_ATVR_ATIME_SHIFT   (0U)"

.SS "#define ENET_BASE   (0x400C0000u)"
Peripheral ENET base address 
.SS "#define ENET_BASE_ADDRS   { \fBENET_BASE\fP }"
Array initializer of ENET peripheral base addresses 
.SS "#define ENET_BASE_PTRS   { \fBENET\fP }"
Array initializer of ENET peripheral base pointers 
.SS "#define ENET_BUFF_ALIGNMENT   (16U)"

.SS "#define ENET_ECR_DBGEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBGEN_SHIFT\fP)) & \fBENET_ECR_DBGEN_MASK\fP)"

.SS "#define ENET_ECR_DBGEN_MASK   (0x40U)"

.SS "#define ENET_ECR_DBGEN_SHIFT   (6U)"

.SS "#define ENET_ECR_DBSWP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBSWP_SHIFT\fP)) & \fBENET_ECR_DBSWP_MASK\fP)"

.SS "#define ENET_ECR_DBSWP_MASK   (0x100U)"

.SS "#define ENET_ECR_DBSWP_SHIFT   (8U)"

.SS "#define ENET_ECR_EN1588(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_EN1588_SHIFT\fP)) & \fBENET_ECR_EN1588_MASK\fP)"

.SS "#define ENET_ECR_EN1588_MASK   (0x10U)"

.SS "#define ENET_ECR_EN1588_SHIFT   (4U)"

.SS "#define ENET_ECR_ETHEREN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_ETHEREN_SHIFT\fP)) & \fBENET_ECR_ETHEREN_MASK\fP)"

.SS "#define ENET_ECR_ETHEREN_MASK   (0x2U)"

.SS "#define ENET_ECR_ETHEREN_SHIFT   (1U)"

.SS "#define ENET_ECR_MAGICEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_MAGICEN_SHIFT\fP)) & \fBENET_ECR_MAGICEN_MASK\fP)"

.SS "#define ENET_ECR_MAGICEN_MASK   (0x4U)"

.SS "#define ENET_ECR_MAGICEN_SHIFT   (2U)"

.SS "#define ENET_ECR_RESET(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_RESET_SHIFT\fP)) & \fBENET_ECR_RESET_MASK\fP)"

.SS "#define ENET_ECR_RESET_MASK   (0x1U)"

.SS "#define ENET_ECR_RESET_SHIFT   (0U)"

.SS "#define ENET_ECR_SLEEP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_SLEEP_SHIFT\fP)) & \fBENET_ECR_SLEEP_MASK\fP)"

.SS "#define ENET_ECR_SLEEP_MASK   (0x8U)"

.SS "#define ENET_ECR_SLEEP_SHIFT   (3U)"

.SS "#define ENET_ECR_STOPEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_STOPEN_SHIFT\fP)) & \fBENET_ECR_STOPEN_MASK\fP)"

.SS "#define ENET_ECR_STOPEN_MASK   (0x80U)"

.SS "#define ENET_ECR_STOPEN_SHIFT   (7U)"

.SS "#define ENET_EIMR_BABR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABR_SHIFT\fP)) & \fBENET_EIMR_BABR_MASK\fP)"

.SS "#define ENET_EIMR_BABR_MASK   (0x40000000U)"

.SS "#define ENET_EIMR_BABR_SHIFT   (30U)"

.SS "#define ENET_EIMR_BABT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABT_SHIFT\fP)) & \fBENET_EIMR_BABT_MASK\fP)"

.SS "#define ENET_EIMR_BABT_MASK   (0x20000000U)"

.SS "#define ENET_EIMR_BABT_SHIFT   (29U)"

.SS "#define ENET_EIMR_EBERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_EBERR_SHIFT\fP)) & \fBENET_EIMR_EBERR_MASK\fP)"

.SS "#define ENET_EIMR_EBERR_MASK   (0x400000U)"

.SS "#define ENET_EIMR_EBERR_SHIFT   (22U)"

.SS "#define ENET_EIMR_GRA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_GRA_SHIFT\fP)) & \fBENET_EIMR_GRA_MASK\fP)"

.SS "#define ENET_EIMR_GRA_MASK   (0x10000000U)"

.SS "#define ENET_EIMR_GRA_SHIFT   (28U)"

.SS "#define ENET_EIMR_LC(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_LC_SHIFT\fP)) & \fBENET_EIMR_LC_MASK\fP)"

.SS "#define ENET_EIMR_LC_MASK   (0x200000U)"

.SS "#define ENET_EIMR_LC_SHIFT   (21U)"

.SS "#define ENET_EIMR_MII(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_MII_SHIFT\fP)) & \fBENET_EIMR_MII_MASK\fP)"

.SS "#define ENET_EIMR_MII_MASK   (0x800000U)"

.SS "#define ENET_EIMR_MII_SHIFT   (23U)"

.SS "#define ENET_EIMR_PLR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_PLR_SHIFT\fP)) & \fBENET_EIMR_PLR_MASK\fP)"

.SS "#define ENET_EIMR_PLR_MASK   (0x40000U)"

.SS "#define ENET_EIMR_PLR_SHIFT   (18U)"

.SS "#define ENET_EIMR_RL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RL_SHIFT\fP)) & \fBENET_EIMR_RL_MASK\fP)"

.SS "#define ENET_EIMR_RL_MASK   (0x100000U)"

.SS "#define ENET_EIMR_RL_SHIFT   (20U)"

.SS "#define ENET_EIMR_RXB(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXB_SHIFT\fP)) & \fBENET_EIMR_RXB_MASK\fP)"

.SS "#define ENET_EIMR_RXB_MASK   (0x1000000U)"

.SS "#define ENET_EIMR_RXB_SHIFT   (24U)"

.SS "#define ENET_EIMR_RXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXF_SHIFT\fP)) & \fBENET_EIMR_RXF_MASK\fP)"

.SS "#define ENET_EIMR_RXF_MASK   (0x2000000U)"

.SS "#define ENET_EIMR_RXF_SHIFT   (25U)"

.SS "#define ENET_EIMR_TS_AVAIL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIMR_TS_AVAIL_MASK\fP)"

.SS "#define ENET_EIMR_TS_AVAIL_MASK   (0x10000U)"

.SS "#define ENET_EIMR_TS_AVAIL_SHIFT   (16U)"

.SS "#define ENET_EIMR_TS_TIMER(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_TIMER_SHIFT\fP)) & \fBENET_EIMR_TS_TIMER_MASK\fP)"

.SS "#define ENET_EIMR_TS_TIMER_MASK   (0x8000U)"

.SS "#define ENET_EIMR_TS_TIMER_SHIFT   (15U)"

.SS "#define ENET_EIMR_TXB(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXB_SHIFT\fP)) & \fBENET_EIMR_TXB_MASK\fP)"

.SS "#define ENET_EIMR_TXB_MASK   (0x4000000U)"

.SS "#define ENET_EIMR_TXB_SHIFT   (26U)"

.SS "#define ENET_EIMR_TXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXF_SHIFT\fP)) & \fBENET_EIMR_TXF_MASK\fP)"

.SS "#define ENET_EIMR_TXF_MASK   (0x8000000U)"

.SS "#define ENET_EIMR_TXF_SHIFT   (27U)"

.SS "#define ENET_EIMR_UN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_UN_SHIFT\fP)) & \fBENET_EIMR_UN_MASK\fP)"

.SS "#define ENET_EIMR_UN_MASK   (0x80000U)"

.SS "#define ENET_EIMR_UN_SHIFT   (19U)"

.SS "#define ENET_EIMR_WAKEUP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_WAKEUP_SHIFT\fP)) & \fBENET_EIMR_WAKEUP_MASK\fP)"

.SS "#define ENET_EIMR_WAKEUP_MASK   (0x20000U)"

.SS "#define ENET_EIMR_WAKEUP_SHIFT   (17U)"

.SS "#define ENET_EIR_BABR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABR_SHIFT\fP)) & \fBENET_EIR_BABR_MASK\fP)"

.SS "#define ENET_EIR_BABR_MASK   (0x40000000U)"

.SS "#define ENET_EIR_BABR_SHIFT   (30U)"

.SS "#define ENET_EIR_BABT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABT_SHIFT\fP)) & \fBENET_EIR_BABT_MASK\fP)"

.SS "#define ENET_EIR_BABT_MASK   (0x20000000U)"

.SS "#define ENET_EIR_BABT_SHIFT   (29U)"

.SS "#define ENET_EIR_EBERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_EBERR_SHIFT\fP)) & \fBENET_EIR_EBERR_MASK\fP)"

.SS "#define ENET_EIR_EBERR_MASK   (0x400000U)"

.SS "#define ENET_EIR_EBERR_SHIFT   (22U)"

.SS "#define ENET_EIR_GRA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_GRA_SHIFT\fP)) & \fBENET_EIR_GRA_MASK\fP)"

.SS "#define ENET_EIR_GRA_MASK   (0x10000000U)"

.SS "#define ENET_EIR_GRA_SHIFT   (28U)"

.SS "#define ENET_EIR_LC(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_LC_SHIFT\fP)) & \fBENET_EIR_LC_MASK\fP)"

.SS "#define ENET_EIR_LC_MASK   (0x200000U)"

.SS "#define ENET_EIR_LC_SHIFT   (21U)"

.SS "#define ENET_EIR_MII(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_MII_SHIFT\fP)) & \fBENET_EIR_MII_MASK\fP)"

.SS "#define ENET_EIR_MII_MASK   (0x800000U)"

.SS "#define ENET_EIR_MII_SHIFT   (23U)"

.SS "#define ENET_EIR_PLR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_PLR_SHIFT\fP)) & \fBENET_EIR_PLR_MASK\fP)"

.SS "#define ENET_EIR_PLR_MASK   (0x40000U)"

.SS "#define ENET_EIR_PLR_SHIFT   (18U)"

.SS "#define ENET_EIR_RL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RL_SHIFT\fP)) & \fBENET_EIR_RL_MASK\fP)"

.SS "#define ENET_EIR_RL_MASK   (0x100000U)"

.SS "#define ENET_EIR_RL_SHIFT   (20U)"

.SS "#define ENET_EIR_RXB(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXB_SHIFT\fP)) & \fBENET_EIR_RXB_MASK\fP)"

.SS "#define ENET_EIR_RXB_MASK   (0x1000000U)"

.SS "#define ENET_EIR_RXB_SHIFT   (24U)"

.SS "#define ENET_EIR_RXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXF_SHIFT\fP)) & \fBENET_EIR_RXF_MASK\fP)"

.SS "#define ENET_EIR_RXF_MASK   (0x2000000U)"

.SS "#define ENET_EIR_RXF_SHIFT   (25U)"

.SS "#define ENET_EIR_TS_AVAIL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIR_TS_AVAIL_MASK\fP)"

.SS "#define ENET_EIR_TS_AVAIL_MASK   (0x10000U)"

.SS "#define ENET_EIR_TS_AVAIL_SHIFT   (16U)"

.SS "#define ENET_EIR_TS_TIMER(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_TIMER_SHIFT\fP)) & \fBENET_EIR_TS_TIMER_MASK\fP)"

.SS "#define ENET_EIR_TS_TIMER_MASK   (0x8000U)"

.SS "#define ENET_EIR_TS_TIMER_SHIFT   (15U)"

.SS "#define ENET_EIR_TXB(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXB_SHIFT\fP)) & \fBENET_EIR_TXB_MASK\fP)"

.SS "#define ENET_EIR_TXB_MASK   (0x4000000U)"

.SS "#define ENET_EIR_TXB_SHIFT   (26U)"

.SS "#define ENET_EIR_TXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXF_SHIFT\fP)) & \fBENET_EIR_TXF_MASK\fP)"

.SS "#define ENET_EIR_TXF_MASK   (0x8000000U)"

.SS "#define ENET_EIR_TXF_SHIFT   (27U)"

.SS "#define ENET_EIR_UN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_UN_SHIFT\fP)) & \fBENET_EIR_UN_MASK\fP)"

.SS "#define ENET_EIR_UN_MASK   (0x80000U)"

.SS "#define ENET_EIR_UN_SHIFT   (19U)"

.SS "#define ENET_EIR_WAKEUP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_WAKEUP_SHIFT\fP)) & \fBENET_EIR_WAKEUP_MASK\fP)"

.SS "#define ENET_EIR_WAKEUP_MASK   (0x20000U)"

.SS "#define ENET_EIR_WAKEUP_SHIFT   (17U)"

.SS "#define ENET_Error_IRQS   { \fBENET_Error_IRQn\fP }"

.SS "#define ENET_FTRL_TRUNC_FL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_FTRL_TRUNC_FL_SHIFT\fP)) & \fBENET_FTRL_TRUNC_FL_MASK\fP)"

.SS "#define ENET_FTRL_TRUNC_FL_MASK   (0x3FFFU)"

.SS "#define ENET_FTRL_TRUNC_FL_SHIFT   (0U)"

.SS "#define ENET_GALR_GADDR2(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GALR_GADDR2_SHIFT\fP)) & \fBENET_GALR_GADDR2_MASK\fP)"

.SS "#define ENET_GALR_GADDR2_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_GALR_GADDR2_SHIFT   (0U)"

.SS "#define ENET_GAUR_GADDR1(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GAUR_GADDR1_SHIFT\fP)) & \fBENET_GAUR_GADDR1_MASK\fP)"

.SS "#define ENET_GAUR_GADDR1_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_GAUR_GADDR1_SHIFT   (0U)"

.SS "#define ENET_IALR_IADDR2(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IALR_IADDR2_SHIFT\fP)) & \fBENET_IALR_IADDR2_MASK\fP)"

.SS "#define ENET_IALR_IADDR2_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_IALR_IADDR2_SHIFT   (0U)"

.SS "#define ENET_IAUR_IADDR1(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IAUR_IADDR1_SHIFT\fP)) & \fBENET_IAUR_IADDR1_MASK\fP)"

.SS "#define ENET_IAUR_IADDR1_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_IAUR_IADDR1_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_ALIGN_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_ALIGN_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_ALIGN_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_ALIGN_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_ALIGN_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_CRC_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_CRC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_CRC_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_CRC_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_CRC_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_DROP_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_DROP_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_DROP_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_DROP_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_DROP_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_FDXFC_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FDXFC_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_FDXFC_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_FDXFC_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_FRAME_OK_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FRAME_OK_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_FRAME_OK_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_FRAME_OK_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_MACERR_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_MACERR_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_MACERR_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_R_MACERR_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_R_OCTETS_OK_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_OCTETS_OK_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_R_OCTETS_OK_COUNT_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_1COL_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_1COL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_1COL_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_1COL_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_1COL_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_CSERR_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_CSERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_CSERR_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_CSERR_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_CSERR_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_DEF_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_DEF_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_DEF_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_DEF_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_DEF_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_EXCOL_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_EXCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_EXCOL_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_EXCOL_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_EXCOL_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_FDXFC_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FDXFC_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_FDXFC_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_FDXFC_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_FRAME_OK_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FRAME_OK_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_FRAME_OK_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_FRAME_OK_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_LCOL_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_LCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_LCOL_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_LCOL_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_LCOL_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_MACERR_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MACERR_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_MACERR_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_MACERR_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_MCOL_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MCOL_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_MCOL_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_IEEE_T_MCOL_COUNT_SHIFT   (0U)"

.SS "#define ENET_IEEE_T_OCTETS_OK_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_OCTETS_OK_COUNT_MASK\fP)"

.SS "#define ENET_IEEE_T_OCTETS_OK_COUNT_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT   (0U)"

.SS "#define ENET_MIBC_MIB_CLEAR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_CLEAR_SHIFT\fP)) & \fBENET_MIBC_MIB_CLEAR_MASK\fP)"

.SS "#define ENET_MIBC_MIB_CLEAR_MASK   (0x20000000U)"

.SS "#define ENET_MIBC_MIB_CLEAR_SHIFT   (29U)"

.SS "#define ENET_MIBC_MIB_DIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_DIS_SHIFT\fP)) & \fBENET_MIBC_MIB_DIS_MASK\fP)"

.SS "#define ENET_MIBC_MIB_DIS_MASK   (0x80000000U)"

.SS "#define ENET_MIBC_MIB_DIS_SHIFT   (31U)"

.SS "#define ENET_MIBC_MIB_IDLE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_IDLE_SHIFT\fP)) & \fBENET_MIBC_MIB_IDLE_MASK\fP)"

.SS "#define ENET_MIBC_MIB_IDLE_MASK   (0x40000000U)"

.SS "#define ENET_MIBC_MIB_IDLE_SHIFT   (30U)"

.SS "#define ENET_MMFR_DATA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_DATA_SHIFT\fP)) & \fBENET_MMFR_DATA_MASK\fP)"

.SS "#define ENET_MMFR_DATA_MASK   (0xFFFFU)"

.SS "#define ENET_MMFR_DATA_SHIFT   (0U)"

.SS "#define ENET_MMFR_OP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_OP_SHIFT\fP)) & \fBENET_MMFR_OP_MASK\fP)"

.SS "#define ENET_MMFR_OP_MASK   (0x30000000U)"

.SS "#define ENET_MMFR_OP_SHIFT   (28U)"

.SS "#define ENET_MMFR_PA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_PA_SHIFT\fP)) & \fBENET_MMFR_PA_MASK\fP)"

.SS "#define ENET_MMFR_PA_MASK   (0xF800000U)"

.SS "#define ENET_MMFR_PA_SHIFT   (23U)"

.SS "#define ENET_MMFR_RA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_RA_SHIFT\fP)) & \fBENET_MMFR_RA_MASK\fP)"

.SS "#define ENET_MMFR_RA_MASK   (0x7C0000U)"

.SS "#define ENET_MMFR_RA_SHIFT   (18U)"

.SS "#define ENET_MMFR_ST(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_ST_SHIFT\fP)) & \fBENET_MMFR_ST_MASK\fP)"

.SS "#define ENET_MMFR_ST_MASK   (0xC0000000U)"

.SS "#define ENET_MMFR_ST_SHIFT   (30U)"

.SS "#define ENET_MMFR_TA(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_TA_SHIFT\fP)) & \fBENET_MMFR_TA_MASK\fP)"

.SS "#define ENET_MMFR_TA_MASK   (0x30000U)"

.SS "#define ENET_MMFR_TA_SHIFT   (16U)"

.SS "#define ENET_MRBR_R_BUF_SIZE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MRBR_R_BUF_SIZE_SHIFT\fP)) & \fBENET_MRBR_R_BUF_SIZE_MASK\fP)"

.SS "#define ENET_MRBR_R_BUF_SIZE_MASK   (0x3FF0U)"

.SS "#define ENET_MRBR_R_BUF_SIZE_SHIFT   (4U)"

.SS "#define ENET_MSCR_DIS_PRE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_DIS_PRE_SHIFT\fP)) & \fBENET_MSCR_DIS_PRE_MASK\fP)"

.SS "#define ENET_MSCR_DIS_PRE_MASK   (0x80U)"

.SS "#define ENET_MSCR_DIS_PRE_SHIFT   (7U)"

.SS "#define ENET_MSCR_HOLDTIME(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_HOLDTIME_SHIFT\fP)) & \fBENET_MSCR_HOLDTIME_MASK\fP)"

.SS "#define ENET_MSCR_HOLDTIME_MASK   (0x700U)"

.SS "#define ENET_MSCR_HOLDTIME_SHIFT   (8U)"

.SS "#define ENET_MSCR_MII_SPEED(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_MII_SPEED_SHIFT\fP)) & \fBENET_MSCR_MII_SPEED_MASK\fP)"

.SS "#define ENET_MSCR_MII_SPEED_MASK   (0x7EU)"

.SS "#define ENET_MSCR_MII_SPEED_SHIFT   (1U)"

.SS "#define ENET_OPD_OPCODE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_OPCODE_SHIFT\fP)) & \fBENET_OPD_OPCODE_MASK\fP)"

.SS "#define ENET_OPD_OPCODE_MASK   (0xFFFF0000U)"

.SS "#define ENET_OPD_OPCODE_SHIFT   (16U)"

.SS "#define ENET_OPD_PAUSE_DUR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_PAUSE_DUR_SHIFT\fP)) & \fBENET_OPD_PAUSE_DUR_MASK\fP)"

.SS "#define ENET_OPD_PAUSE_DUR_MASK   (0xFFFFU)"

.SS "#define ENET_OPD_PAUSE_DUR_SHIFT   (0U)"

.SS "#define ENET_PALR_PADDR1(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PALR_PADDR1_SHIFT\fP)) & \fBENET_PALR_PADDR1_MASK\fP)"

.SS "#define ENET_PALR_PADDR1_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_PALR_PADDR1_SHIFT   (0U)"

.SS "#define ENET_PAUR_PADDR2(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_PADDR2_SHIFT\fP)) & \fBENET_PAUR_PADDR2_MASK\fP)"

.SS "#define ENET_PAUR_PADDR2_MASK   (0xFFFF0000U)"

.SS "#define ENET_PAUR_PADDR2_SHIFT   (16U)"

.SS "#define ENET_PAUR_TYPE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_TYPE_SHIFT\fP)) & \fBENET_PAUR_TYPE_MASK\fP)"

.SS "#define ENET_PAUR_TYPE_MASK   (0xFFFFU)"

.SS "#define ENET_PAUR_TYPE_SHIFT   (0U)"

.SS "#define ENET_RACC_IPDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_IPDIS_SHIFT\fP)) & \fBENET_RACC_IPDIS_MASK\fP)"

.SS "#define ENET_RACC_IPDIS_MASK   (0x2U)"

.SS "#define ENET_RACC_IPDIS_SHIFT   (1U)"

.SS "#define ENET_RACC_LINEDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_LINEDIS_SHIFT\fP)) & \fBENET_RACC_LINEDIS_MASK\fP)"

.SS "#define ENET_RACC_LINEDIS_MASK   (0x40U)"

.SS "#define ENET_RACC_LINEDIS_SHIFT   (6U)"

.SS "#define ENET_RACC_PADREM(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PADREM_SHIFT\fP)) & \fBENET_RACC_PADREM_MASK\fP)"

.SS "#define ENET_RACC_PADREM_MASK   (0x1U)"

.SS "#define ENET_RACC_PADREM_SHIFT   (0U)"

.SS "#define ENET_RACC_PRODIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PRODIS_SHIFT\fP)) & \fBENET_RACC_PRODIS_MASK\fP)"

.SS "#define ENET_RACC_PRODIS_MASK   (0x4U)"

.SS "#define ENET_RACC_PRODIS_SHIFT   (2U)"

.SS "#define ENET_RACC_SHIFT16(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_SHIFT16_SHIFT\fP)) & \fBENET_RACC_SHIFT16_MASK\fP)"

.SS "#define ENET_RACC_SHIFT16_MASK   (0x80U)"

.SS "#define ENET_RACC_SHIFT16_SHIFT   (7U)"

.SS "#define ENET_RAEM_RX_ALMOST_EMPTY(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAEM_RX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_RAEM_RX_ALMOST_EMPTY_MASK\fP)"

.SS "#define ENET_RAEM_RX_ALMOST_EMPTY_MASK   (0xFFU)"

.SS "#define ENET_RAEM_RX_ALMOST_EMPTY_SHIFT   (0U)"

.SS "#define ENET_RAFL_RX_ALMOST_FULL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAFL_RX_ALMOST_FULL_SHIFT\fP)) & \fBENET_RAFL_RX_ALMOST_FULL_MASK\fP)"

.SS "#define ENET_RAFL_RX_ALMOST_FULL_MASK   (0xFFU)"

.SS "#define ENET_RAFL_RX_ALMOST_FULL_SHIFT   (0U)"

.SS "#define ENET_RCR_BC_REJ(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_BC_REJ_SHIFT\fP)) & \fBENET_RCR_BC_REJ_MASK\fP)"

.SS "#define ENET_RCR_BC_REJ_MASK   (0x10U)"

.SS "#define ENET_RCR_BC_REJ_SHIFT   (4U)"

.SS "#define ENET_RCR_CFEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CFEN_SHIFT\fP)) & \fBENET_RCR_CFEN_MASK\fP)"

.SS "#define ENET_RCR_CFEN_MASK   (0x8000U)"

.SS "#define ENET_RCR_CFEN_SHIFT   (15U)"

.SS "#define ENET_RCR_CRCFWD(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CRCFWD_SHIFT\fP)) & \fBENET_RCR_CRCFWD_MASK\fP)"

.SS "#define ENET_RCR_CRCFWD_MASK   (0x4000U)"

.SS "#define ENET_RCR_CRCFWD_SHIFT   (14U)"

.SS "#define ENET_RCR_DRT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_DRT_SHIFT\fP)) & \fBENET_RCR_DRT_MASK\fP)"

.SS "#define ENET_RCR_DRT_MASK   (0x2U)"

.SS "#define ENET_RCR_DRT_SHIFT   (1U)"

.SS "#define ENET_RCR_FCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_FCE_SHIFT\fP)) & \fBENET_RCR_FCE_MASK\fP)"

.SS "#define ENET_RCR_FCE_MASK   (0x20U)"

.SS "#define ENET_RCR_FCE_SHIFT   (5U)"

.SS "#define ENET_RCR_GRS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_GRS_SHIFT\fP)) & \fBENET_RCR_GRS_MASK\fP)"

.SS "#define ENET_RCR_GRS_MASK   (0x80000000U)"

.SS "#define ENET_RCR_GRS_SHIFT   (31U)"

.SS "#define ENET_RCR_LOOP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_LOOP_SHIFT\fP)) & \fBENET_RCR_LOOP_MASK\fP)"

.SS "#define ENET_RCR_LOOP_MASK   (0x1U)"

.SS "#define ENET_RCR_LOOP_SHIFT   (0U)"

.SS "#define ENET_RCR_MAX_FL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MAX_FL_SHIFT\fP)) & \fBENET_RCR_MAX_FL_MASK\fP)"

.SS "#define ENET_RCR_MAX_FL_MASK   (0x3FFF0000U)"

.SS "#define ENET_RCR_MAX_FL_SHIFT   (16U)"

.SS "#define ENET_RCR_MII_MODE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MII_MODE_SHIFT\fP)) & \fBENET_RCR_MII_MODE_MASK\fP)"

.SS "#define ENET_RCR_MII_MODE_MASK   (0x4U)"

.SS "#define ENET_RCR_MII_MODE_SHIFT   (2U)"

.SS "#define ENET_RCR_NLC(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_NLC_SHIFT\fP)) & \fBENET_RCR_NLC_MASK\fP)"

.SS "#define ENET_RCR_NLC_MASK   (0x40000000U)"

.SS "#define ENET_RCR_NLC_SHIFT   (30U)"

.SS "#define ENET_RCR_PADEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PADEN_SHIFT\fP)) & \fBENET_RCR_PADEN_MASK\fP)"

.SS "#define ENET_RCR_PADEN_MASK   (0x1000U)"

.SS "#define ENET_RCR_PADEN_SHIFT   (12U)"

.SS "#define ENET_RCR_PAUFWD(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PAUFWD_SHIFT\fP)) & \fBENET_RCR_PAUFWD_MASK\fP)"

.SS "#define ENET_RCR_PAUFWD_MASK   (0x2000U)"

.SS "#define ENET_RCR_PAUFWD_SHIFT   (13U)"

.SS "#define ENET_RCR_PROM(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PROM_SHIFT\fP)) & \fBENET_RCR_PROM_MASK\fP)"

.SS "#define ENET_RCR_PROM_MASK   (0x8U)"

.SS "#define ENET_RCR_PROM_SHIFT   (3U)"

.SS "#define ENET_RCR_RMII_10T(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_10T_SHIFT\fP)) & \fBENET_RCR_RMII_10T_MASK\fP)"

.SS "#define ENET_RCR_RMII_10T_MASK   (0x200U)"

.SS "#define ENET_RCR_RMII_10T_SHIFT   (9U)"

.SS "#define ENET_RCR_RMII_MODE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_MODE_SHIFT\fP)) & \fBENET_RCR_RMII_MODE_MASK\fP)"

.SS "#define ENET_RCR_RMII_MODE_MASK   (0x100U)"

.SS "#define ENET_RCR_RMII_MODE_SHIFT   (8U)"

.SS "#define ENET_RDAR_RDAR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDAR_RDAR_SHIFT\fP)) & \fBENET_RDAR_RDAR_MASK\fP)"

.SS "#define ENET_RDAR_RDAR_MASK   (0x1000000U)"

.SS "#define ENET_RDAR_RDAR_SHIFT   (24U)"

.SS "#define ENET_RDSR_R_DES_START(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDSR_R_DES_START_SHIFT\fP)) & \fBENET_RDSR_R_DES_START_MASK\fP)"

.SS "#define ENET_RDSR_R_DES_START_MASK   (0xFFFFFFF8U)"

.SS "#define ENET_RDSR_R_DES_START_SHIFT   (3U)"

.SS "#define ENET_Receive_IRQS   { \fBENET_Receive_IRQn\fP }"

.SS "#define ENET_RMON_R_BC_PKT_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_BC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_BC_PKT_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_BC_PKT_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_BC_PKT_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_CRC_ALIGN_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_CRC_ALIGN_COUNT_SHIFT\fP)) & \fBENET_RMON_R_CRC_ALIGN_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_CRC_ALIGN_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_FRAG_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_FRAG_COUNT_SHIFT\fP)) & \fBENET_RMON_R_FRAG_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_FRAG_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_FRAG_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_JAB_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_JAB_COUNT_SHIFT\fP)) & \fBENET_RMON_R_JAB_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_JAB_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_JAB_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_MC_PKT_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_MC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_MC_PKT_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_MC_PKT_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_MC_PKT_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_OCTETS_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OCTETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OCTETS_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_OCTETS_COUNT_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_RMON_R_OCTETS_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_OVERSIZE_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OVERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OVERSIZE_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_OVERSIZE_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_OVERSIZE_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P1024TO2047_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P1024TO2047_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P1024TO2047_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P1024TO2047_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P1024TO2047_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P128TO255_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P128TO255_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P128TO255_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P128TO255_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P128TO255_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P256TO511_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P256TO511_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P256TO511_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P256TO511_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P256TO511_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P512TO1023_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P512TO1023_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P512TO1023_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P512TO1023_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P512TO1023_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P64_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P64_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P64_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P64_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P64_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P65TO127_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P65TO127_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P65TO127_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P65TO127_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P65TO127_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_P_GTE2048_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P_GTE2048_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P_GTE2048_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_P_GTE2048_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_P_GTE2048_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_PACKETS_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_PACKETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_PACKETS_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_PACKETS_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_PACKETS_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_R_UNDERSIZE_COUNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_UNDERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_UNDERSIZE_COUNT_MASK\fP)"

.SS "#define ENET_RMON_R_UNDERSIZE_COUNT_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_R_UNDERSIZE_COUNT_SHIFT   (0U)"

.SS "#define ENET_RMON_T_BC_PKT_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_BC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_BC_PKT_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_BC_PKT_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_BC_PKT_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_COL_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_COL_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_COL_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_COL_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_COL_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_CRC_ALIGN_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_CRC_ALIGN_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_FRAG_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_FRAG_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_FRAG_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_FRAG_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_FRAG_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_JAB_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_JAB_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_JAB_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_JAB_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_JAB_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_MC_PKT_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_MC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_MC_PKT_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_MC_PKT_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_MC_PKT_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_OCTETS_TXOCTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OCTETS_TXOCTS_SHIFT\fP)) & \fBENET_RMON_T_OCTETS_TXOCTS_MASK\fP)"

.SS "#define ENET_RMON_T_OCTETS_TXOCTS_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_RMON_T_OCTETS_TXOCTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_OVERSIZE_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OVERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_OVERSIZE_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_OVERSIZE_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P1024TO2047_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P1024TO2047_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P1024TO2047_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P1024TO2047_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P128TO255_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P128TO255_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P128TO255_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P128TO255_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P128TO255_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P256TO511_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P256TO511_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P256TO511_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P256TO511_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P256TO511_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P512TO1023_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P512TO1023_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P512TO1023_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P512TO1023_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P512TO1023_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P64_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P64_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P64_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P64_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P64_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P65TO127_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P65TO127_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P65TO127_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P65TO127_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P65TO127_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_P_GTE2048_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P_GTE2048_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P_GTE2048_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_P_GTE2048_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_PACKETS_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_PACKETS_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_PACKETS_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_PACKETS_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_PACKETS_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RMON_T_UNDERSIZE_TXPKTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_UNDERSIZE_TXPKTS_MASK\fP)"

.SS "#define ENET_RMON_T_UNDERSIZE_TXPKTS_MASK   (0xFFFFU)"

.SS "#define ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT   (0U)"

.SS "#define ENET_RSEM_RX_SECTION_EMPTY(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_RX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_RX_SECTION_EMPTY_MASK\fP)"

.SS "#define ENET_RSEM_RX_SECTION_EMPTY_MASK   (0xFFU)"

.SS "#define ENET_RSEM_RX_SECTION_EMPTY_SHIFT   (0U)"

.SS "#define ENET_RSEM_STAT_SECTION_EMPTY(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_STAT_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_STAT_SECTION_EMPTY_MASK\fP)"

.SS "#define ENET_RSEM_STAT_SECTION_EMPTY_MASK   (0x1F0000U)"

.SS "#define ENET_RSEM_STAT_SECTION_EMPTY_SHIFT   (16U)"

.SS "#define ENET_RSFL_RX_SECTION_FULL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSFL_RX_SECTION_FULL_SHIFT\fP)) & \fBENET_RSFL_RX_SECTION_FULL_MASK\fP)"

.SS "#define ENET_RSFL_RX_SECTION_FULL_MASK   (0xFFU)"

.SS "#define ENET_RSFL_RX_SECTION_FULL_SHIFT   (0U)"

.SS "#define ENET_TACC_IPCHK(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_IPCHK_SHIFT\fP)) & \fBENET_TACC_IPCHK_MASK\fP)"

.SS "#define ENET_TACC_IPCHK_MASK   (0x8U)"

.SS "#define ENET_TACC_IPCHK_SHIFT   (3U)"

.SS "#define ENET_TACC_PROCHK(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_PROCHK_SHIFT\fP)) & \fBENET_TACC_PROCHK_MASK\fP)"

.SS "#define ENET_TACC_PROCHK_MASK   (0x10U)"

.SS "#define ENET_TACC_PROCHK_SHIFT   (4U)"

.SS "#define ENET_TACC_SHIFT16(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_SHIFT16_SHIFT\fP)) & \fBENET_TACC_SHIFT16_MASK\fP)"

.SS "#define ENET_TACC_SHIFT16_MASK   (0x1U)"

.SS "#define ENET_TACC_SHIFT16_SHIFT   (0U)"

.SS "#define ENET_TAEM_TX_ALMOST_EMPTY(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAEM_TX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_TAEM_TX_ALMOST_EMPTY_MASK\fP)"

.SS "#define ENET_TAEM_TX_ALMOST_EMPTY_MASK   (0xFFU)"

.SS "#define ENET_TAEM_TX_ALMOST_EMPTY_SHIFT   (0U)"

.SS "#define ENET_TAFL_TX_ALMOST_FULL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAFL_TX_ALMOST_FULL_SHIFT\fP)) & \fBENET_TAFL_TX_ALMOST_FULL_MASK\fP)"

.SS "#define ENET_TAFL_TX_ALMOST_FULL_MASK   (0xFFU)"

.SS "#define ENET_TAFL_TX_ALMOST_FULL_SHIFT   (0U)"

.SS "#define ENET_TCCR_COUNT   (4U)"

.SS "#define ENET_TCCR_TCC(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCCR_TCC_SHIFT\fP)) & \fBENET_TCCR_TCC_MASK\fP)"

.SS "#define ENET_TCCR_TCC_MASK   (0xFFFFFFFFU)"

.SS "#define ENET_TCCR_TCC_SHIFT   (0U)"

.SS "#define ENET_TCR_ADDINS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDINS_SHIFT\fP)) & \fBENET_TCR_ADDINS_MASK\fP)"

.SS "#define ENET_TCR_ADDINS_MASK   (0x100U)"

.SS "#define ENET_TCR_ADDINS_SHIFT   (8U)"

.SS "#define ENET_TCR_ADDSEL(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDSEL_SHIFT\fP)) & \fBENET_TCR_ADDSEL_MASK\fP)"

.SS "#define ENET_TCR_ADDSEL_MASK   (0xE0U)"

.SS "#define ENET_TCR_ADDSEL_SHIFT   (5U)"

.SS "#define ENET_TCR_CRCFWD(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_CRCFWD_SHIFT\fP)) & \fBENET_TCR_CRCFWD_MASK\fP)"

.SS "#define ENET_TCR_CRCFWD_MASK   (0x200U)"

.SS "#define ENET_TCR_CRCFWD_SHIFT   (9U)"

.SS "#define ENET_TCR_FDEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_FDEN_SHIFT\fP)) & \fBENET_TCR_FDEN_MASK\fP)"

.SS "#define ENET_TCR_FDEN_MASK   (0x4U)"

.SS "#define ENET_TCR_FDEN_SHIFT   (2U)"

.SS "#define ENET_TCR_GTS(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_GTS_SHIFT\fP)) & \fBENET_TCR_GTS_MASK\fP)"

.SS "#define ENET_TCR_GTS_MASK   (0x1U)"

.SS "#define ENET_TCR_GTS_SHIFT   (0U)"

.SS "#define ENET_TCR_RFC_PAUSE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_RFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_RFC_PAUSE_MASK\fP)"

.SS "#define ENET_TCR_RFC_PAUSE_MASK   (0x10U)"

.SS "#define ENET_TCR_RFC_PAUSE_SHIFT   (4U)"

.SS "#define ENET_TCR_TFC_PAUSE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_TFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_TFC_PAUSE_MASK\fP)"

.SS "#define ENET_TCR_TFC_PAUSE_MASK   (0x8U)"

.SS "#define ENET_TCR_TFC_PAUSE_SHIFT   (3U)"

.SS "#define ENET_TCSR_COUNT   (4U)"

.SS "#define ENET_TCSR_TDRE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TDRE_SHIFT\fP)) & \fBENET_TCSR_TDRE_MASK\fP)"

.SS "#define ENET_TCSR_TDRE_MASK   (0x1U)"

.SS "#define ENET_TCSR_TDRE_SHIFT   (0U)"

.SS "#define ENET_TCSR_TF(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TF_SHIFT\fP)) & \fBENET_TCSR_TF_MASK\fP)"

.SS "#define ENET_TCSR_TF_MASK   (0x80U)"

.SS "#define ENET_TCSR_TF_SHIFT   (7U)"

.SS "#define ENET_TCSR_TIE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TIE_SHIFT\fP)) & \fBENET_TCSR_TIE_MASK\fP)"

.SS "#define ENET_TCSR_TIE_MASK   (0x40U)"

.SS "#define ENET_TCSR_TIE_SHIFT   (6U)"

.SS "#define ENET_TCSR_TMODE(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TMODE_SHIFT\fP)) & \fBENET_TCSR_TMODE_MASK\fP)"

.SS "#define ENET_TCSR_TMODE_MASK   (0x3CU)"

.SS "#define ENET_TCSR_TMODE_SHIFT   (2U)"

.SS "#define ENET_TDAR_TDAR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDAR_TDAR_SHIFT\fP)) & \fBENET_TDAR_TDAR_MASK\fP)"

.SS "#define ENET_TDAR_TDAR_MASK   (0x1000000U)"

.SS "#define ENET_TDAR_TDAR_SHIFT   (24U)"

.SS "#define ENET_TDSR_X_DES_START(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDSR_X_DES_START_SHIFT\fP)) & \fBENET_TDSR_X_DES_START_MASK\fP)"

.SS "#define ENET_TDSR_X_DES_START_MASK   (0xFFFFFFF8U)"

.SS "#define ENET_TDSR_X_DES_START_SHIFT   (3U)"

.SS "#define ENET_TFWR_STRFWD(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_STRFWD_SHIFT\fP)) & \fBENET_TFWR_STRFWD_MASK\fP)"

.SS "#define ENET_TFWR_STRFWD_MASK   (0x100U)"

.SS "#define ENET_TFWR_STRFWD_SHIFT   (8U)"

.SS "#define ENET_TFWR_TFWR(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_TFWR_SHIFT\fP)) & \fBENET_TFWR_TFWR_MASK\fP)"

.SS "#define ENET_TFWR_TFWR_MASK   (0x3FU)"

.SS "#define ENET_TFWR_TFWR_SHIFT   (0U)"

.SS "#define ENET_TGSR_TF0(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF0_SHIFT\fP)) & \fBENET_TGSR_TF0_MASK\fP)"

.SS "#define ENET_TGSR_TF0_MASK   (0x1U)"

.SS "#define ENET_TGSR_TF0_SHIFT   (0U)"

.SS "#define ENET_TGSR_TF1(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF1_SHIFT\fP)) & \fBENET_TGSR_TF1_MASK\fP)"

.SS "#define ENET_TGSR_TF1_MASK   (0x2U)"

.SS "#define ENET_TGSR_TF1_SHIFT   (1U)"

.SS "#define ENET_TGSR_TF2(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF2_SHIFT\fP)) & \fBENET_TGSR_TF2_MASK\fP)"

.SS "#define ENET_TGSR_TF2_MASK   (0x4U)"

.SS "#define ENET_TGSR_TF2_SHIFT   (2U)"

.SS "#define ENET_TGSR_TF3(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF3_SHIFT\fP)) & \fBENET_TGSR_TF3_MASK\fP)"

.SS "#define ENET_TGSR_TF3_MASK   (0x8U)"

.SS "#define ENET_TGSR_TF3_SHIFT   (3U)"

.SS "#define ENET_TIPG_IPG(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TIPG_IPG_SHIFT\fP)) & \fBENET_TIPG_IPG_MASK\fP)"

.SS "#define ENET_TIPG_IPG_MASK   (0x1FU)"

.SS "#define ENET_TIPG_IPG_SHIFT   (0U)"

.SS "#define ENET_Transmit_IRQS   { \fBENET_Transmit_IRQn\fP }"
Interrupt vectors for the ENET peripheral type 
.SS "#define ENET_TSEM_TX_SECTION_EMPTY(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TSEM_TX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_TSEM_TX_SECTION_EMPTY_MASK\fP)"

.SS "#define ENET_TSEM_TX_SECTION_EMPTY_MASK   (0xFFU)"

.SS "#define ENET_TSEM_TX_SECTION_EMPTY_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
