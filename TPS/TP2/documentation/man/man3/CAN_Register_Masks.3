.TH "CAN_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CAN_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCAN0_BASE\fP   (0x40024000u)"
.br
.ti -1c
.RI "#define \fBCAN0\fP   ((\fBCAN_Type\fP *)\fBCAN0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCAN_BASE_ADDRS\fP   { \fBCAN0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCAN_BASE_PTRS\fP   { \fBCAN0\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Rx_Warning_IRQS\fP   { \fBCAN0_Rx_Warning_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Tx_Warning_IRQS\fP   { \fBCAN0_Tx_Warning_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Wake_Up_IRQS\fP   { \fBCAN0_Wake_Up_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Error_IRQS\fP   { \fBCAN0_Error_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Bus_Off_IRQS\fP   { \fBCAN0_Bus_Off_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_ORed_Message_buffer_IRQS\fP   { \fBCAN0_ORed_Message_buffer_IRQn\fP }"
.br
.in -1c
.SS "MCR - Module Configuration Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MAXMB_SHIFT\fP)) & \fBCAN_MCR_MAXMB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IDAM_SHIFT\fP)) & \fBCAN_MCR_IDAM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_AEN_SHIFT\fP)) & \fBCAN_MCR_AEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPRIOEN_SHIFT\fP)) & \fBCAN_MCR_LPRIOEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IRMQ_SHIFT\fP)) & \fBCAN_MCR_IRMQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SRXDIS_SHIFT\fP)) & \fBCAN_MCR_SRXDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKSRC_SHIFT\fP)) & \fBCAN_MCR_WAKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPMACK_SHIFT\fP)) & \fBCAN_MCR_LPMACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WRNEN_SHIFT\fP)) & \fBCAN_MCR_WRNEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SLFWAK_SHIFT\fP)) & \fBCAN_MCR_SLFWAK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SUPV_SHIFT\fP)) & \fBCAN_MCR_SUPV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZACK_SHIFT\fP)) & \fBCAN_MCR_FRZACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SOFTRST_SHIFT\fP)) & \fBCAN_MCR_SOFTRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKMSK_SHIFT\fP)) & \fBCAN_MCR_WAKMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_NOTRDY_SHIFT\fP)) & \fBCAN_MCR_NOTRDY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_HALT_SHIFT\fP)) & \fBCAN_MCR_HALT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_RFEN_SHIFT\fP)) & \fBCAN_MCR_RFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZ_SHIFT\fP)) & \fBCAN_MCR_FRZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MDIS_SHIFT\fP)) & \fBCAN_MCR_MDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_HALT_SHIFT\fP)) & \fBSPI_MCR_HALT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_SMPL_PT_SHIFT\fP)) & \fBSPI_MCR_SMPL_PT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_RXF_SHIFT\fP)) & \fBSPI_MCR_CLR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_TXF_SHIFT\fP)) & \fBSPI_MCR_CLR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_RXF_SHIFT\fP)) & \fBSPI_MCR_DIS_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_TXF_SHIFT\fP)) & \fBSPI_MCR_DIS_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MDIS_SHIFT\fP)) & \fBSPI_MCR_MDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DOZE_SHIFT\fP)) & \fBSPI_MCR_DOZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS_MASK\fP   (0x3F0000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSIS_SHIFT\fP)) & \fBSPI_MCR_PCSIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_ROOE_SHIFT\fP)) & \fBSPI_MCR_ROOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSSE_SHIFT\fP)) & \fBSPI_MCR_PCSSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MTFE_SHIFT\fP)) & \fBSPI_MCR_MTFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_FRZ_SHIFT\fP)) & \fBSPI_MCR_FRZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DCONF_SHIFT\fP)) & \fBSPI_MCR_DCONF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CONT_SCKE_SHIFT\fP)) & \fBSPI_MCR_CONT_SCKE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MSTR_SHIFT\fP)) & \fBSPI_MCR_MSTR_MASK\fP)"
.br
.in -1c
.SS "CTRL1 - Control 1 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PROPSEG_SHIFT\fP)) & \fBCAN_CTRL1_PROPSEG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LOM_SHIFT\fP)) & \fBCAN_CTRL1_LOM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LBUF_SHIFT\fP)) & \fBCAN_CTRL1_LBUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TSYN_SHIFT\fP)) & \fBCAN_CTRL1_TSYN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFREC_SHIFT\fP)) & \fBCAN_CTRL1_BOFFREC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_SMP_SHIFT\fP)) & \fBCAN_CTRL1_SMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_RWRNMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_TWRNMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LPB_SHIFT\fP)) & \fBCAN_CTRL1_LPB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_CLKSRC_SHIFT\fP)) & \fBCAN_CTRL1_CLKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_ERRMSK_SHIFT\fP)) & \fBCAN_CTRL1_ERRMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFMSK_SHIFT\fP)) & \fBCAN_CTRL1_BOFFMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2_MASK\fP   (0x70000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG2_SHIFT\fP)) & \fBCAN_CTRL1_PSEG2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1_MASK\fP   (0x380000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG1_SHIFT\fP)) & \fBCAN_CTRL1_PSEG1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW_MASK\fP   (0xC00000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RJW_SHIFT\fP)) & \fBCAN_CTRL1_RJW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PRESDIV_SHIFT\fP)) & \fBCAN_CTRL1_PRESDIV_MASK\fP)"
.br
.in -1c
.SS "TIMER - Free Running Timer"

.in +1c
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_TIMER_TIMER_SHIFT\fP)) & \fBCAN_TIMER_TIMER_MASK\fP)"
.br
.in -1c
.SS "RXMGMASK - Rx Mailboxes Global Mask Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXMGMASK_MG_SHIFT\fP)) & \fBCAN_RXMGMASK_MG_MASK\fP)"
.br
.in -1c
.SS "RX14MASK - Rx 14 Mask register"

.in +1c
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX14MASK_RX14M_SHIFT\fP)) & \fBCAN_RX14MASK_RX14M_MASK\fP)"
.br
.in -1c
.SS "RX15MASK - Rx 15 Mask register"

.in +1c
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX15MASK_RX15M_SHIFT\fP)) & \fBCAN_RX15MASK_RX15M_MASK\fP)"
.br
.in -1c
.SS "ECR - Error Counter"

.in +1c
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_TXERRCNT_SHIFT\fP)) & \fBCAN_ECR_TXERRCNT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_RXERRCNT_SHIFT\fP)) & \fBCAN_ECR_RXERRCNT_MASK\fP)"
.br
.in -1c
.SS "ESR1 - Error and Status 1 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_WAKINT_SHIFT\fP)) & \fBCAN_ESR1_WAKINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ERRINT_SHIFT\fP)) & \fBCAN_ESR1_ERRINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BOFFINT_SHIFT\fP)) & \fBCAN_ESR1_BOFFINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RX_SHIFT\fP)) & \fBCAN_ESR1_RX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FLTCONF_SHIFT\fP)) & \fBCAN_ESR1_FLTCONF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TX_SHIFT\fP)) & \fBCAN_ESR1_TX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_IDLE_SHIFT\fP)) & \fBCAN_ESR1_IDLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RXWRN_SHIFT\fP)) & \fBCAN_ESR1_RXWRN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TXWRN_SHIFT\fP)) & \fBCAN_ESR1_TXWRN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_STFERR_SHIFT\fP)) & \fBCAN_ESR1_STFERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FRMERR_SHIFT\fP)) & \fBCAN_ESR1_FRMERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_CRCERR_SHIFT\fP)) & \fBCAN_ESR1_CRCERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ACKERR_SHIFT\fP)) & \fBCAN_ESR1_ACKERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT0ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT0ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT1ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT1ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RWRNINT_SHIFT\fP)) & \fBCAN_ESR1_RWRNINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TWRNINT_SHIFT\fP)) & \fBCAN_ESR1_TWRNINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_SYNCH_SHIFT\fP)) & \fBCAN_ESR1_SYNCH_MASK\fP)"
.br
.in -1c
.SS "IMASK1 - Interrupt Masks 1 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IMASK1_BUFLM_SHIFT\fP)) & \fBCAN_IMASK1_BUFLM_MASK\fP)"
.br
.in -1c
.SS "IFLAG1 - Interrupt Flags 1 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF0I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF0I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I_MASK\fP   (0x1EU)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF4TO1I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF4TO1I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF5I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF5I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF6I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF6I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF7I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF7I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I_MASK\fP   (0xFFFFFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF31TO8I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF31TO8I_MASK\fP)"
.br
.in -1c
.SS "CTRL2 - Control 2 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_EACEN_SHIFT\fP)) & \fBCAN_CTRL2_EACEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RRS_SHIFT\fP)) & \fBCAN_CTRL2_RRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_MRP_SHIFT\fP)) & \fBCAN_CTRL2_MRP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD_MASK\fP   (0xF80000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_TASD_SHIFT\fP)) & \fBCAN_CTRL2_TASD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RFFN_SHIFT\fP)) & \fBCAN_CTRL2_RFFN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_WRMFRZ_SHIFT\fP)) & \fBCAN_CTRL2_WRMFRZ_MASK\fP)"
.br
.in -1c
.SS "ESR2 - Error and Status 2 register"

.in +1c
.ti -1c
.RI "#define \fBCAN_ESR2_IMB_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_IMB_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_IMB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_IMB_SHIFT\fP)) & \fBCAN_ESR2_IMB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_VPS_SHIFT\fP)) & \fBCAN_ESR2_VPS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM_MASK\fP   (0x7F0000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_LPTM_SHIFT\fP)) & \fBCAN_ESR2_LPTM_MASK\fP)"
.br
.in -1c
.SS "CRCR - CRC Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC_MASK\fP   (0x7FFFU)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_TXCRC_SHIFT\fP)) & \fBCAN_CRCR_TXCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC_MASK\fP   (0x7F0000U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_MBCRC_SHIFT\fP)) & \fBCAN_CRCR_MBCRC_MASK\fP)"
.br
.in -1c
.SS "RXFGMASK - Rx FIFO Global Mask register"

.in +1c
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFGMASK_FGM_SHIFT\fP)) & \fBCAN_RXFGMASK_FGM_MASK\fP)"
.br
.in -1c
.SS "RXFIR - Rx FIFO Information Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFIR_IDHIT_SHIFT\fP)) & \fBCAN_RXFIR_IDHIT_MASK\fP)"
.br
.in -1c
.SS "CS - Message Buffer 0 CS Register\&.\&.Message Buffer 15 CS Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_TIME_STAMP_SHIFT\fP)) & \fBCAN_CS_TIME_STAMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_DLC_SHIFT\fP)) & \fBCAN_CS_DLC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_RTR_SHIFT\fP)) & \fBCAN_CS_RTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_IDE_SHIFT\fP)) & \fBCAN_CS_IDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_SRR_SHIFT\fP)) & \fBCAN_CS_SRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_CODE_SHIFT\fP)) & \fBCAN_CS_CODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_COUNT\fP   (16U)"
.br
.in -1c
.SS "ID - Message Buffer 0 ID Register\&.\&.Message Buffer 15 ID Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_ID_EXT_MASK\fP   (0x3FFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_ID_EXT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_EXT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_EXT_SHIFT\fP)) & \fBCAN_ID_EXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD_MASK\fP   (0x1FFC0000U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_STD_SHIFT\fP)) & \fBCAN_ID_STD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO_MASK\fP   (0xE0000000U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_PRIO_SHIFT\fP)) & \fBCAN_ID_PRIO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_COUNT\fP   (16U)"
.br
.in -1c
.SS "WORD0 - Message Buffer 0 WORD0 Register\&.\&.Message Buffer 15 WORD0 Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_3_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_2_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_1_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_0_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_COUNT\fP   (16U)"
.br
.in -1c
.SS "WORD1 - Message Buffer 0 WORD1 Register\&.\&.Message Buffer 15 WORD1 Register"

.in +1c
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_7_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_6_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_5_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_4_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_COUNT\fP   (16U)"
.br
.in -1c
.SS "RXIMR - Rx Individual Mask Registers"

.in +1c
.ti -1c
.RI "#define \fBCAN_RXIMR_MI_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_MI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_MI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXIMR_MI_SHIFT\fP)) & \fBCAN_RXIMR_MI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_COUNT\fP   (16U)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define CAN0   ((\fBCAN_Type\fP *)\fBCAN0_BASE\fP)"
Peripheral CAN0 base pointer 
.SS "#define CAN0_BASE   (0x40024000u)"
Peripheral CAN0 base address 
.SS "#define CAN_BASE_ADDRS   { \fBCAN0_BASE\fP }"
Array initializer of CAN peripheral base addresses 
.SS "#define CAN_BASE_PTRS   { \fBCAN0\fP }"
Array initializer of CAN peripheral base pointers 
.SS "#define CAN_Bus_Off_IRQS   { \fBCAN0_Bus_Off_IRQn\fP }"

.SS "#define CAN_CRCR_MBCRC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_MBCRC_SHIFT\fP)) & \fBCAN_CRCR_MBCRC_MASK\fP)"

.SS "#define CAN_CRCR_MBCRC_MASK   (0x7F0000U)"

.SS "#define CAN_CRCR_MBCRC_SHIFT   (16U)"

.SS "#define CAN_CRCR_TXCRC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_TXCRC_SHIFT\fP)) & \fBCAN_CRCR_TXCRC_MASK\fP)"

.SS "#define CAN_CRCR_TXCRC_MASK   (0x7FFFU)"

.SS "#define CAN_CRCR_TXCRC_SHIFT   (0U)"

.SS "#define CAN_CS_CODE(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_CODE_SHIFT\fP)) & \fBCAN_CS_CODE_MASK\fP)"

.SS "#define CAN_CS_CODE_MASK   (0xF000000U)"

.SS "#define CAN_CS_CODE_SHIFT   (24U)"

.SS "#define CAN_CS_COUNT   (16U)"

.SS "#define CAN_CS_DLC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_DLC_SHIFT\fP)) & \fBCAN_CS_DLC_MASK\fP)"

.SS "#define CAN_CS_DLC_MASK   (0xF0000U)"

.SS "#define CAN_CS_DLC_SHIFT   (16U)"

.SS "#define CAN_CS_IDE(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_IDE_SHIFT\fP)) & \fBCAN_CS_IDE_MASK\fP)"

.SS "#define CAN_CS_IDE_MASK   (0x200000U)"

.SS "#define CAN_CS_IDE_SHIFT   (21U)"

.SS "#define CAN_CS_RTR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_RTR_SHIFT\fP)) & \fBCAN_CS_RTR_MASK\fP)"

.SS "#define CAN_CS_RTR_MASK   (0x100000U)"

.SS "#define CAN_CS_RTR_SHIFT   (20U)"

.SS "#define CAN_CS_SRR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_SRR_SHIFT\fP)) & \fBCAN_CS_SRR_MASK\fP)"

.SS "#define CAN_CS_SRR_MASK   (0x400000U)"

.SS "#define CAN_CS_SRR_SHIFT   (22U)"

.SS "#define CAN_CS_TIME_STAMP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_TIME_STAMP_SHIFT\fP)) & \fBCAN_CS_TIME_STAMP_MASK\fP)"

.SS "#define CAN_CS_TIME_STAMP_MASK   (0xFFFFU)"

.SS "#define CAN_CS_TIME_STAMP_SHIFT   (0U)"

.SS "#define CAN_CTRL1_BOFFMSK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFMSK_SHIFT\fP)) & \fBCAN_CTRL1_BOFFMSK_MASK\fP)"

.SS "#define CAN_CTRL1_BOFFMSK_MASK   (0x8000U)"

.SS "#define CAN_CTRL1_BOFFMSK_SHIFT   (15U)"

.SS "#define CAN_CTRL1_BOFFREC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFREC_SHIFT\fP)) & \fBCAN_CTRL1_BOFFREC_MASK\fP)"

.SS "#define CAN_CTRL1_BOFFREC_MASK   (0x40U)"

.SS "#define CAN_CTRL1_BOFFREC_SHIFT   (6U)"

.SS "#define CAN_CTRL1_CLKSRC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_CLKSRC_SHIFT\fP)) & \fBCAN_CTRL1_CLKSRC_MASK\fP)"

.SS "#define CAN_CTRL1_CLKSRC_MASK   (0x2000U)"

.SS "#define CAN_CTRL1_CLKSRC_SHIFT   (13U)"

.SS "#define CAN_CTRL1_ERRMSK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_ERRMSK_SHIFT\fP)) & \fBCAN_CTRL1_ERRMSK_MASK\fP)"

.SS "#define CAN_CTRL1_ERRMSK_MASK   (0x4000U)"

.SS "#define CAN_CTRL1_ERRMSK_SHIFT   (14U)"

.SS "#define CAN_CTRL1_LBUF(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LBUF_SHIFT\fP)) & \fBCAN_CTRL1_LBUF_MASK\fP)"

.SS "#define CAN_CTRL1_LBUF_MASK   (0x10U)"

.SS "#define CAN_CTRL1_LBUF_SHIFT   (4U)"

.SS "#define CAN_CTRL1_LOM(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LOM_SHIFT\fP)) & \fBCAN_CTRL1_LOM_MASK\fP)"

.SS "#define CAN_CTRL1_LOM_MASK   (0x8U)"

.SS "#define CAN_CTRL1_LOM_SHIFT   (3U)"

.SS "#define CAN_CTRL1_LPB(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LPB_SHIFT\fP)) & \fBCAN_CTRL1_LPB_MASK\fP)"

.SS "#define CAN_CTRL1_LPB_MASK   (0x1000U)"

.SS "#define CAN_CTRL1_LPB_SHIFT   (12U)"

.SS "#define CAN_CTRL1_PRESDIV(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PRESDIV_SHIFT\fP)) & \fBCAN_CTRL1_PRESDIV_MASK\fP)"

.SS "#define CAN_CTRL1_PRESDIV_MASK   (0xFF000000U)"

.SS "#define CAN_CTRL1_PRESDIV_SHIFT   (24U)"

.SS "#define CAN_CTRL1_PROPSEG(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PROPSEG_SHIFT\fP)) & \fBCAN_CTRL1_PROPSEG_MASK\fP)"

.SS "#define CAN_CTRL1_PROPSEG_MASK   (0x7U)"

.SS "#define CAN_CTRL1_PROPSEG_SHIFT   (0U)"

.SS "#define CAN_CTRL1_PSEG1(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG1_SHIFT\fP)) & \fBCAN_CTRL1_PSEG1_MASK\fP)"

.SS "#define CAN_CTRL1_PSEG1_MASK   (0x380000U)"

.SS "#define CAN_CTRL1_PSEG1_SHIFT   (19U)"

.SS "#define CAN_CTRL1_PSEG2(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG2_SHIFT\fP)) & \fBCAN_CTRL1_PSEG2_MASK\fP)"

.SS "#define CAN_CTRL1_PSEG2_MASK   (0x70000U)"

.SS "#define CAN_CTRL1_PSEG2_SHIFT   (16U)"

.SS "#define CAN_CTRL1_RJW(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RJW_SHIFT\fP)) & \fBCAN_CTRL1_RJW_MASK\fP)"

.SS "#define CAN_CTRL1_RJW_MASK   (0xC00000U)"

.SS "#define CAN_CTRL1_RJW_SHIFT   (22U)"

.SS "#define CAN_CTRL1_RWRNMSK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_RWRNMSK_MASK\fP)"

.SS "#define CAN_CTRL1_RWRNMSK_MASK   (0x400U)"

.SS "#define CAN_CTRL1_RWRNMSK_SHIFT   (10U)"

.SS "#define CAN_CTRL1_SMP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_SMP_SHIFT\fP)) & \fBCAN_CTRL1_SMP_MASK\fP)"

.SS "#define CAN_CTRL1_SMP_MASK   (0x80U)"

.SS "#define CAN_CTRL1_SMP_SHIFT   (7U)"

.SS "#define CAN_CTRL1_TSYN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TSYN_SHIFT\fP)) & \fBCAN_CTRL1_TSYN_MASK\fP)"

.SS "#define CAN_CTRL1_TSYN_MASK   (0x20U)"

.SS "#define CAN_CTRL1_TSYN_SHIFT   (5U)"

.SS "#define CAN_CTRL1_TWRNMSK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_TWRNMSK_MASK\fP)"

.SS "#define CAN_CTRL1_TWRNMSK_MASK   (0x800U)"

.SS "#define CAN_CTRL1_TWRNMSK_SHIFT   (11U)"

.SS "#define CAN_CTRL2_EACEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_EACEN_SHIFT\fP)) & \fBCAN_CTRL2_EACEN_MASK\fP)"

.SS "#define CAN_CTRL2_EACEN_MASK   (0x10000U)"

.SS "#define CAN_CTRL2_EACEN_SHIFT   (16U)"

.SS "#define CAN_CTRL2_MRP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_MRP_SHIFT\fP)) & \fBCAN_CTRL2_MRP_MASK\fP)"

.SS "#define CAN_CTRL2_MRP_MASK   (0x40000U)"

.SS "#define CAN_CTRL2_MRP_SHIFT   (18U)"

.SS "#define CAN_CTRL2_RFFN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RFFN_SHIFT\fP)) & \fBCAN_CTRL2_RFFN_MASK\fP)"

.SS "#define CAN_CTRL2_RFFN_MASK   (0xF000000U)"

.SS "#define CAN_CTRL2_RFFN_SHIFT   (24U)"

.SS "#define CAN_CTRL2_RRS(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RRS_SHIFT\fP)) & \fBCAN_CTRL2_RRS_MASK\fP)"

.SS "#define CAN_CTRL2_RRS_MASK   (0x20000U)"

.SS "#define CAN_CTRL2_RRS_SHIFT   (17U)"

.SS "#define CAN_CTRL2_TASD(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_TASD_SHIFT\fP)) & \fBCAN_CTRL2_TASD_MASK\fP)"

.SS "#define CAN_CTRL2_TASD_MASK   (0xF80000U)"

.SS "#define CAN_CTRL2_TASD_SHIFT   (19U)"

.SS "#define CAN_CTRL2_WRMFRZ(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_WRMFRZ_SHIFT\fP)) & \fBCAN_CTRL2_WRMFRZ_MASK\fP)"

.SS "#define CAN_CTRL2_WRMFRZ_MASK   (0x10000000U)"

.SS "#define CAN_CTRL2_WRMFRZ_SHIFT   (28U)"

.SS "#define CAN_ECR_RXERRCNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_RXERRCNT_SHIFT\fP)) & \fBCAN_ECR_RXERRCNT_MASK\fP)"

.SS "#define CAN_ECR_RXERRCNT_MASK   (0xFF00U)"

.SS "#define CAN_ECR_RXERRCNT_SHIFT   (8U)"

.SS "#define CAN_ECR_TXERRCNT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_TXERRCNT_SHIFT\fP)) & \fBCAN_ECR_TXERRCNT_MASK\fP)"

.SS "#define CAN_ECR_TXERRCNT_MASK   (0xFFU)"

.SS "#define CAN_ECR_TXERRCNT_SHIFT   (0U)"

.SS "#define CAN_Error_IRQS   { \fBCAN0_Error_IRQn\fP }"

.SS "#define CAN_ESR1_ACKERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ACKERR_SHIFT\fP)) & \fBCAN_ESR1_ACKERR_MASK\fP)"

.SS "#define CAN_ESR1_ACKERR_MASK   (0x2000U)"

.SS "#define CAN_ESR1_ACKERR_SHIFT   (13U)"

.SS "#define CAN_ESR1_BIT0ERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT0ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT0ERR_MASK\fP)"

.SS "#define CAN_ESR1_BIT0ERR_MASK   (0x4000U)"

.SS "#define CAN_ESR1_BIT0ERR_SHIFT   (14U)"

.SS "#define CAN_ESR1_BIT1ERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT1ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT1ERR_MASK\fP)"

.SS "#define CAN_ESR1_BIT1ERR_MASK   (0x8000U)"

.SS "#define CAN_ESR1_BIT1ERR_SHIFT   (15U)"

.SS "#define CAN_ESR1_BOFFINT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BOFFINT_SHIFT\fP)) & \fBCAN_ESR1_BOFFINT_MASK\fP)"

.SS "#define CAN_ESR1_BOFFINT_MASK   (0x4U)"

.SS "#define CAN_ESR1_BOFFINT_SHIFT   (2U)"

.SS "#define CAN_ESR1_CRCERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_CRCERR_SHIFT\fP)) & \fBCAN_ESR1_CRCERR_MASK\fP)"

.SS "#define CAN_ESR1_CRCERR_MASK   (0x1000U)"

.SS "#define CAN_ESR1_CRCERR_SHIFT   (12U)"

.SS "#define CAN_ESR1_ERRINT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ERRINT_SHIFT\fP)) & \fBCAN_ESR1_ERRINT_MASK\fP)"

.SS "#define CAN_ESR1_ERRINT_MASK   (0x2U)"

.SS "#define CAN_ESR1_ERRINT_SHIFT   (1U)"

.SS "#define CAN_ESR1_FLTCONF(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FLTCONF_SHIFT\fP)) & \fBCAN_ESR1_FLTCONF_MASK\fP)"

.SS "#define CAN_ESR1_FLTCONF_MASK   (0x30U)"

.SS "#define CAN_ESR1_FLTCONF_SHIFT   (4U)"

.SS "#define CAN_ESR1_FRMERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FRMERR_SHIFT\fP)) & \fBCAN_ESR1_FRMERR_MASK\fP)"

.SS "#define CAN_ESR1_FRMERR_MASK   (0x800U)"

.SS "#define CAN_ESR1_FRMERR_SHIFT   (11U)"

.SS "#define CAN_ESR1_IDLE(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_IDLE_SHIFT\fP)) & \fBCAN_ESR1_IDLE_MASK\fP)"

.SS "#define CAN_ESR1_IDLE_MASK   (0x80U)"

.SS "#define CAN_ESR1_IDLE_SHIFT   (7U)"

.SS "#define CAN_ESR1_RWRNINT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RWRNINT_SHIFT\fP)) & \fBCAN_ESR1_RWRNINT_MASK\fP)"

.SS "#define CAN_ESR1_RWRNINT_MASK   (0x10000U)"

.SS "#define CAN_ESR1_RWRNINT_SHIFT   (16U)"

.SS "#define CAN_ESR1_RX(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RX_SHIFT\fP)) & \fBCAN_ESR1_RX_MASK\fP)"

.SS "#define CAN_ESR1_RX_MASK   (0x8U)"

.SS "#define CAN_ESR1_RX_SHIFT   (3U)"

.SS "#define CAN_ESR1_RXWRN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RXWRN_SHIFT\fP)) & \fBCAN_ESR1_RXWRN_MASK\fP)"

.SS "#define CAN_ESR1_RXWRN_MASK   (0x100U)"

.SS "#define CAN_ESR1_RXWRN_SHIFT   (8U)"

.SS "#define CAN_ESR1_STFERR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_STFERR_SHIFT\fP)) & \fBCAN_ESR1_STFERR_MASK\fP)"

.SS "#define CAN_ESR1_STFERR_MASK   (0x400U)"

.SS "#define CAN_ESR1_STFERR_SHIFT   (10U)"

.SS "#define CAN_ESR1_SYNCH(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_SYNCH_SHIFT\fP)) & \fBCAN_ESR1_SYNCH_MASK\fP)"

.SS "#define CAN_ESR1_SYNCH_MASK   (0x40000U)"

.SS "#define CAN_ESR1_SYNCH_SHIFT   (18U)"

.SS "#define CAN_ESR1_TWRNINT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TWRNINT_SHIFT\fP)) & \fBCAN_ESR1_TWRNINT_MASK\fP)"

.SS "#define CAN_ESR1_TWRNINT_MASK   (0x20000U)"

.SS "#define CAN_ESR1_TWRNINT_SHIFT   (17U)"

.SS "#define CAN_ESR1_TX(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TX_SHIFT\fP)) & \fBCAN_ESR1_TX_MASK\fP)"

.SS "#define CAN_ESR1_TX_MASK   (0x40U)"

.SS "#define CAN_ESR1_TX_SHIFT   (6U)"

.SS "#define CAN_ESR1_TXWRN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TXWRN_SHIFT\fP)) & \fBCAN_ESR1_TXWRN_MASK\fP)"

.SS "#define CAN_ESR1_TXWRN_MASK   (0x200U)"

.SS "#define CAN_ESR1_TXWRN_SHIFT   (9U)"

.SS "#define CAN_ESR1_WAKINT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_WAKINT_SHIFT\fP)) & \fBCAN_ESR1_WAKINT_MASK\fP)"

.SS "#define CAN_ESR1_WAKINT_MASK   (0x1U)"

.SS "#define CAN_ESR1_WAKINT_SHIFT   (0U)"

.SS "#define CAN_ESR2_IMB(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_IMB_SHIFT\fP)) & \fBCAN_ESR2_IMB_MASK\fP)"

.SS "#define CAN_ESR2_IMB_MASK   (0x2000U)"

.SS "#define CAN_ESR2_IMB_SHIFT   (13U)"

.SS "#define CAN_ESR2_LPTM(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_LPTM_SHIFT\fP)) & \fBCAN_ESR2_LPTM_MASK\fP)"

.SS "#define CAN_ESR2_LPTM_MASK   (0x7F0000U)"

.SS "#define CAN_ESR2_LPTM_SHIFT   (16U)"

.SS "#define CAN_ESR2_VPS(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_VPS_SHIFT\fP)) & \fBCAN_ESR2_VPS_MASK\fP)"

.SS "#define CAN_ESR2_VPS_MASK   (0x4000U)"

.SS "#define CAN_ESR2_VPS_SHIFT   (14U)"

.SS "#define CAN_ID_COUNT   (16U)"

.SS "#define CAN_ID_EXT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_EXT_SHIFT\fP)) & \fBCAN_ID_EXT_MASK\fP)"

.SS "#define CAN_ID_EXT_MASK   (0x3FFFFU)"

.SS "#define CAN_ID_EXT_SHIFT   (0U)"

.SS "#define CAN_ID_PRIO(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_PRIO_SHIFT\fP)) & \fBCAN_ID_PRIO_MASK\fP)"

.SS "#define CAN_ID_PRIO_MASK   (0xE0000000U)"

.SS "#define CAN_ID_PRIO_SHIFT   (29U)"

.SS "#define CAN_ID_STD(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_STD_SHIFT\fP)) & \fBCAN_ID_STD_MASK\fP)"

.SS "#define CAN_ID_STD_MASK   (0x1FFC0000U)"

.SS "#define CAN_ID_STD_SHIFT   (18U)"

.SS "#define CAN_IFLAG1_BUF0I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF0I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF0I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF0I_MASK   (0x1U)"

.SS "#define CAN_IFLAG1_BUF0I_SHIFT   (0U)"

.SS "#define CAN_IFLAG1_BUF31TO8I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF31TO8I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF31TO8I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF31TO8I_MASK   (0xFFFFFF00U)"

.SS "#define CAN_IFLAG1_BUF31TO8I_SHIFT   (8U)"

.SS "#define CAN_IFLAG1_BUF4TO1I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF4TO1I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF4TO1I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF4TO1I_MASK   (0x1EU)"

.SS "#define CAN_IFLAG1_BUF4TO1I_SHIFT   (1U)"

.SS "#define CAN_IFLAG1_BUF5I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF5I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF5I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF5I_MASK   (0x20U)"

.SS "#define CAN_IFLAG1_BUF5I_SHIFT   (5U)"

.SS "#define CAN_IFLAG1_BUF6I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF6I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF6I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF6I_MASK   (0x40U)"

.SS "#define CAN_IFLAG1_BUF6I_SHIFT   (6U)"

.SS "#define CAN_IFLAG1_BUF7I(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF7I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF7I_MASK\fP)"

.SS "#define CAN_IFLAG1_BUF7I_MASK   (0x80U)"

.SS "#define CAN_IFLAG1_BUF7I_SHIFT   (7U)"

.SS "#define CAN_IMASK1_BUFLM(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IMASK1_BUFLM_SHIFT\fP)) & \fBCAN_IMASK1_BUFLM_MASK\fP)"

.SS "#define CAN_IMASK1_BUFLM_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_IMASK1_BUFLM_SHIFT   (0U)"

.SS "#define CAN_MCR_AEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_AEN_SHIFT\fP)) & \fBCAN_MCR_AEN_MASK\fP)"

.SS "#define CAN_MCR_AEN_MASK   (0x1000U)"

.SS "#define CAN_MCR_AEN_SHIFT   (12U)"

.SS "#define CAN_MCR_FRZ(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZ_SHIFT\fP)) & \fBCAN_MCR_FRZ_MASK\fP)"

.SS "#define CAN_MCR_FRZ_MASK   (0x40000000U)"

.SS "#define CAN_MCR_FRZ_SHIFT   (30U)"

.SS "#define CAN_MCR_FRZACK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZACK_SHIFT\fP)) & \fBCAN_MCR_FRZACK_MASK\fP)"

.SS "#define CAN_MCR_FRZACK_MASK   (0x1000000U)"

.SS "#define CAN_MCR_FRZACK_SHIFT   (24U)"

.SS "#define CAN_MCR_HALT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_HALT_SHIFT\fP)) & \fBCAN_MCR_HALT_MASK\fP)"

.SS "#define CAN_MCR_HALT_MASK   (0x10000000U)"

.SS "#define CAN_MCR_HALT_SHIFT   (28U)"

.SS "#define CAN_MCR_IDAM(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IDAM_SHIFT\fP)) & \fBCAN_MCR_IDAM_MASK\fP)"

.SS "#define CAN_MCR_IDAM_MASK   (0x300U)"

.SS "#define CAN_MCR_IDAM_SHIFT   (8U)"

.SS "#define CAN_MCR_IRMQ(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IRMQ_SHIFT\fP)) & \fBCAN_MCR_IRMQ_MASK\fP)"

.SS "#define CAN_MCR_IRMQ_MASK   (0x10000U)"

.SS "#define CAN_MCR_IRMQ_SHIFT   (16U)"

.SS "#define CAN_MCR_LPMACK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPMACK_SHIFT\fP)) & \fBCAN_MCR_LPMACK_MASK\fP)"

.SS "#define CAN_MCR_LPMACK_MASK   (0x100000U)"

.SS "#define CAN_MCR_LPMACK_SHIFT   (20U)"

.SS "#define CAN_MCR_LPRIOEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPRIOEN_SHIFT\fP)) & \fBCAN_MCR_LPRIOEN_MASK\fP)"

.SS "#define CAN_MCR_LPRIOEN_MASK   (0x2000U)"

.SS "#define CAN_MCR_LPRIOEN_SHIFT   (13U)"

.SS "#define CAN_MCR_MAXMB(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MAXMB_SHIFT\fP)) & \fBCAN_MCR_MAXMB_MASK\fP)"

.SS "#define CAN_MCR_MAXMB_MASK   (0x7FU)"

.SS "#define CAN_MCR_MAXMB_SHIFT   (0U)"

.SS "#define CAN_MCR_MDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MDIS_SHIFT\fP)) & \fBCAN_MCR_MDIS_MASK\fP)"

.SS "#define CAN_MCR_MDIS_MASK   (0x80000000U)"

.SS "#define CAN_MCR_MDIS_SHIFT   (31U)"

.SS "#define CAN_MCR_NOTRDY(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_NOTRDY_SHIFT\fP)) & \fBCAN_MCR_NOTRDY_MASK\fP)"

.SS "#define CAN_MCR_NOTRDY_MASK   (0x8000000U)"

.SS "#define CAN_MCR_NOTRDY_SHIFT   (27U)"

.SS "#define CAN_MCR_RFEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_RFEN_SHIFT\fP)) & \fBCAN_MCR_RFEN_MASK\fP)"

.SS "#define CAN_MCR_RFEN_MASK   (0x20000000U)"

.SS "#define CAN_MCR_RFEN_SHIFT   (29U)"

.SS "#define CAN_MCR_SLFWAK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SLFWAK_SHIFT\fP)) & \fBCAN_MCR_SLFWAK_MASK\fP)"

.SS "#define CAN_MCR_SLFWAK_MASK   (0x400000U)"

.SS "#define CAN_MCR_SLFWAK_SHIFT   (22U)"

.SS "#define CAN_MCR_SOFTRST(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SOFTRST_SHIFT\fP)) & \fBCAN_MCR_SOFTRST_MASK\fP)"

.SS "#define CAN_MCR_SOFTRST_MASK   (0x2000000U)"

.SS "#define CAN_MCR_SOFTRST_SHIFT   (25U)"

.SS "#define CAN_MCR_SRXDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SRXDIS_SHIFT\fP)) & \fBCAN_MCR_SRXDIS_MASK\fP)"

.SS "#define CAN_MCR_SRXDIS_MASK   (0x20000U)"

.SS "#define CAN_MCR_SRXDIS_SHIFT   (17U)"

.SS "#define CAN_MCR_SUPV(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SUPV_SHIFT\fP)) & \fBCAN_MCR_SUPV_MASK\fP)"

.SS "#define CAN_MCR_SUPV_MASK   (0x800000U)"

.SS "#define CAN_MCR_SUPV_SHIFT   (23U)"

.SS "#define CAN_MCR_WAKMSK(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKMSK_SHIFT\fP)) & \fBCAN_MCR_WAKMSK_MASK\fP)"

.SS "#define CAN_MCR_WAKMSK_MASK   (0x4000000U)"

.SS "#define CAN_MCR_WAKMSK_SHIFT   (26U)"

.SS "#define CAN_MCR_WAKSRC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKSRC_SHIFT\fP)) & \fBCAN_MCR_WAKSRC_MASK\fP)"

.SS "#define CAN_MCR_WAKSRC_MASK   (0x80000U)"

.SS "#define CAN_MCR_WAKSRC_SHIFT   (19U)"

.SS "#define CAN_MCR_WRNEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WRNEN_SHIFT\fP)) & \fBCAN_MCR_WRNEN_MASK\fP)"

.SS "#define CAN_MCR_WRNEN_MASK   (0x200000U)"

.SS "#define CAN_MCR_WRNEN_SHIFT   (21U)"

.SS "#define CAN_ORed_Message_buffer_IRQS   { \fBCAN0_ORed_Message_buffer_IRQn\fP }"

.SS "#define CAN_RX14MASK_RX14M(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX14MASK_RX14M_SHIFT\fP)) & \fBCAN_RX14MASK_RX14M_MASK\fP)"

.SS "#define CAN_RX14MASK_RX14M_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_RX14MASK_RX14M_SHIFT   (0U)"

.SS "#define CAN_RX15MASK_RX15M(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX15MASK_RX15M_SHIFT\fP)) & \fBCAN_RX15MASK_RX15M_MASK\fP)"

.SS "#define CAN_RX15MASK_RX15M_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_RX15MASK_RX15M_SHIFT   (0U)"

.SS "#define CAN_Rx_Warning_IRQS   { \fBCAN0_Rx_Warning_IRQn\fP }"
Interrupt vectors for the CAN peripheral type 
.SS "#define CAN_RXFGMASK_FGM(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFGMASK_FGM_SHIFT\fP)) & \fBCAN_RXFGMASK_FGM_MASK\fP)"

.SS "#define CAN_RXFGMASK_FGM_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_RXFGMASK_FGM_SHIFT   (0U)"

.SS "#define CAN_RXFIR_IDHIT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFIR_IDHIT_SHIFT\fP)) & \fBCAN_RXFIR_IDHIT_MASK\fP)"

.SS "#define CAN_RXFIR_IDHIT_MASK   (0x1FFU)"

.SS "#define CAN_RXFIR_IDHIT_SHIFT   (0U)"

.SS "#define CAN_RXIMR_COUNT   (16U)"

.SS "#define CAN_RXIMR_MI(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXIMR_MI_SHIFT\fP)) & \fBCAN_RXIMR_MI_MASK\fP)"

.SS "#define CAN_RXIMR_MI_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_RXIMR_MI_SHIFT   (0U)"

.SS "#define CAN_RXMGMASK_MG(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXMGMASK_MG_SHIFT\fP)) & \fBCAN_RXMGMASK_MG_MASK\fP)"

.SS "#define CAN_RXMGMASK_MG_MASK   (0xFFFFFFFFU)"

.SS "#define CAN_RXMGMASK_MG_SHIFT   (0U)"

.SS "#define CAN_TIMER_TIMER(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_TIMER_TIMER_SHIFT\fP)) & \fBCAN_TIMER_TIMER_MASK\fP)"

.SS "#define CAN_TIMER_TIMER_MASK   (0xFFFFU)"

.SS "#define CAN_TIMER_TIMER_SHIFT   (0U)"

.SS "#define CAN_Tx_Warning_IRQS   { \fBCAN0_Tx_Warning_IRQn\fP }"

.SS "#define CAN_Wake_Up_IRQS   { \fBCAN0_Wake_Up_IRQn\fP }"

.SS "#define CAN_WORD0_COUNT   (16U)"

.SS "#define CAN_WORD0_DATA_BYTE_0(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_0_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_0_MASK\fP)"

.SS "#define CAN_WORD0_DATA_BYTE_0_MASK   (0xFF000000U)"

.SS "#define CAN_WORD0_DATA_BYTE_0_SHIFT   (24U)"

.SS "#define CAN_WORD0_DATA_BYTE_1(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_1_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_1_MASK\fP)"

.SS "#define CAN_WORD0_DATA_BYTE_1_MASK   (0xFF0000U)"

.SS "#define CAN_WORD0_DATA_BYTE_1_SHIFT   (16U)"

.SS "#define CAN_WORD0_DATA_BYTE_2(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_2_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_2_MASK\fP)"

.SS "#define CAN_WORD0_DATA_BYTE_2_MASK   (0xFF00U)"

.SS "#define CAN_WORD0_DATA_BYTE_2_SHIFT   (8U)"

.SS "#define CAN_WORD0_DATA_BYTE_3(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_3_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_3_MASK\fP)"

.SS "#define CAN_WORD0_DATA_BYTE_3_MASK   (0xFFU)"

.SS "#define CAN_WORD0_DATA_BYTE_3_SHIFT   (0U)"

.SS "#define CAN_WORD1_COUNT   (16U)"

.SS "#define CAN_WORD1_DATA_BYTE_4(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_4_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_4_MASK\fP)"

.SS "#define CAN_WORD1_DATA_BYTE_4_MASK   (0xFF000000U)"

.SS "#define CAN_WORD1_DATA_BYTE_4_SHIFT   (24U)"

.SS "#define CAN_WORD1_DATA_BYTE_5(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_5_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_5_MASK\fP)"

.SS "#define CAN_WORD1_DATA_BYTE_5_MASK   (0xFF0000U)"

.SS "#define CAN_WORD1_DATA_BYTE_5_SHIFT   (16U)"

.SS "#define CAN_WORD1_DATA_BYTE_6(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_6_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_6_MASK\fP)"

.SS "#define CAN_WORD1_DATA_BYTE_6_MASK   (0xFF00U)"

.SS "#define CAN_WORD1_DATA_BYTE_6_SHIFT   (8U)"

.SS "#define CAN_WORD1_DATA_BYTE_7(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_7_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_7_MASK\fP)"

.SS "#define CAN_WORD1_DATA_BYTE_7_MASK   (0xFFU)"

.SS "#define CAN_WORD1_DATA_BYTE_7_SHIFT   (0U)"

.SS "#define SPI_MCR_CLR_RXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_RXF_SHIFT\fP)) & \fBSPI_MCR_CLR_RXF_MASK\fP)"

.SS "#define SPI_MCR_CLR_RXF_MASK   (0x400U)"

.SS "#define SPI_MCR_CLR_RXF_SHIFT   (10U)"

.SS "#define SPI_MCR_CLR_TXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_TXF_SHIFT\fP)) & \fBSPI_MCR_CLR_TXF_MASK\fP)"

.SS "#define SPI_MCR_CLR_TXF_MASK   (0x800U)"

.SS "#define SPI_MCR_CLR_TXF_SHIFT   (11U)"

.SS "#define SPI_MCR_CONT_SCKE(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CONT_SCKE_SHIFT\fP)) & \fBSPI_MCR_CONT_SCKE_MASK\fP)"

.SS "#define SPI_MCR_CONT_SCKE_MASK   (0x40000000U)"

.SS "#define SPI_MCR_CONT_SCKE_SHIFT   (30U)"

.SS "#define SPI_MCR_DCONF(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DCONF_SHIFT\fP)) & \fBSPI_MCR_DCONF_MASK\fP)"

.SS "#define SPI_MCR_DCONF_MASK   (0x30000000U)"

.SS "#define SPI_MCR_DCONF_SHIFT   (28U)"

.SS "#define SPI_MCR_DIS_RXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_RXF_SHIFT\fP)) & \fBSPI_MCR_DIS_RXF_MASK\fP)"

.SS "#define SPI_MCR_DIS_RXF_MASK   (0x1000U)"

.SS "#define SPI_MCR_DIS_RXF_SHIFT   (12U)"

.SS "#define SPI_MCR_DIS_TXF(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_TXF_SHIFT\fP)) & \fBSPI_MCR_DIS_TXF_MASK\fP)"

.SS "#define SPI_MCR_DIS_TXF_MASK   (0x2000U)"

.SS "#define SPI_MCR_DIS_TXF_SHIFT   (13U)"

.SS "#define SPI_MCR_DOZE(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DOZE_SHIFT\fP)) & \fBSPI_MCR_DOZE_MASK\fP)"

.SS "#define SPI_MCR_DOZE_MASK   (0x8000U)"

.SS "#define SPI_MCR_DOZE_SHIFT   (15U)"

.SS "#define SPI_MCR_FRZ(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_FRZ_SHIFT\fP)) & \fBSPI_MCR_FRZ_MASK\fP)"

.SS "#define SPI_MCR_FRZ_MASK   (0x8000000U)"

.SS "#define SPI_MCR_FRZ_SHIFT   (27U)"

.SS "#define SPI_MCR_HALT(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_HALT_SHIFT\fP)) & \fBSPI_MCR_HALT_MASK\fP)"

.SS "#define SPI_MCR_HALT_MASK   (0x1U)"

.SS "#define SPI_MCR_HALT_SHIFT   (0U)"

.SS "#define SPI_MCR_MDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MDIS_SHIFT\fP)) & \fBSPI_MCR_MDIS_MASK\fP)"

.SS "#define SPI_MCR_MDIS_MASK   (0x4000U)"

.SS "#define SPI_MCR_MDIS_SHIFT   (14U)"

.SS "#define SPI_MCR_MSTR(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MSTR_SHIFT\fP)) & \fBSPI_MCR_MSTR_MASK\fP)"

.SS "#define SPI_MCR_MSTR_MASK   (0x80000000U)"

.SS "#define SPI_MCR_MSTR_SHIFT   (31U)"

.SS "#define SPI_MCR_MTFE(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MTFE_SHIFT\fP)) & \fBSPI_MCR_MTFE_MASK\fP)"

.SS "#define SPI_MCR_MTFE_MASK   (0x4000000U)"

.SS "#define SPI_MCR_MTFE_SHIFT   (26U)"

.SS "#define SPI_MCR_PCSIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSIS_SHIFT\fP)) & \fBSPI_MCR_PCSIS_MASK\fP)"

.SS "#define SPI_MCR_PCSIS_MASK   (0x3F0000U)"

.SS "#define SPI_MCR_PCSIS_SHIFT   (16U)"

.SS "#define SPI_MCR_PCSSE(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSSE_SHIFT\fP)) & \fBSPI_MCR_PCSSE_MASK\fP)"

.SS "#define SPI_MCR_PCSSE_MASK   (0x2000000U)"

.SS "#define SPI_MCR_PCSSE_SHIFT   (25U)"

.SS "#define SPI_MCR_ROOE(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_ROOE_SHIFT\fP)) & \fBSPI_MCR_ROOE_MASK\fP)"

.SS "#define SPI_MCR_ROOE_MASK   (0x1000000U)"

.SS "#define SPI_MCR_ROOE_SHIFT   (24U)"

.SS "#define SPI_MCR_SMPL_PT(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_SMPL_PT_SHIFT\fP)) & \fBSPI_MCR_SMPL_PT_MASK\fP)"

.SS "#define SPI_MCR_SMPL_PT_MASK   (0x300U)"

.SS "#define SPI_MCR_SMPL_PT_SHIFT   (8U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
