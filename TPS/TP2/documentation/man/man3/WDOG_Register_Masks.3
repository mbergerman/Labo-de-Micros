.TH "WDOG_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WDOG_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWDOG_BASE\fP   (0x40052000u)"
.br
.ti -1c
.RI "#define \fBWDOG\fP   ((\fBWDOG_Type\fP *)\fBWDOG_BASE\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_BASE_ADDRS\fP   { \fBWDOG_BASE\fP }"
.br
.ti -1c
.RI "#define \fBWDOG_BASE_PTRS\fP   { \fBWDOG\fP }"
.br
.ti -1c
.RI "#define \fBWDOG_IRQS\fP   { \fBWDOG_EWM_IRQn\fP }"
.br
.in -1c
.SS "STCTRLH - Watchdog Status and Control Register High"

.in +1c
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WDOGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WDOGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_CLKSRC_SHIFT\fP)) & \fBWDOG_STCTRLH_CLKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_IRQRSTEN_SHIFT\fP)) & \fBWDOG_STCTRLH_IRQRSTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WINEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WINEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_ALLOWUPDATE_SHIFT\fP)) & \fBWDOG_STCTRLH_ALLOWUPDATE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DBGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_DBGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_STOPEN_SHIFT\fP)) & \fBWDOG_STCTRLH_STOPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WAITEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WAITEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTWDOG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTSEL_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL_MASK\fP   (0x3000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_BYTESEL_SHIFT\fP)) & \fBWDOG_STCTRLH_BYTESEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DISTESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_DISTESTWDOG_MASK\fP)"
.br
.in -1c
.SS "STCTRLL - Watchdog Status and Control Register Low"

.in +1c
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLL_INTFLG_SHIFT\fP)) & \fBWDOG_STCTRLL_INTFLG_MASK\fP)"
.br
.in -1c
.SS "TOVALH - Watchdog Time-out Value Register High"

.in +1c
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALH_TOVALHIGH_SHIFT\fP)) & \fBWDOG_TOVALH_TOVALHIGH_MASK\fP)"
.br
.in -1c
.SS "TOVALL - Watchdog Time-out Value Register Low"

.in +1c
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALL_TOVALLOW_SHIFT\fP)) & \fBWDOG_TOVALL_TOVALLOW_MASK\fP)"
.br
.in -1c
.SS "WINH - Watchdog Window Register High"

.in +1c
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINH_WINHIGH_SHIFT\fP)) & \fBWDOG_WINH_WINHIGH_MASK\fP)"
.br
.in -1c
.SS "WINL - Watchdog Window Register Low"

.in +1c
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINL_WINLOW_SHIFT\fP)) & \fBWDOG_WINL_WINLOW_MASK\fP)"
.br
.in -1c
.SS "REFRESH - Watchdog Refresh register"

.in +1c
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_REFRESH_WDOGREFRESH_SHIFT\fP)) & \fBWDOG_REFRESH_WDOGREFRESH_MASK\fP)"
.br
.in -1c
.SS "UNLOCK - Watchdog Unlock register"

.in +1c
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_UNLOCK_WDOGUNLOCK_SHIFT\fP)) & \fBWDOG_UNLOCK_WDOGUNLOCK_MASK\fP)"
.br
.in -1c
.SS "TMROUTH - Watchdog Timer Output Register High"

.in +1c
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTH_TIMEROUTHIGH_SHIFT\fP)) & \fBWDOG_TMROUTH_TIMEROUTHIGH_MASK\fP)"
.br
.in -1c
.SS "TMROUTL - Watchdog Timer Output Register Low"

.in +1c
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTL_TIMEROUTLOW_SHIFT\fP)) & \fBWDOG_TMROUTL_TIMEROUTLOW_MASK\fP)"
.br
.in -1c
.SS "RSTCNT - Watchdog Reset Count register"

.in +1c
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_RSTCNT_RSTCNT_SHIFT\fP)) & \fBWDOG_RSTCNT_RSTCNT_MASK\fP)"
.br
.in -1c
.SS "PRESC - Watchdog Prescaler register"

.in +1c
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_PRESC_PRESCVAL_SHIFT\fP)) & \fBWDOG_PRESC_PRESCVAL_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define WDOG   ((\fBWDOG_Type\fP *)\fBWDOG_BASE\fP)"
Peripheral WDOG base pointer 
.SS "#define WDOG_BASE   (0x40052000u)"
Peripheral WDOG base address 
.SS "#define WDOG_BASE_ADDRS   { \fBWDOG_BASE\fP }"
Array initializer of WDOG peripheral base addresses 
.SS "#define WDOG_BASE_PTRS   { \fBWDOG\fP }"
Array initializer of WDOG peripheral base pointers 
.SS "#define WDOG_IRQS   { \fBWDOG_EWM_IRQn\fP }"
Interrupt vectors for the WDOG peripheral type 
.SS "#define WDOG_PRESC_PRESCVAL(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_PRESC_PRESCVAL_SHIFT\fP)) & \fBWDOG_PRESC_PRESCVAL_MASK\fP)"

.SS "#define WDOG_PRESC_PRESCVAL_MASK   (0x700U)"

.SS "#define WDOG_PRESC_PRESCVAL_SHIFT   (8U)"

.SS "#define WDOG_REFRESH_WDOGREFRESH(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_REFRESH_WDOGREFRESH_SHIFT\fP)) & \fBWDOG_REFRESH_WDOGREFRESH_MASK\fP)"

.SS "#define WDOG_REFRESH_WDOGREFRESH_MASK   (0xFFFFU)"

.SS "#define WDOG_REFRESH_WDOGREFRESH_SHIFT   (0U)"

.SS "#define WDOG_RSTCNT_RSTCNT(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_RSTCNT_RSTCNT_SHIFT\fP)) & \fBWDOG_RSTCNT_RSTCNT_MASK\fP)"

.SS "#define WDOG_RSTCNT_RSTCNT_MASK   (0xFFFFU)"

.SS "#define WDOG_RSTCNT_RSTCNT_SHIFT   (0U)"

.SS "#define WDOG_STCTRLH_ALLOWUPDATE(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_ALLOWUPDATE_SHIFT\fP)) & \fBWDOG_STCTRLH_ALLOWUPDATE_MASK\fP)"

.SS "#define WDOG_STCTRLH_ALLOWUPDATE_MASK   (0x10U)"

.SS "#define WDOG_STCTRLH_ALLOWUPDATE_SHIFT   (4U)"

.SS "#define WDOG_STCTRLH_BYTESEL(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_BYTESEL_SHIFT\fP)) & \fBWDOG_STCTRLH_BYTESEL_MASK\fP)"

.SS "#define WDOG_STCTRLH_BYTESEL_MASK   (0x3000U)"

.SS "#define WDOG_STCTRLH_BYTESEL_SHIFT   (12U)"

.SS "#define WDOG_STCTRLH_CLKSRC(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_CLKSRC_SHIFT\fP)) & \fBWDOG_STCTRLH_CLKSRC_MASK\fP)"

.SS "#define WDOG_STCTRLH_CLKSRC_MASK   (0x2U)"

.SS "#define WDOG_STCTRLH_CLKSRC_SHIFT   (1U)"

.SS "#define WDOG_STCTRLH_DBGEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DBGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_DBGEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_DBGEN_MASK   (0x20U)"

.SS "#define WDOG_STCTRLH_DBGEN_SHIFT   (5U)"

.SS "#define WDOG_STCTRLH_DISTESTWDOG(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DISTESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_DISTESTWDOG_MASK\fP)"

.SS "#define WDOG_STCTRLH_DISTESTWDOG_MASK   (0x4000U)"

.SS "#define WDOG_STCTRLH_DISTESTWDOG_SHIFT   (14U)"

.SS "#define WDOG_STCTRLH_IRQRSTEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_IRQRSTEN_SHIFT\fP)) & \fBWDOG_STCTRLH_IRQRSTEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_IRQRSTEN_MASK   (0x4U)"

.SS "#define WDOG_STCTRLH_IRQRSTEN_SHIFT   (2U)"

.SS "#define WDOG_STCTRLH_STOPEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_STOPEN_SHIFT\fP)) & \fBWDOG_STCTRLH_STOPEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_STOPEN_MASK   (0x40U)"

.SS "#define WDOG_STCTRLH_STOPEN_SHIFT   (6U)"

.SS "#define WDOG_STCTRLH_TESTSEL(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTSEL_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTSEL_MASK\fP)"

.SS "#define WDOG_STCTRLH_TESTSEL_MASK   (0x800U)"

.SS "#define WDOG_STCTRLH_TESTSEL_SHIFT   (11U)"

.SS "#define WDOG_STCTRLH_TESTWDOG(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTWDOG_MASK\fP)"

.SS "#define WDOG_STCTRLH_TESTWDOG_MASK   (0x400U)"

.SS "#define WDOG_STCTRLH_TESTWDOG_SHIFT   (10U)"

.SS "#define WDOG_STCTRLH_WAITEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WAITEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WAITEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_WAITEN_MASK   (0x80U)"

.SS "#define WDOG_STCTRLH_WAITEN_SHIFT   (7U)"

.SS "#define WDOG_STCTRLH_WDOGEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WDOGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WDOGEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_WDOGEN_MASK   (0x1U)"

.SS "#define WDOG_STCTRLH_WDOGEN_SHIFT   (0U)"

.SS "#define WDOG_STCTRLH_WINEN(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WINEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WINEN_MASK\fP)"

.SS "#define WDOG_STCTRLH_WINEN_MASK   (0x8U)"

.SS "#define WDOG_STCTRLH_WINEN_SHIFT   (3U)"

.SS "#define WDOG_STCTRLL_INTFLG(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLL_INTFLG_SHIFT\fP)) & \fBWDOG_STCTRLL_INTFLG_MASK\fP)"

.SS "#define WDOG_STCTRLL_INTFLG_MASK   (0x8000U)"

.SS "#define WDOG_STCTRLL_INTFLG_SHIFT   (15U)"

.SS "#define WDOG_TMROUTH_TIMEROUTHIGH(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTH_TIMEROUTHIGH_SHIFT\fP)) & \fBWDOG_TMROUTH_TIMEROUTHIGH_MASK\fP)"

.SS "#define WDOG_TMROUTH_TIMEROUTHIGH_MASK   (0xFFFFU)"

.SS "#define WDOG_TMROUTH_TIMEROUTHIGH_SHIFT   (0U)"

.SS "#define WDOG_TMROUTL_TIMEROUTLOW(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTL_TIMEROUTLOW_SHIFT\fP)) & \fBWDOG_TMROUTL_TIMEROUTLOW_MASK\fP)"

.SS "#define WDOG_TMROUTL_TIMEROUTLOW_MASK   (0xFFFFU)"

.SS "#define WDOG_TMROUTL_TIMEROUTLOW_SHIFT   (0U)"

.SS "#define WDOG_TOVALH_TOVALHIGH(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALH_TOVALHIGH_SHIFT\fP)) & \fBWDOG_TOVALH_TOVALHIGH_MASK\fP)"

.SS "#define WDOG_TOVALH_TOVALHIGH_MASK   (0xFFFFU)"

.SS "#define WDOG_TOVALH_TOVALHIGH_SHIFT   (0U)"

.SS "#define WDOG_TOVALL_TOVALLOW(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALL_TOVALLOW_SHIFT\fP)) & \fBWDOG_TOVALL_TOVALLOW_MASK\fP)"

.SS "#define WDOG_TOVALL_TOVALLOW_MASK   (0xFFFFU)"

.SS "#define WDOG_TOVALL_TOVALLOW_SHIFT   (0U)"

.SS "#define WDOG_UNLOCK_WDOGUNLOCK(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_UNLOCK_WDOGUNLOCK_SHIFT\fP)) & \fBWDOG_UNLOCK_WDOGUNLOCK_MASK\fP)"

.SS "#define WDOG_UNLOCK_WDOGUNLOCK_MASK   (0xFFFFU)"

.SS "#define WDOG_UNLOCK_WDOGUNLOCK_SHIFT   (0U)"

.SS "#define WDOG_WINH_WINHIGH(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINH_WINHIGH_SHIFT\fP)) & \fBWDOG_WINH_WINHIGH_MASK\fP)"

.SS "#define WDOG_WINH_WINHIGH_MASK   (0xFFFFU)"

.SS "#define WDOG_WINH_WINHIGH_SHIFT   (0U)"

.SS "#define WDOG_WINL_WINLOW(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINL_WINLOW_SHIFT\fP)) & \fBWDOG_WINL_WINLOW_MASK\fP)"

.SS "#define WDOG_WINL_WINLOW_MASK   (0xFFFFU)"

.SS "#define WDOG_WINL_WINLOW_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
