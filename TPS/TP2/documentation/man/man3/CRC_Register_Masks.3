.TH "CRC_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CRC_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCRC_BASE\fP   (0x40032000u)"
.br
.ti -1c
.RI "#define \fBCRC0\fP   ((\fBCRC_Type\fP *)\fBCRC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCRC_BASE_ADDRS\fP   { \fBCRC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCRC_BASE_PTRS\fP   { \fBCRC0\fP }"
.br
.in -1c
.SS "DATAL - CRC_DATAL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAL_DATAL_SHIFT\fP)) & \fBCRC_DATAL_DATAL_MASK\fP)"
.br
.in -1c
.SS "DATAH - CRC_DATAH register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAH_DATAH_SHIFT\fP)) & \fBCRC_DATAH_DATAH_MASK\fP)"
.br
.in -1c
.SS "DATA - CRC Data register"

.in +1c
.ti -1c
.RI "#define \fBCRC_DATA_LL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LL_SHIFT\fP)) & \fBCRC_DATA_LL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LU_SHIFT\fP)) & \fBCRC_DATA_LU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HL_SHIFT\fP)) & \fBCRC_DATA_HL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HU_SHIFT\fP)) & \fBCRC_DATA_HU_MASK\fP)"
.br
.in -1c
.SS "DATALL - CRC_DATALL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALL_DATALL_SHIFT\fP)) & \fBCRC_DATALL_DATALL_MASK\fP)"
.br
.in -1c
.SS "DATALU - CRC_DATALU register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALU_DATALU_SHIFT\fP)) & \fBCRC_DATALU_DATALU_MASK\fP)"
.br
.in -1c
.SS "DATAHL - CRC_DATAHL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHL_DATAHL_SHIFT\fP)) & \fBCRC_DATAHL_DATAHL_MASK\fP)"
.br
.in -1c
.SS "DATAHU - CRC_DATAHU register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHU_DATAHU_SHIFT\fP)) & \fBCRC_DATAHU_DATAHU_MASK\fP)"
.br
.in -1c
.SS "GPOLYL - CRC_GPOLYL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYL_GPOLYL_SHIFT\fP)) & \fBCRC_GPOLYL_GPOLYL_MASK\fP)"
.br
.in -1c
.SS "GPOLYH - CRC_GPOLYH register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYH_GPOLYH_SHIFT\fP)) & \fBCRC_GPOLYH_GPOLYH_MASK\fP)"
.br
.in -1c
.SS "GPOLY - CRC Polynomial register"

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_LOW_SHIFT\fP)) & \fBCRC_GPOLY_LOW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_HIGH_SHIFT\fP)) & \fBCRC_GPOLY_HIGH_MASK\fP)"
.br
.in -1c
.SS "GPOLYLL - CRC_GPOLYLL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLL_GPOLYLL_SHIFT\fP)) & \fBCRC_GPOLYLL_GPOLYLL_MASK\fP)"
.br
.in -1c
.SS "GPOLYLU - CRC_GPOLYLU register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLU_GPOLYLU_SHIFT\fP)) & \fBCRC_GPOLYLU_GPOLYLU_MASK\fP)"
.br
.in -1c
.SS "GPOLYHL - CRC_GPOLYHL register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHL_GPOLYHL_SHIFT\fP)) & \fBCRC_GPOLYHL_GPOLYHL_MASK\fP)"
.br
.in -1c
.SS "GPOLYHU - CRC_GPOLYHU register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHU_GPOLYHU_SHIFT\fP)) & \fBCRC_GPOLYHU_GPOLYHU_MASK\fP)"
.br
.in -1c
.SS "CTRL - CRC Control register"

.in +1c
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TCRC_SHIFT\fP)) & \fBCRC_CTRL_TCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_WAS_SHIFT\fP)) & \fBCRC_CTRL_WAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_FXOR_SHIFT\fP)) & \fBCRC_CTRL_FXOR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOTR_SHIFT\fP)) & \fBCRC_CTRL_TOTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOT_SHIFT\fP)) & \fBCRC_CTRL_TOT_MASK\fP)"
.br
.in -1c
.SS "CTRLHU - CRC_CTRLHU register\&."

.in +1c
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TCRC_SHIFT\fP)) & \fBCRC_CTRLHU_TCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_WAS_SHIFT\fP)) & \fBCRC_CTRLHU_WAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_FXOR_SHIFT\fP)) & \fBCRC_CTRLHU_FXOR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOTR_SHIFT\fP)) & \fBCRC_CTRLHU_TOTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOT_SHIFT\fP)) & \fBCRC_CTRLHU_TOT_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define CRC0   ((\fBCRC_Type\fP *)\fBCRC_BASE\fP)"
Peripheral CRC base pointer 
.SS "#define CRC_BASE   (0x40032000u)"
Peripheral CRC base address 
.SS "#define CRC_BASE_ADDRS   { \fBCRC_BASE\fP }"
Array initializer of CRC peripheral base addresses 
.SS "#define CRC_BASE_PTRS   { \fBCRC0\fP }"
Array initializer of CRC peripheral base pointers 
.SS "#define CRC_CTRL_FXOR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_FXOR_SHIFT\fP)) & \fBCRC_CTRL_FXOR_MASK\fP)"

.SS "#define CRC_CTRL_FXOR_MASK   (0x4000000U)"

.SS "#define CRC_CTRL_FXOR_SHIFT   (26U)"

.SS "#define CRC_CTRL_TCRC(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TCRC_SHIFT\fP)) & \fBCRC_CTRL_TCRC_MASK\fP)"

.SS "#define CRC_CTRL_TCRC_MASK   (0x1000000U)"

.SS "#define CRC_CTRL_TCRC_SHIFT   (24U)"

.SS "#define CRC_CTRL_TOT(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOT_SHIFT\fP)) & \fBCRC_CTRL_TOT_MASK\fP)"

.SS "#define CRC_CTRL_TOT_MASK   (0xC0000000U)"

.SS "#define CRC_CTRL_TOT_SHIFT   (30U)"

.SS "#define CRC_CTRL_TOTR(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOTR_SHIFT\fP)) & \fBCRC_CTRL_TOTR_MASK\fP)"

.SS "#define CRC_CTRL_TOTR_MASK   (0x30000000U)"

.SS "#define CRC_CTRL_TOTR_SHIFT   (28U)"

.SS "#define CRC_CTRL_WAS(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_WAS_SHIFT\fP)) & \fBCRC_CTRL_WAS_MASK\fP)"

.SS "#define CRC_CTRL_WAS_MASK   (0x2000000U)"

.SS "#define CRC_CTRL_WAS_SHIFT   (25U)"

.SS "#define CRC_CTRLHU_FXOR(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_FXOR_SHIFT\fP)) & \fBCRC_CTRLHU_FXOR_MASK\fP)"

.SS "#define CRC_CTRLHU_FXOR_MASK   (0x4U)"

.SS "#define CRC_CTRLHU_FXOR_SHIFT   (2U)"

.SS "#define CRC_CTRLHU_TCRC(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TCRC_SHIFT\fP)) & \fBCRC_CTRLHU_TCRC_MASK\fP)"

.SS "#define CRC_CTRLHU_TCRC_MASK   (0x1U)"

.SS "#define CRC_CTRLHU_TCRC_SHIFT   (0U)"

.SS "#define CRC_CTRLHU_TOT(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOT_SHIFT\fP)) & \fBCRC_CTRLHU_TOT_MASK\fP)"

.SS "#define CRC_CTRLHU_TOT_MASK   (0xC0U)"

.SS "#define CRC_CTRLHU_TOT_SHIFT   (6U)"

.SS "#define CRC_CTRLHU_TOTR(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOTR_SHIFT\fP)) & \fBCRC_CTRLHU_TOTR_MASK\fP)"

.SS "#define CRC_CTRLHU_TOTR_MASK   (0x30U)"

.SS "#define CRC_CTRLHU_TOTR_SHIFT   (4U)"

.SS "#define CRC_CTRLHU_WAS(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_WAS_SHIFT\fP)) & \fBCRC_CTRLHU_WAS_MASK\fP)"

.SS "#define CRC_CTRLHU_WAS_MASK   (0x2U)"

.SS "#define CRC_CTRLHU_WAS_SHIFT   (1U)"

.SS "#define CRC_DATA_HL(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HL_SHIFT\fP)) & \fBCRC_DATA_HL_MASK\fP)"

.SS "#define CRC_DATA_HL_MASK   (0xFF0000U)"

.SS "#define CRC_DATA_HL_SHIFT   (16U)"

.SS "#define CRC_DATA_HU(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HU_SHIFT\fP)) & \fBCRC_DATA_HU_MASK\fP)"

.SS "#define CRC_DATA_HU_MASK   (0xFF000000U)"

.SS "#define CRC_DATA_HU_SHIFT   (24U)"

.SS "#define CRC_DATA_LL(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LL_SHIFT\fP)) & \fBCRC_DATA_LL_MASK\fP)"

.SS "#define CRC_DATA_LL_MASK   (0xFFU)"

.SS "#define CRC_DATA_LL_SHIFT   (0U)"

.SS "#define CRC_DATA_LU(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LU_SHIFT\fP)) & \fBCRC_DATA_LU_MASK\fP)"

.SS "#define CRC_DATA_LU_MASK   (0xFF00U)"

.SS "#define CRC_DATA_LU_SHIFT   (8U)"

.SS "#define CRC_DATAH_DATAH(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAH_DATAH_SHIFT\fP)) & \fBCRC_DATAH_DATAH_MASK\fP)"

.SS "#define CRC_DATAH_DATAH_MASK   (0xFFFFU)"

.SS "#define CRC_DATAH_DATAH_SHIFT   (0U)"

.SS "#define CRC_DATAHL_DATAHL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHL_DATAHL_SHIFT\fP)) & \fBCRC_DATAHL_DATAHL_MASK\fP)"

.SS "#define CRC_DATAHL_DATAHL_MASK   (0xFFU)"

.SS "#define CRC_DATAHL_DATAHL_SHIFT   (0U)"

.SS "#define CRC_DATAHU_DATAHU(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHU_DATAHU_SHIFT\fP)) & \fBCRC_DATAHU_DATAHU_MASK\fP)"

.SS "#define CRC_DATAHU_DATAHU_MASK   (0xFFU)"

.SS "#define CRC_DATAHU_DATAHU_SHIFT   (0U)"

.SS "#define CRC_DATAL_DATAL(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAL_DATAL_SHIFT\fP)) & \fBCRC_DATAL_DATAL_MASK\fP)"

.SS "#define CRC_DATAL_DATAL_MASK   (0xFFFFU)"

.SS "#define CRC_DATAL_DATAL_SHIFT   (0U)"

.SS "#define CRC_DATALL_DATALL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALL_DATALL_SHIFT\fP)) & \fBCRC_DATALL_DATALL_MASK\fP)"

.SS "#define CRC_DATALL_DATALL_MASK   (0xFFU)"

.SS "#define CRC_DATALL_DATALL_SHIFT   (0U)"

.SS "#define CRC_DATALU_DATALU(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALU_DATALU_SHIFT\fP)) & \fBCRC_DATALU_DATALU_MASK\fP)"

.SS "#define CRC_DATALU_DATALU_MASK   (0xFFU)"

.SS "#define CRC_DATALU_DATALU_SHIFT   (0U)"

.SS "#define CRC_GPOLY_HIGH(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_HIGH_SHIFT\fP)) & \fBCRC_GPOLY_HIGH_MASK\fP)"

.SS "#define CRC_GPOLY_HIGH_MASK   (0xFFFF0000U)"

.SS "#define CRC_GPOLY_HIGH_SHIFT   (16U)"

.SS "#define CRC_GPOLY_LOW(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_LOW_SHIFT\fP)) & \fBCRC_GPOLY_LOW_MASK\fP)"

.SS "#define CRC_GPOLY_LOW_MASK   (0xFFFFU)"

.SS "#define CRC_GPOLY_LOW_SHIFT   (0U)"

.SS "#define CRC_GPOLYH_GPOLYH(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYH_GPOLYH_SHIFT\fP)) & \fBCRC_GPOLYH_GPOLYH_MASK\fP)"

.SS "#define CRC_GPOLYH_GPOLYH_MASK   (0xFFFFU)"

.SS "#define CRC_GPOLYH_GPOLYH_SHIFT   (0U)"

.SS "#define CRC_GPOLYHL_GPOLYHL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHL_GPOLYHL_SHIFT\fP)) & \fBCRC_GPOLYHL_GPOLYHL_MASK\fP)"

.SS "#define CRC_GPOLYHL_GPOLYHL_MASK   (0xFFU)"

.SS "#define CRC_GPOLYHL_GPOLYHL_SHIFT   (0U)"

.SS "#define CRC_GPOLYHU_GPOLYHU(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHU_GPOLYHU_SHIFT\fP)) & \fBCRC_GPOLYHU_GPOLYHU_MASK\fP)"

.SS "#define CRC_GPOLYHU_GPOLYHU_MASK   (0xFFU)"

.SS "#define CRC_GPOLYHU_GPOLYHU_SHIFT   (0U)"

.SS "#define CRC_GPOLYL_GPOLYL(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYL_GPOLYL_SHIFT\fP)) & \fBCRC_GPOLYL_GPOLYL_MASK\fP)"

.SS "#define CRC_GPOLYL_GPOLYL_MASK   (0xFFFFU)"

.SS "#define CRC_GPOLYL_GPOLYL_SHIFT   (0U)"

.SS "#define CRC_GPOLYLL_GPOLYLL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLL_GPOLYLL_SHIFT\fP)) & \fBCRC_GPOLYLL_GPOLYLL_MASK\fP)"

.SS "#define CRC_GPOLYLL_GPOLYLL_MASK   (0xFFU)"

.SS "#define CRC_GPOLYLL_GPOLYLL_SHIFT   (0U)"

.SS "#define CRC_GPOLYLU_GPOLYLU(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLU_GPOLYLU_SHIFT\fP)) & \fBCRC_GPOLYLU_GPOLYLU_MASK\fP)"

.SS "#define CRC_GPOLYLU_GPOLYLU_MASK   (0xFFU)"

.SS "#define CRC_GPOLYLU_GPOLYLU_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
