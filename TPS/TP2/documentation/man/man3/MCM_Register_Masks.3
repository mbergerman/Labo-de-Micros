.TH "MCM_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MCM_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMCM_BASE\fP   (0xE0080000u)"
.br
.ti -1c
.RI "#define \fBMCM\fP   ((\fBMCM_Type\fP *)\fBMCM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBMCM_BASE_ADDRS\fP   { \fBMCM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBMCM_BASE_PTRS\fP   { \fBMCM\fP }"
.br
.ti -1c
.RI "#define \fBMCM_IRQS\fP   { \fBMCM_IRQn\fP }"
.br
.in -1c
.SS "CR - Control Register"

.in +1c
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP_MASK\fP   (0x3000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUAP_SHIFT\fP)) & \fBMCM_CR_SRAMUAP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUWP_SHIFT\fP)) & \fBMCM_CR_SRAMUWP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLAP_SHIFT\fP)) & \fBMCM_CR_SRAMLAP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLWP_SHIFT\fP)) & \fBMCM_CR_SRAMLWP_MASK\fP)"
.br
.in -1c
.SS "PLASC - Crossbar Switch (AXBS) Slave Configuration"

.in +1c
.ti -1c
.RI "#define \fBMCM_PLASC_ASC_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PLASC_ASC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PLASC_ASC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLASC_ASC_SHIFT\fP)) & \fBMCM_PLASC_ASC_MASK\fP)"
.br
.in -1c
.SS "PLAMC - Crossbar Switch (AXBS) Master Configuration"

.in +1c
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLAMC_AMC_SHIFT\fP)) & \fBMCM_PLAMC_AMC_MASK\fP)"
.br
.in -1c
.SS "ISCR - Interrupt Status Register"

.in +1c
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_IRQ_SHIFT\fP)) & \fBMCM_ISCR_IRQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_NMI_SHIFT\fP)) & \fBMCM_ISCR_NMI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_DHREQ_SHIFT\fP)) & \fBMCM_ISCR_DHREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOC_SHIFT\fP)) & \fBMCM_ISCR_FIOC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZC_SHIFT\fP)) & \fBMCM_ISCR_FDZC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFC_SHIFT\fP)) & \fBMCM_ISCR_FOFC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFC_SHIFT\fP)) & \fBMCM_ISCR_FUFC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXC_SHIFT\fP)) & \fBMCM_ISCR_FIXC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDC_SHIFT\fP)) & \fBMCM_ISCR_FIDC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOCE_SHIFT\fP)) & \fBMCM_ISCR_FIOCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZCE_SHIFT\fP)) & \fBMCM_ISCR_FDZCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFCE_SHIFT\fP)) & \fBMCM_ISCR_FOFCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFCE_SHIFT\fP)) & \fBMCM_ISCR_FUFCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXCE_SHIFT\fP)) & \fBMCM_ISCR_FIXCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDCE_SHIFT\fP)) & \fBMCM_ISCR_FIDCE_MASK\fP)"
.br
.in -1c
.SS "ETBCC - ETB Counter Control register"

.in +1c
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_CNTEN_SHIFT\fP)) & \fBMCM_ETBCC_CNTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT_MASK\fP   (0x6U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RSPT_SHIFT\fP)) & \fBMCM_ETBCC_RSPT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RLRQ_SHIFT\fP)) & \fBMCM_ETBCC_RLRQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ETDIS_SHIFT\fP)) & \fBMCM_ETBCC_ETDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ITDIS_SHIFT\fP)) & \fBMCM_ETBCC_ITDIS_MASK\fP)"
.br
.in -1c
.SS "ETBRL - ETB Reload register"

.in +1c
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD_MASK\fP   (0x7FFU)"
.br
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBRL_RELOAD_SHIFT\fP)) & \fBMCM_ETBRL_RELOAD_MASK\fP)"
.br
.in -1c
.SS "ETBCNT - ETB Counter Value register"

.in +1c
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER_MASK\fP   (0x7FFU)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCNT_COUNTER_SHIFT\fP)) & \fBMCM_ETBCNT_COUNTER_MASK\fP)"
.br
.in -1c
.SS "PID - Process ID register"

.in +1c
.ti -1c
.RI "#define \fBMCM_PID_PID_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PID_PID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PID_PID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_PID_PID_SHIFT\fP)) & \fBMCM_PID_PID_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define MCM   ((\fBMCM_Type\fP *)\fBMCM_BASE\fP)"
Peripheral MCM base pointer 
.SS "#define MCM_BASE   (0xE0080000u)"
Peripheral MCM base address 
.SS "#define MCM_BASE_ADDRS   { \fBMCM_BASE\fP }"
Array initializer of MCM peripheral base addresses 
.SS "#define MCM_BASE_PTRS   { \fBMCM\fP }"
Array initializer of MCM peripheral base pointers 
.SS "#define MCM_CR_SRAMLAP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLAP_SHIFT\fP)) & \fBMCM_CR_SRAMLAP_MASK\fP)"

.SS "#define MCM_CR_SRAMLAP_MASK   (0x30000000U)"

.SS "#define MCM_CR_SRAMLAP_SHIFT   (28U)"

.SS "#define MCM_CR_SRAMLWP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLWP_SHIFT\fP)) & \fBMCM_CR_SRAMLWP_MASK\fP)"

.SS "#define MCM_CR_SRAMLWP_MASK   (0x40000000U)"

.SS "#define MCM_CR_SRAMLWP_SHIFT   (30U)"

.SS "#define MCM_CR_SRAMUAP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUAP_SHIFT\fP)) & \fBMCM_CR_SRAMUAP_MASK\fP)"

.SS "#define MCM_CR_SRAMUAP_MASK   (0x3000000U)"

.SS "#define MCM_CR_SRAMUAP_SHIFT   (24U)"

.SS "#define MCM_CR_SRAMUWP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUWP_SHIFT\fP)) & \fBMCM_CR_SRAMUWP_MASK\fP)"

.SS "#define MCM_CR_SRAMUWP_MASK   (0x4000000U)"

.SS "#define MCM_CR_SRAMUWP_SHIFT   (26U)"

.SS "#define MCM_ETBCC_CNTEN(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_CNTEN_SHIFT\fP)) & \fBMCM_ETBCC_CNTEN_MASK\fP)"

.SS "#define MCM_ETBCC_CNTEN_MASK   (0x1U)"

.SS "#define MCM_ETBCC_CNTEN_SHIFT   (0U)"

.SS "#define MCM_ETBCC_ETDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ETDIS_SHIFT\fP)) & \fBMCM_ETBCC_ETDIS_MASK\fP)"

.SS "#define MCM_ETBCC_ETDIS_MASK   (0x10U)"

.SS "#define MCM_ETBCC_ETDIS_SHIFT   (4U)"

.SS "#define MCM_ETBCC_ITDIS(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ITDIS_SHIFT\fP)) & \fBMCM_ETBCC_ITDIS_MASK\fP)"

.SS "#define MCM_ETBCC_ITDIS_MASK   (0x20U)"

.SS "#define MCM_ETBCC_ITDIS_SHIFT   (5U)"

.SS "#define MCM_ETBCC_RLRQ(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RLRQ_SHIFT\fP)) & \fBMCM_ETBCC_RLRQ_MASK\fP)"

.SS "#define MCM_ETBCC_RLRQ_MASK   (0x8U)"

.SS "#define MCM_ETBCC_RLRQ_SHIFT   (3U)"

.SS "#define MCM_ETBCC_RSPT(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RSPT_SHIFT\fP)) & \fBMCM_ETBCC_RSPT_MASK\fP)"

.SS "#define MCM_ETBCC_RSPT_MASK   (0x6U)"

.SS "#define MCM_ETBCC_RSPT_SHIFT   (1U)"

.SS "#define MCM_ETBCNT_COUNTER(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCNT_COUNTER_SHIFT\fP)) & \fBMCM_ETBCNT_COUNTER_MASK\fP)"

.SS "#define MCM_ETBCNT_COUNTER_MASK   (0x7FFU)"

.SS "#define MCM_ETBCNT_COUNTER_SHIFT   (0U)"

.SS "#define MCM_ETBRL_RELOAD(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBRL_RELOAD_SHIFT\fP)) & \fBMCM_ETBRL_RELOAD_MASK\fP)"

.SS "#define MCM_ETBRL_RELOAD_MASK   (0x7FFU)"

.SS "#define MCM_ETBRL_RELOAD_SHIFT   (0U)"

.SS "#define MCM_IRQS   { \fBMCM_IRQn\fP }"
Interrupt vectors for the MCM peripheral type 
.SS "#define MCM_ISCR_DHREQ(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_DHREQ_SHIFT\fP)) & \fBMCM_ISCR_DHREQ_MASK\fP)"

.SS "#define MCM_ISCR_DHREQ_MASK   (0x8U)"

.SS "#define MCM_ISCR_DHREQ_SHIFT   (3U)"

.SS "#define MCM_ISCR_FDZC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZC_SHIFT\fP)) & \fBMCM_ISCR_FDZC_MASK\fP)"

.SS "#define MCM_ISCR_FDZC_MASK   (0x200U)"

.SS "#define MCM_ISCR_FDZC_SHIFT   (9U)"

.SS "#define MCM_ISCR_FDZCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZCE_SHIFT\fP)) & \fBMCM_ISCR_FDZCE_MASK\fP)"

.SS "#define MCM_ISCR_FDZCE_MASK   (0x2000000U)"

.SS "#define MCM_ISCR_FDZCE_SHIFT   (25U)"

.SS "#define MCM_ISCR_FIDC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDC_SHIFT\fP)) & \fBMCM_ISCR_FIDC_MASK\fP)"

.SS "#define MCM_ISCR_FIDC_MASK   (0x8000U)"

.SS "#define MCM_ISCR_FIDC_SHIFT   (15U)"

.SS "#define MCM_ISCR_FIDCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDCE_SHIFT\fP)) & \fBMCM_ISCR_FIDCE_MASK\fP)"

.SS "#define MCM_ISCR_FIDCE_MASK   (0x80000000U)"

.SS "#define MCM_ISCR_FIDCE_SHIFT   (31U)"

.SS "#define MCM_ISCR_FIOC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOC_SHIFT\fP)) & \fBMCM_ISCR_FIOC_MASK\fP)"

.SS "#define MCM_ISCR_FIOC_MASK   (0x100U)"

.SS "#define MCM_ISCR_FIOC_SHIFT   (8U)"

.SS "#define MCM_ISCR_FIOCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOCE_SHIFT\fP)) & \fBMCM_ISCR_FIOCE_MASK\fP)"

.SS "#define MCM_ISCR_FIOCE_MASK   (0x1000000U)"

.SS "#define MCM_ISCR_FIOCE_SHIFT   (24U)"

.SS "#define MCM_ISCR_FIXC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXC_SHIFT\fP)) & \fBMCM_ISCR_FIXC_MASK\fP)"

.SS "#define MCM_ISCR_FIXC_MASK   (0x1000U)"

.SS "#define MCM_ISCR_FIXC_SHIFT   (12U)"

.SS "#define MCM_ISCR_FIXCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXCE_SHIFT\fP)) & \fBMCM_ISCR_FIXCE_MASK\fP)"

.SS "#define MCM_ISCR_FIXCE_MASK   (0x10000000U)"

.SS "#define MCM_ISCR_FIXCE_SHIFT   (28U)"

.SS "#define MCM_ISCR_FOFC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFC_SHIFT\fP)) & \fBMCM_ISCR_FOFC_MASK\fP)"

.SS "#define MCM_ISCR_FOFC_MASK   (0x400U)"

.SS "#define MCM_ISCR_FOFC_SHIFT   (10U)"

.SS "#define MCM_ISCR_FOFCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFCE_SHIFT\fP)) & \fBMCM_ISCR_FOFCE_MASK\fP)"

.SS "#define MCM_ISCR_FOFCE_MASK   (0x4000000U)"

.SS "#define MCM_ISCR_FOFCE_SHIFT   (26U)"

.SS "#define MCM_ISCR_FUFC(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFC_SHIFT\fP)) & \fBMCM_ISCR_FUFC_MASK\fP)"

.SS "#define MCM_ISCR_FUFC_MASK   (0x800U)"

.SS "#define MCM_ISCR_FUFC_SHIFT   (11U)"

.SS "#define MCM_ISCR_FUFCE(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFCE_SHIFT\fP)) & \fBMCM_ISCR_FUFCE_MASK\fP)"

.SS "#define MCM_ISCR_FUFCE_MASK   (0x8000000U)"

.SS "#define MCM_ISCR_FUFCE_SHIFT   (27U)"

.SS "#define MCM_ISCR_IRQ(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_IRQ_SHIFT\fP)) & \fBMCM_ISCR_IRQ_MASK\fP)"

.SS "#define MCM_ISCR_IRQ_MASK   (0x2U)"

.SS "#define MCM_ISCR_IRQ_SHIFT   (1U)"

.SS "#define MCM_ISCR_NMI(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_NMI_SHIFT\fP)) & \fBMCM_ISCR_NMI_MASK\fP)"

.SS "#define MCM_ISCR_NMI_MASK   (0x4U)"

.SS "#define MCM_ISCR_NMI_SHIFT   (2U)"

.SS "#define MCM_PID_PID(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_PID_PID_SHIFT\fP)) & \fBMCM_PID_PID_MASK\fP)"

.SS "#define MCM_PID_PID_MASK   (0xFFU)"

.SS "#define MCM_PID_PID_SHIFT   (0U)"

.SS "#define MCM_PLAMC_AMC(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLAMC_AMC_SHIFT\fP)) & \fBMCM_PLAMC_AMC_MASK\fP)"

.SS "#define MCM_PLAMC_AMC_MASK   (0xFFU)"

.SS "#define MCM_PLAMC_AMC_SHIFT   (0U)"

.SS "#define MCM_PLASC_ASC(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLASC_ASC_SHIFT\fP)) & \fBMCM_PLASC_ASC_MASK\fP)"

.SS "#define MCM_PLASC_ASC_MASK   (0xFFU)"

.SS "#define MCM_PLASC_ASC_SHIFT   (0U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
