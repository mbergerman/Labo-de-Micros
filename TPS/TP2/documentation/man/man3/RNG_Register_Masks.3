.TH "RNG_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RNG_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRNG_BASE\fP   (0x40029000u)"
.br
.ti -1c
.RI "#define \fBRNG\fP   ((\fBRNG_Type\fP *)\fBRNG_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRNG_BASE_ADDRS\fP   { \fBRNG_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRNG_BASE_PTRS\fP   { \fBRNG\fP }"
.br
.ti -1c
.RI "#define \fBRNG_IRQS\fP   { \fBRNG_IRQn\fP }"
.br
.in -1c
.SS "CR - RNGA Control Register"

.in +1c
.ti -1c
.RI "#define \fBRNG_CR_GO_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_GO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_GO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_GO_SHIFT\fP)) & \fBRNG_CR_GO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_HA_SHIFT\fP)) & \fBRNG_CR_HA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_INTM_SHIFT\fP)) & \fBRNG_CR_INTM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_CLRI_SHIFT\fP)) & \fBRNG_CR_CLRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_SLP_SHIFT\fP)) & \fBRNG_CR_SLP_MASK\fP)"
.br
.in -1c
.SS "SR - RNGA Status Register"

.in +1c
.ti -1c
.RI "#define \fBRNG_SR_SECV_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SECV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SECV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SECV_SHIFT\fP)) & \fBRNG_SR_SECV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_LRS_SHIFT\fP)) & \fBRNG_SR_LRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ORU_SHIFT\fP)) & \fBRNG_SR_ORU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ERRI_SHIFT\fP)) & \fBRNG_SR_ERRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SLP_SHIFT\fP)) & \fBRNG_SR_SLP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_LVL_SHIFT\fP)) & \fBRNG_SR_OREG_LVL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_SIZE_SHIFT\fP)) & \fBRNG_SR_OREG_SIZE_MASK\fP)"
.br
.in -1c
.SS "ER - RNGA Entropy Register"

.in +1c
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_ER_EXT_ENT_SHIFT\fP)) & \fBRNG_ER_EXT_ENT_MASK\fP)"
.br
.in -1c
.SS "OR - RNGA Output Register"

.in +1c
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_OR_RANDOUT_SHIFT\fP)) & \fBRNG_OR_RANDOUT_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define RNG   ((\fBRNG_Type\fP *)\fBRNG_BASE\fP)"
Peripheral RNG base pointer 
.SS "#define RNG_BASE   (0x40029000u)"
Peripheral RNG base address 
.SS "#define RNG_BASE_ADDRS   { \fBRNG_BASE\fP }"
Array initializer of RNG peripheral base addresses 
.SS "#define RNG_BASE_PTRS   { \fBRNG\fP }"
Array initializer of RNG peripheral base pointers 
.SS "#define RNG_CR_CLRI(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_CLRI_SHIFT\fP)) & \fBRNG_CR_CLRI_MASK\fP)"

.SS "#define RNG_CR_CLRI_MASK   (0x8U)"

.SS "#define RNG_CR_CLRI_SHIFT   (3U)"

.SS "#define RNG_CR_GO(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_GO_SHIFT\fP)) & \fBRNG_CR_GO_MASK\fP)"

.SS "#define RNG_CR_GO_MASK   (0x1U)"

.SS "#define RNG_CR_GO_SHIFT   (0U)"

.SS "#define RNG_CR_HA(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_HA_SHIFT\fP)) & \fBRNG_CR_HA_MASK\fP)"

.SS "#define RNG_CR_HA_MASK   (0x2U)"

.SS "#define RNG_CR_HA_SHIFT   (1U)"

.SS "#define RNG_CR_INTM(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_INTM_SHIFT\fP)) & \fBRNG_CR_INTM_MASK\fP)"

.SS "#define RNG_CR_INTM_MASK   (0x4U)"

.SS "#define RNG_CR_INTM_SHIFT   (2U)"

.SS "#define RNG_CR_SLP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_SLP_SHIFT\fP)) & \fBRNG_CR_SLP_MASK\fP)"

.SS "#define RNG_CR_SLP_MASK   (0x10U)"

.SS "#define RNG_CR_SLP_SHIFT   (4U)"

.SS "#define RNG_ER_EXT_ENT(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_ER_EXT_ENT_SHIFT\fP)) & \fBRNG_ER_EXT_ENT_MASK\fP)"

.SS "#define RNG_ER_EXT_ENT_MASK   (0xFFFFFFFFU)"

.SS "#define RNG_ER_EXT_ENT_SHIFT   (0U)"

.SS "#define RNG_IRQS   { \fBRNG_IRQn\fP }"
Interrupt vectors for the RNG peripheral type 
.SS "#define RNG_OR_RANDOUT(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_OR_RANDOUT_SHIFT\fP)) & \fBRNG_OR_RANDOUT_MASK\fP)"

.SS "#define RNG_OR_RANDOUT_MASK   (0xFFFFFFFFU)"

.SS "#define RNG_OR_RANDOUT_SHIFT   (0U)"

.SS "#define RNG_SR_ERRI(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ERRI_SHIFT\fP)) & \fBRNG_SR_ERRI_MASK\fP)"

.SS "#define RNG_SR_ERRI_MASK   (0x8U)"

.SS "#define RNG_SR_ERRI_SHIFT   (3U)"

.SS "#define RNG_SR_LRS(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_LRS_SHIFT\fP)) & \fBRNG_SR_LRS_MASK\fP)"

.SS "#define RNG_SR_LRS_MASK   (0x2U)"

.SS "#define RNG_SR_LRS_SHIFT   (1U)"

.SS "#define RNG_SR_OREG_LVL(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_LVL_SHIFT\fP)) & \fBRNG_SR_OREG_LVL_MASK\fP)"

.SS "#define RNG_SR_OREG_LVL_MASK   (0xFF00U)"

.SS "#define RNG_SR_OREG_LVL_SHIFT   (8U)"

.SS "#define RNG_SR_OREG_SIZE(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_SIZE_SHIFT\fP)) & \fBRNG_SR_OREG_SIZE_MASK\fP)"

.SS "#define RNG_SR_OREG_SIZE_MASK   (0xFF0000U)"

.SS "#define RNG_SR_OREG_SIZE_SHIFT   (16U)"

.SS "#define RNG_SR_ORU(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ORU_SHIFT\fP)) & \fBRNG_SR_ORU_MASK\fP)"

.SS "#define RNG_SR_ORU_MASK   (0x4U)"

.SS "#define RNG_SR_ORU_SHIFT   (2U)"

.SS "#define RNG_SR_SECV(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SECV_SHIFT\fP)) & \fBRNG_SR_SECV_MASK\fP)"

.SS "#define RNG_SR_SECV_MASK   (0x1U)"

.SS "#define RNG_SR_SECV_SHIFT   (0U)"

.SS "#define RNG_SR_SLP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SLP_SHIFT\fP)) & \fBRNG_SR_SLP_MASK\fP)"

.SS "#define RNG_SR_SLP_MASK   (0x10U)"

.SS "#define RNG_SR_SLP_SHIFT   (4U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
