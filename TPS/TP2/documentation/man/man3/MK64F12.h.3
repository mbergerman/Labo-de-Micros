.TH "SDK/CMSIS/MK64F12.h" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SDK/CMSIS/MK64F12.h \- CMSIS Peripheral Access Layer for MK64F12\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'core_cm4\&.h'\fP
.br
\fC#include 'system_MK64F12\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBADC_Type\fP"
.br
.ti -1c
.RI "struct \fBAIPS_Type\fP"
.br
.ti -1c
.RI "struct \fBAXBS_Type\fP"
.br
.ti -1c
.RI "struct \fBCAN_Type\fP"
.br
.ti -1c
.RI "struct \fBCAU_Type\fP"
.br
.ti -1c
.RI "struct \fBCMP_Type\fP"
.br
.ti -1c
.RI "struct \fBCMT_Type\fP"
.br
.ti -1c
.RI "struct \fBCRC_Type\fP"
.br
.ti -1c
.RI "struct \fBDAC_Type\fP"
.br
.ti -1c
.RI "struct \fBDMA_Type\fP"
.br
.ti -1c
.RI "struct \fBDMAMUX_Type\fP"
.br
.ti -1c
.RI "struct \fBENET_Type\fP"
.br
.ti -1c
.RI "struct \fBEWM_Type\fP"
.br
.ti -1c
.RI "struct \fBFB_Type\fP"
.br
.ti -1c
.RI "struct \fBFMC_Type\fP"
.br
.ti -1c
.RI "struct \fBFTFE_Type\fP"
.br
.ti -1c
.RI "struct \fBFTM_Type\fP"
.br
.ti -1c
.RI "struct \fBGPIO_Type\fP"
.br
.ti -1c
.RI "struct \fBI2C_Type\fP"
.br
.ti -1c
.RI "struct \fBI2S_Type\fP"
.br
.ti -1c
.RI "struct \fBLLWU_Type\fP"
.br
.ti -1c
.RI "struct \fBLPTMR_Type\fP"
.br
.ti -1c
.RI "struct \fBMCG_Type\fP"
.br
.ti -1c
.RI "struct \fBMCM_Type\fP"
.br
.ti -1c
.RI "struct \fBNV_Type\fP"
.br
.ti -1c
.RI "struct \fBOSC_Type\fP"
.br
.ti -1c
.RI "struct \fBPDB_Type\fP"
.br
.ti -1c
.RI "struct \fBPIT_Type\fP"
.br
.ti -1c
.RI "struct \fBPMC_Type\fP"
.br
.ti -1c
.RI "struct \fBPORT_Type\fP"
.br
.ti -1c
.RI "struct \fBRCM_Type\fP"
.br
.ti -1c
.RI "struct \fBRFSYS_Type\fP"
.br
.ti -1c
.RI "struct \fBRFVBAT_Type\fP"
.br
.ti -1c
.RI "struct \fBRNG_Type\fP"
.br
.ti -1c
.RI "struct \fBRTC_Type\fP"
.br
.ti -1c
.RI "struct \fBSDHC_Type\fP"
.br
.ti -1c
.RI "struct \fBSIM_Type\fP"
.br
.ti -1c
.RI "struct \fBSMC_Type\fP"
.br
.ti -1c
.RI "struct \fBSPI_Type\fP"
.br
.ti -1c
.RI "struct \fBSYSMPU_Type\fP"
.br
.ti -1c
.RI "struct \fBUART_Type\fP"
.br
.ti -1c
.RI "struct \fBUSB_Type\fP"
.br
.ti -1c
.RI "struct \fBUSBDCD_Type\fP"
.br
.ti -1c
.RI "struct \fBVREF_Type\fP"
.br
.ti -1c
.RI "struct \fBWDOG_Type\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_MK64F12_H_\fP"
.br
.ti -1c
.RI "#define \fBMCU_MEM_MAP_VERSION\fP   0x0200U"
.br
.ti -1c
.RI "#define \fBMCU_MEM_MAP_VERSION_MINOR\fP   0x0009U"
.br
.ti -1c
.RI "#define \fBBITBAND_REGADDR\fP(Reg,  Bit)   (0x42000000u + (32u*((uint32_t)&(Reg) \- (uint32_t)0x40000000u)) + (4u*((uint32_t)(Bit))))"
.br
.RI "Macro to calculate address of an aliased word in the peripheral bitband area for a peripheral register and bit (bit band region 0x40000000 to 0x400FFFFF)\&. "
.ti -1c
.RI "#define \fBBITBAND_REG32\fP(Reg,  Bit)   (*((uint32_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"
.br
.RI "Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 32bit access allowed\&. "
.ti -1c
.RI "#define \fBBITBAND_REG\fP(Reg,  Bit)   (\fBBITBAND_REG32\fP((Reg),(Bit)))"
.br
.ti -1c
.RI "#define \fBBITBAND_REG16\fP(Reg,  Bit)   (*((uint16_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"
.br
.RI "Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 16bit access allowed\&. "
.ti -1c
.RI "#define \fBBITBAND_REG8\fP(Reg,  Bit)   (*((uint8_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"
.br
.RI "Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 8bit access allowed\&. "
.ti -1c
.RI "#define \fBNUMBER_OF_INT_VECTORS\fP   102"
.br
.ti -1c
.RI "#define \fB__MPU_PRESENT\fP   0"
.br
.ti -1c
.RI "#define \fB__NVIC_PRIO_BITS\fP   4"
.br
.ti -1c
.RI "#define \fB__Vendor_SysTickConfig\fP   0"
.br
.ti -1c
.RI "#define \fB__FPU_PRESENT\fP   1"
.br
.ti -1c
.RI "#define \fBADC0_BASE\fP   (0x4003B000u)"
.br
.ti -1c
.RI "#define \fBADC0\fP   ((\fBADC_Type\fP *)\fBADC0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBADC1_BASE\fP   (0x400BB000u)"
.br
.ti -1c
.RI "#define \fBADC1\fP   ((\fBADC_Type\fP *)\fBADC1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBADC_BASE_ADDRS\fP   { \fBADC0_BASE\fP, \fBADC1_BASE\fP }"
.br
.ti -1c
.RI "#define \fBADC_BASE_PTRS\fP   { \fBADC0\fP, \fBADC1\fP }"
.br
.ti -1c
.RI "#define \fBADC_IRQS\fP   { \fBADC0_IRQn\fP, \fBADC1_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBAIPS0_BASE\fP   (0x40000000u)"
.br
.ti -1c
.RI "#define \fBAIPS0\fP   ((\fBAIPS_Type\fP *)\fBAIPS0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBAIPS1_BASE\fP   (0x40080000u)"
.br
.ti -1c
.RI "#define \fBAIPS1\fP   ((\fBAIPS_Type\fP *)\fBAIPS1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_BASE_ADDRS\fP   { \fBAIPS0_BASE\fP, \fBAIPS1_BASE\fP }"
.br
.ti -1c
.RI "#define \fBAIPS_BASE_PTRS\fP   { \fBAIPS0\fP, \fBAIPS1\fP }"
.br
.ti -1c
.RI "#define \fBAXBS_BASE\fP   (0x40004000u)"
.br
.ti -1c
.RI "#define \fBAXBS\fP   ((\fBAXBS_Type\fP *)\fBAXBS_BASE\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_BASE_ADDRS\fP   { \fBAXBS_BASE\fP }"
.br
.ti -1c
.RI "#define \fBAXBS_BASE_PTRS\fP   { \fBAXBS\fP }"
.br
.ti -1c
.RI "#define \fBCAN0_BASE\fP   (0x40024000u)"
.br
.ti -1c
.RI "#define \fBCAN0\fP   ((\fBCAN_Type\fP *)\fBCAN0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCAN_BASE_ADDRS\fP   { \fBCAN0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCAN_BASE_PTRS\fP   { \fBCAN0\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Rx_Warning_IRQS\fP   { \fBCAN0_Rx_Warning_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Tx_Warning_IRQS\fP   { \fBCAN0_Tx_Warning_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Wake_Up_IRQS\fP   { \fBCAN0_Wake_Up_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Error_IRQS\fP   { \fBCAN0_Error_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_Bus_Off_IRQS\fP   { \fBCAN0_Bus_Off_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAN_ORed_Message_buffer_IRQS\fP   { \fBCAN0_ORed_Message_buffer_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCAU_BASE\fP   (0xE0081000u)"
.br
.ti -1c
.RI "#define \fBCAU\fP   ((\fBCAU_Type\fP *)\fBCAU_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCAU_BASE_ADDRS\fP   { \fBCAU_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCAU_BASE_PTRS\fP   { \fBCAU\fP }"
.br
.ti -1c
.RI "#define \fBCMP0_BASE\fP   (0x40073000u)"
.br
.ti -1c
.RI "#define \fBCMP0\fP   ((\fBCMP_Type\fP *)\fBCMP0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP1_BASE\fP   (0x40073008u)"
.br
.ti -1c
.RI "#define \fBCMP1\fP   ((\fBCMP_Type\fP *)\fBCMP1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP2_BASE\fP   (0x40073010u)"
.br
.ti -1c
.RI "#define \fBCMP2\fP   ((\fBCMP_Type\fP *)\fBCMP2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP_BASE_ADDRS\fP   { \fBCMP0_BASE\fP, \fBCMP1_BASE\fP, \fBCMP2_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCMP_BASE_PTRS\fP   { \fBCMP0\fP, \fBCMP1\fP, \fBCMP2\fP }"
.br
.ti -1c
.RI "#define \fBCMP_IRQS\fP   { \fBCMP0_IRQn\fP, \fBCMP1_IRQn\fP, \fBCMP2_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCMT_BASE\fP   (0x40062000u)"
.br
.ti -1c
.RI "#define \fBCMT\fP   ((\fBCMT_Type\fP *)\fBCMT_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMT_BASE_ADDRS\fP   { \fBCMT_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCMT_BASE_PTRS\fP   { \fBCMT\fP }"
.br
.ti -1c
.RI "#define \fBCMT_IRQS\fP   { \fBCMT_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBCRC_BASE\fP   (0x40032000u)"
.br
.ti -1c
.RI "#define \fBCRC0\fP   ((\fBCRC_Type\fP *)\fBCRC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCRC_BASE_ADDRS\fP   { \fBCRC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCRC_BASE_PTRS\fP   { \fBCRC0\fP }"
.br
.ti -1c
.RI "#define \fBDAC0_BASE\fP   (0x400CC000u)"
.br
.ti -1c
.RI "#define \fBDAC0\fP   ((\fBDAC_Type\fP *)\fBDAC0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBDAC1_BASE\fP   (0x400CD000u)"
.br
.ti -1c
.RI "#define \fBDAC1\fP   ((\fBDAC_Type\fP *)\fBDAC1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBDAC_BASE_ADDRS\fP   { \fBDAC0_BASE\fP, \fBDAC1_BASE\fP }"
.br
.ti -1c
.RI "#define \fBDAC_BASE_PTRS\fP   { \fBDAC0\fP, \fBDAC1\fP }"
.br
.ti -1c
.RI "#define \fBDAC_IRQS\fP   { \fBDAC0_IRQn\fP, \fBDAC1_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBDMA_BASE\fP   (0x40008000u)"
.br
.ti -1c
.RI "#define \fBDMA0\fP   ((\fBDMA_Type\fP *)\fBDMA_BASE\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BASE_ADDRS\fP   { \fBDMA_BASE\fP }"
.br
.ti -1c
.RI "#define \fBDMA_BASE_PTRS\fP   { \fBDMA0\fP }"
.br
.ti -1c
.RI "#define \fBDMA_CHN_IRQS\fP   { { \fBDMA0_IRQn\fP, \fBDMA1_IRQn\fP, \fBDMA2_IRQn\fP, \fBDMA3_IRQn\fP, \fBDMA4_IRQn\fP, \fBDMA5_IRQn\fP, \fBDMA6_IRQn\fP, \fBDMA7_IRQn\fP, \fBDMA8_IRQn\fP, \fBDMA9_IRQn\fP, \fBDMA10_IRQn\fP, \fBDMA11_IRQn\fP, \fBDMA12_IRQn\fP, \fBDMA13_IRQn\fP, \fBDMA14_IRQn\fP, \fBDMA15_IRQn\fP } }"
.br
.ti -1c
.RI "#define \fBDMA_ERROR_IRQS\fP   { \fBDMA_Error_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBDMAMUX_BASE\fP   (0x40021000u)"
.br
.ti -1c
.RI "#define \fBDMAMUX\fP   ((\fBDMAMUX_Type\fP *)\fBDMAMUX_BASE\fP)"
.br
.ti -1c
.RI "#define \fBDMAMUX_BASE_ADDRS\fP   { \fBDMAMUX_BASE\fP }"
.br
.ti -1c
.RI "#define \fBDMAMUX_BASE_PTRS\fP   { \fBDMAMUX\fP }"
.br
.ti -1c
.RI "#define \fBENET_BASE\fP   (0x400C0000u)"
.br
.ti -1c
.RI "#define \fBENET\fP   ((\fBENET_Type\fP *)\fBENET_BASE\fP)"
.br
.ti -1c
.RI "#define \fBENET_BASE_ADDRS\fP   { \fBENET_BASE\fP }"
.br
.ti -1c
.RI "#define \fBENET_BASE_PTRS\fP   { \fBENET\fP }"
.br
.ti -1c
.RI "#define \fBENET_Transmit_IRQS\fP   { \fBENET_Transmit_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_Receive_IRQS\fP   { \fBENET_Receive_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_Error_IRQS\fP   { \fBENET_Error_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_1588_Timer_IRQS\fP   { \fBENET_1588_Timer_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBENET_BUFF_ALIGNMENT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBEWM_BASE\fP   (0x40061000u)"
.br
.ti -1c
.RI "#define \fBEWM\fP   ((\fBEWM_Type\fP *)\fBEWM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBEWM_BASE_ADDRS\fP   { \fBEWM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBEWM_BASE_PTRS\fP   { \fBEWM\fP }"
.br
.ti -1c
.RI "#define \fBEWM_IRQS\fP   { \fBWDOG_EWM_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBFB_BASE\fP   (0x4000C000u)"
.br
.ti -1c
.RI "#define \fBFB\fP   ((\fBFB_Type\fP *)\fBFB_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFB_BASE_ADDRS\fP   { \fBFB_BASE\fP }"
.br
.ti -1c
.RI "#define \fBFB_BASE_PTRS\fP   { \fBFB\fP }"
.br
.ti -1c
.RI "#define \fBFMC_BASE\fP   (0x4001F000u)"
.br
.ti -1c
.RI "#define \fBFMC\fP   ((\fBFMC_Type\fP *)\fBFMC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFMC_BASE_ADDRS\fP   { \fBFMC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBFMC_BASE_PTRS\fP   { \fBFMC\fP }"
.br
.ti -1c
.RI "#define \fBFTFE_BASE\fP   (0x40020000u)"
.br
.ti -1c
.RI "#define \fBFTFE\fP   ((\fBFTFE_Type\fP *)\fBFTFE_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_BASE_ADDRS\fP   { \fBFTFE_BASE\fP }"
.br
.ti -1c
.RI "#define \fBFTFE_BASE_PTRS\fP   { \fBFTFE\fP }"
.br
.ti -1c
.RI "#define \fBFTFE_COMMAND_COMPLETE_IRQS\fP   { \fBFTFE_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBFTFE_READ_COLLISION_IRQS\fP   { \fBRead_Collision_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBFTM0_BASE\fP   (0x40038000u)"
.br
.ti -1c
.RI "#define \fBFTM0\fP   ((\fBFTM_Type\fP *)\fBFTM0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFTM1_BASE\fP   (0x40039000u)"
.br
.ti -1c
.RI "#define \fBFTM1\fP   ((\fBFTM_Type\fP *)\fBFTM1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFTM2_BASE\fP   (0x4003A000u)"
.br
.ti -1c
.RI "#define \fBFTM2\fP   ((\fBFTM_Type\fP *)\fBFTM2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFTM3_BASE\fP   (0x400B9000u)"
.br
.ti -1c
.RI "#define \fBFTM3\fP   ((\fBFTM_Type\fP *)\fBFTM3_BASE\fP)"
.br
.ti -1c
.RI "#define \fBFTM_BASE_ADDRS\fP   { \fBFTM0_BASE\fP, \fBFTM1_BASE\fP, \fBFTM2_BASE\fP, \fBFTM3_BASE\fP }"
.br
.ti -1c
.RI "#define \fBFTM_BASE_PTRS\fP   { \fBFTM0\fP, \fBFTM1\fP, \fBFTM2\fP, \fBFTM3\fP }"
.br
.ti -1c
.RI "#define \fBFTM_IRQS\fP   { \fBFTM0_IRQn\fP, \fBFTM1_IRQn\fP, \fBFTM2_IRQn\fP, \fBFTM3_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBGPIOA_BASE\fP   (0x400FF000u)"
.br
.ti -1c
.RI "#define \fBGPIOA\fP   ((\fBGPIO_Type\fP *)\fBGPIOA_BASE\fP)"
.br
.ti -1c
.RI "#define \fBGPIOB_BASE\fP   (0x400FF040u)"
.br
.ti -1c
.RI "#define \fBGPIOB\fP   ((\fBGPIO_Type\fP *)\fBGPIOB_BASE\fP)"
.br
.ti -1c
.RI "#define \fBGPIOC_BASE\fP   (0x400FF080u)"
.br
.ti -1c
.RI "#define \fBGPIOC\fP   ((\fBGPIO_Type\fP *)\fBGPIOC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBGPIOD_BASE\fP   (0x400FF0C0u)"
.br
.ti -1c
.RI "#define \fBGPIOD\fP   ((\fBGPIO_Type\fP *)\fBGPIOD_BASE\fP)"
.br
.ti -1c
.RI "#define \fBGPIOE_BASE\fP   (0x400FF100u)"
.br
.ti -1c
.RI "#define \fBGPIOE\fP   ((\fBGPIO_Type\fP *)\fBGPIOE_BASE\fP)"
.br
.ti -1c
.RI "#define \fBGPIO_BASE_ADDRS\fP   { \fBGPIOA_BASE\fP, \fBGPIOB_BASE\fP, \fBGPIOC_BASE\fP, \fBGPIOD_BASE\fP, \fBGPIOE_BASE\fP }"
.br
.ti -1c
.RI "#define \fBGPIO_BASE_PTRS\fP   { \fBGPIOA\fP, \fBGPIOB\fP, \fBGPIOC\fP, \fBGPIOD\fP, \fBGPIOE\fP }"
.br
.ti -1c
.RI "#define \fBI2C0_BASE\fP   (0x40066000u)"
.br
.ti -1c
.RI "#define \fBI2C0\fP   ((\fBI2C_Type\fP *)\fBI2C0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBI2C1_BASE\fP   (0x40067000u)"
.br
.ti -1c
.RI "#define \fBI2C1\fP   ((\fBI2C_Type\fP *)\fBI2C1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBI2C2_BASE\fP   (0x400E6000u)"
.br
.ti -1c
.RI "#define \fBI2C2\fP   ((\fBI2C_Type\fP *)\fBI2C2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBI2C_BASE_ADDRS\fP   { \fBI2C0_BASE\fP, \fBI2C1_BASE\fP, \fBI2C2_BASE\fP }"
.br
.ti -1c
.RI "#define \fBI2C_BASE_PTRS\fP   { \fBI2C0\fP, \fBI2C1\fP, \fBI2C2\fP }"
.br
.ti -1c
.RI "#define \fBI2C_IRQS\fP   { \fBI2C0_IRQn\fP, \fBI2C1_IRQn\fP, \fBI2C2_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBI2S0_BASE\fP   (0x4002F000u)"
.br
.ti -1c
.RI "#define \fBI2S0\fP   ((\fBI2S_Type\fP *)\fBI2S0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBI2S_BASE_ADDRS\fP   { \fBI2S0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBI2S_BASE_PTRS\fP   { \fBI2S0\fP }"
.br
.ti -1c
.RI "#define \fBI2S_RX_IRQS\fP   { \fBI2S0_Rx_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBI2S_TX_IRQS\fP   { \fBI2S0_Tx_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBLLWU_BASE\fP   (0x4007C000u)"
.br
.ti -1c
.RI "#define \fBLLWU\fP   ((\fBLLWU_Type\fP *)\fBLLWU_BASE\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_BASE_ADDRS\fP   { \fBLLWU_BASE\fP }"
.br
.ti -1c
.RI "#define \fBLLWU_BASE_PTRS\fP   { \fBLLWU\fP }"
.br
.ti -1c
.RI "#define \fBLLWU_IRQS\fP   { \fBLLWU_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBLPTMR0_BASE\fP   (0x40040000u)"
.br
.ti -1c
.RI "#define \fBLPTMR0\fP   ((\fBLPTMR_Type\fP *)\fBLPTMR0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_BASE_ADDRS\fP   { \fBLPTMR0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBLPTMR_BASE_PTRS\fP   { \fBLPTMR0\fP }"
.br
.ti -1c
.RI "#define \fBLPTMR_IRQS\fP   { \fBLPTMR0_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBMCG_BASE\fP   (0x40064000u)"
.br
.ti -1c
.RI "#define \fBMCG\fP   ((\fBMCG_Type\fP *)\fBMCG_BASE\fP)"
.br
.ti -1c
.RI "#define \fBMCG_BASE_ADDRS\fP   { \fBMCG_BASE\fP }"
.br
.ti -1c
.RI "#define \fBMCG_BASE_PTRS\fP   { \fBMCG\fP }"
.br
.ti -1c
.RI "#define \fBMCM_BASE\fP   (0xE0080000u)"
.br
.ti -1c
.RI "#define \fBMCM\fP   ((\fBMCM_Type\fP *)\fBMCM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBMCM_BASE_ADDRS\fP   { \fBMCM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBMCM_BASE_PTRS\fP   { \fBMCM\fP }"
.br
.ti -1c
.RI "#define \fBMCM_IRQS\fP   { \fBMCM_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBFTFE_FlashConfig_BASE\fP   (0x400u)"
.br
.ti -1c
.RI "#define \fBFTFE_FlashConfig\fP   ((\fBNV_Type\fP *)\fBFTFE_FlashConfig_BASE\fP)"
.br
.ti -1c
.RI "#define \fBNV_BASE_ADDRS\fP   { \fBFTFE_FlashConfig_BASE\fP }"
.br
.ti -1c
.RI "#define \fBNV_BASE_PTRS\fP   { \fBFTFE_FlashConfig\fP }"
.br
.ti -1c
.RI "#define \fBOSC_BASE\fP   (0x40065000u)"
.br
.ti -1c
.RI "#define \fBOSC\fP   ((\fBOSC_Type\fP *)\fBOSC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBOSC_BASE_ADDRS\fP   { \fBOSC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBOSC_BASE_PTRS\fP   { \fBOSC\fP }"
.br
.ti -1c
.RI "#define \fBPDB0_BASE\fP   (0x40036000u)"
.br
.ti -1c
.RI "#define \fBPDB0\fP   ((\fBPDB_Type\fP *)\fBPDB0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPDB_BASE_ADDRS\fP   { \fBPDB0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBPDB_BASE_PTRS\fP   { \fBPDB0\fP }"
.br
.ti -1c
.RI "#define \fBPDB_IRQS\fP   { \fBPDB0_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBPIT_BASE\fP   (0x40037000u)"
.br
.ti -1c
.RI "#define \fBPIT\fP   ((\fBPIT_Type\fP *)\fBPIT_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPIT_BASE_ADDRS\fP   { \fBPIT_BASE\fP }"
.br
.ti -1c
.RI "#define \fBPIT_BASE_PTRS\fP   { \fBPIT\fP }"
.br
.ti -1c
.RI "#define \fBPIT_IRQS\fP   { { \fBPIT0_IRQn\fP, \fBPIT1_IRQn\fP, \fBPIT2_IRQn\fP, \fBPIT3_IRQn\fP } }"
.br
.ti -1c
.RI "#define \fBPMC_BASE\fP   (0x4007D000u)"
.br
.ti -1c
.RI "#define \fBPMC\fP   ((\fBPMC_Type\fP *)\fBPMC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPMC_BASE_ADDRS\fP   { \fBPMC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBPMC_BASE_PTRS\fP   { \fBPMC\fP }"
.br
.ti -1c
.RI "#define \fBPMC_IRQS\fP   { \fBLVD_LVW_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBPORTA_BASE\fP   (0x40049000u)"
.br
.ti -1c
.RI "#define \fBPORTA\fP   ((\fBPORT_Type\fP *)\fBPORTA_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPORTB_BASE\fP   (0x4004A000u)"
.br
.ti -1c
.RI "#define \fBPORTB\fP   ((\fBPORT_Type\fP *)\fBPORTB_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPORTC_BASE\fP   (0x4004B000u)"
.br
.ti -1c
.RI "#define \fBPORTC\fP   ((\fBPORT_Type\fP *)\fBPORTC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPORTD_BASE\fP   (0x4004C000u)"
.br
.ti -1c
.RI "#define \fBPORTD\fP   ((\fBPORT_Type\fP *)\fBPORTD_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPORTE_BASE\fP   (0x4004D000u)"
.br
.ti -1c
.RI "#define \fBPORTE\fP   ((\fBPORT_Type\fP *)\fBPORTE_BASE\fP)"
.br
.ti -1c
.RI "#define \fBPORT_BASE_ADDRS\fP   { \fBPORTA_BASE\fP, \fBPORTB_BASE\fP, \fBPORTC_BASE\fP, \fBPORTD_BASE\fP, \fBPORTE_BASE\fP }"
.br
.ti -1c
.RI "#define \fBPORT_BASE_PTRS\fP   { \fBPORTA\fP, \fBPORTB\fP, \fBPORTC\fP, \fBPORTD\fP, \fBPORTE\fP }"
.br
.ti -1c
.RI "#define \fBPORT_IRQS\fP   { \fBPORTA_IRQn\fP, \fBPORTB_IRQn\fP, \fBPORTC_IRQn\fP, \fBPORTD_IRQn\fP, \fBPORTE_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBRCM_BASE\fP   (0x4007F000u)"
.br
.ti -1c
.RI "#define \fBRCM\fP   ((\fBRCM_Type\fP *)\fBRCM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRCM_BASE_ADDRS\fP   { \fBRCM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRCM_BASE_PTRS\fP   { \fBRCM\fP }"
.br
.ti -1c
.RI "#define \fBRFSYS_BASE\fP   (0x40041000u)"
.br
.ti -1c
.RI "#define \fBRFSYS\fP   ((\fBRFSYS_Type\fP *)\fBRFSYS_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRFSYS_BASE_ADDRS\fP   { \fBRFSYS_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRFSYS_BASE_PTRS\fP   { \fBRFSYS\fP }"
.br
.ti -1c
.RI "#define \fBRFVBAT_BASE\fP   (0x4003E000u)"
.br
.ti -1c
.RI "#define \fBRFVBAT\fP   ((\fBRFVBAT_Type\fP *)\fBRFVBAT_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRFVBAT_BASE_ADDRS\fP   { \fBRFVBAT_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRFVBAT_BASE_PTRS\fP   { \fBRFVBAT\fP }"
.br
.ti -1c
.RI "#define \fBRNG_BASE\fP   (0x40029000u)"
.br
.ti -1c
.RI "#define \fBRNG\fP   ((\fBRNG_Type\fP *)\fBRNG_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRNG_BASE_ADDRS\fP   { \fBRNG_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRNG_BASE_PTRS\fP   { \fBRNG\fP }"
.br
.ti -1c
.RI "#define \fBRNG_IRQS\fP   { \fBRNG_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBRTC_BASE\fP   (0x4003D000u)"
.br
.ti -1c
.RI "#define \fBRTC\fP   ((\fBRTC_Type\fP *)\fBRTC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBRTC_BASE_ADDRS\fP   { \fBRTC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBRTC_BASE_PTRS\fP   { \fBRTC\fP }"
.br
.ti -1c
.RI "#define \fBRTC_IRQS\fP   { \fBRTC_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBRTC_SECONDS_IRQS\fP   { \fBRTC_Seconds_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBSDHC_BASE\fP   (0x400B1000u)"
.br
.ti -1c
.RI "#define \fBSDHC\fP   ((\fBSDHC_Type\fP *)\fBSDHC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_BASE_ADDRS\fP   { \fBSDHC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBSDHC_BASE_PTRS\fP   { \fBSDHC\fP }"
.br
.ti -1c
.RI "#define \fBSDHC_IRQS\fP   { \fBSDHC_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBSIM_BASE\fP   (0x40047000u)"
.br
.ti -1c
.RI "#define \fBSIM\fP   ((\fBSIM_Type\fP *)\fBSIM_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSIM_BASE_ADDRS\fP   { \fBSIM_BASE\fP }"
.br
.ti -1c
.RI "#define \fBSIM_BASE_PTRS\fP   { \fBSIM\fP }"
.br
.ti -1c
.RI "#define \fBSMC_BASE\fP   (0x4007E000u)"
.br
.ti -1c
.RI "#define \fBSMC\fP   ((\fBSMC_Type\fP *)\fBSMC_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSMC_BASE_ADDRS\fP   { \fBSMC_BASE\fP }"
.br
.ti -1c
.RI "#define \fBSMC_BASE_PTRS\fP   { \fBSMC\fP }"
.br
.ti -1c
.RI "#define \fBSPI0_BASE\fP   (0x4002C000u)"
.br
.ti -1c
.RI "#define \fBSPI0\fP   ((\fBSPI_Type\fP *)\fBSPI0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSPI1_BASE\fP   (0x4002D000u)"
.br
.ti -1c
.RI "#define \fBSPI1\fP   ((\fBSPI_Type\fP *)\fBSPI1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSPI2_BASE\fP   (0x400AC000u)"
.br
.ti -1c
.RI "#define \fBSPI2\fP   ((\fBSPI_Type\fP *)\fBSPI2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSPI_BASE_ADDRS\fP   { \fBSPI0_BASE\fP, \fBSPI1_BASE\fP, \fBSPI2_BASE\fP }"
.br
.ti -1c
.RI "#define \fBSPI_BASE_PTRS\fP   { \fBSPI0\fP, \fBSPI1\fP, \fBSPI2\fP }"
.br
.ti -1c
.RI "#define \fBSPI_IRQS\fP   { \fBSPI0_IRQn\fP, \fBSPI1_IRQn\fP, \fBSPI2_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBSYSMPU_BASE\fP   (0x4000D000u)"
.br
.ti -1c
.RI "#define \fBSYSMPU\fP   ((\fBSYSMPU_Type\fP *)\fBSYSMPU_BASE\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_BASE_ADDRS\fP   { \fBSYSMPU_BASE\fP }"
.br
.ti -1c
.RI "#define \fBSYSMPU_BASE_PTRS\fP   { \fBSYSMPU\fP }"
.br
.ti -1c
.RI "#define \fBUART0_BASE\fP   (0x4006A000u)"
.br
.ti -1c
.RI "#define \fBUART0\fP   ((\fBUART_Type\fP *)\fBUART0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART1_BASE\fP   (0x4006B000u)"
.br
.ti -1c
.RI "#define \fBUART1\fP   ((\fBUART_Type\fP *)\fBUART1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART2_BASE\fP   (0x4006C000u)"
.br
.ti -1c
.RI "#define \fBUART2\fP   ((\fBUART_Type\fP *)\fBUART2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART3_BASE\fP   (0x4006D000u)"
.br
.ti -1c
.RI "#define \fBUART3\fP   ((\fBUART_Type\fP *)\fBUART3_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART4_BASE\fP   (0x400EA000u)"
.br
.ti -1c
.RI "#define \fBUART4\fP   ((\fBUART_Type\fP *)\fBUART4_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART5_BASE\fP   (0x400EB000u)"
.br
.ti -1c
.RI "#define \fBUART5\fP   ((\fBUART_Type\fP *)\fBUART5_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUART_BASE_ADDRS\fP   { \fBUART0_BASE\fP, \fBUART1_BASE\fP, \fBUART2_BASE\fP, \fBUART3_BASE\fP, \fBUART4_BASE\fP, \fBUART5_BASE\fP }"
.br
.ti -1c
.RI "#define \fBUART_BASE_PTRS\fP   { \fBUART0\fP, \fBUART1\fP, \fBUART2\fP, \fBUART3\fP, \fBUART4\fP, \fBUART5\fP }"
.br
.ti -1c
.RI "#define \fBUART_RX_TX_IRQS\fP   { \fBUART0_RX_TX_IRQn\fP, \fBUART1_RX_TX_IRQn\fP, \fBUART2_RX_TX_IRQn\fP, \fBUART3_RX_TX_IRQn\fP, \fBUART4_RX_TX_IRQn\fP, \fBUART5_RX_TX_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBUART_ERR_IRQS\fP   { \fBUART0_ERR_IRQn\fP, \fBUART1_ERR_IRQn\fP, \fBUART2_ERR_IRQn\fP, \fBUART3_ERR_IRQn\fP, \fBUART4_ERR_IRQn\fP, \fBUART5_ERR_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBUART_LON_IRQS\fP   { \fBUART0_LON_IRQn\fP, \fBNotAvail_IRQn\fP, \fBNotAvail_IRQn\fP, \fBNotAvail_IRQn\fP, \fBNotAvail_IRQn\fP, \fBNotAvail_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBUSB0_BASE\fP   (0x40072000u)"
.br
.ti -1c
.RI "#define \fBUSB0\fP   ((\fBUSB_Type\fP *)\fBUSB0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUSB_BASE_ADDRS\fP   { \fBUSB0_BASE\fP }"
.br
.ti -1c
.RI "#define \fBUSB_BASE_PTRS\fP   { \fBUSB0\fP }"
.br
.ti -1c
.RI "#define \fBUSB_IRQS\fP   { \fBUSB0_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBUSBDCD_BASE\fP   (0x40035000u)"
.br
.ti -1c
.RI "#define \fBUSBDCD\fP   ((\fBUSBDCD_Type\fP *)\fBUSBDCD_BASE\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_BASE_ADDRS\fP   { \fBUSBDCD_BASE\fP }"
.br
.ti -1c
.RI "#define \fBUSBDCD_BASE_PTRS\fP   { \fBUSBDCD\fP }"
.br
.ti -1c
.RI "#define \fBUSBDCD_IRQS\fP   { \fBUSBDCD_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBVREF_BASE\fP   (0x40074000u)"
.br
.ti -1c
.RI "#define \fBVREF\fP   ((\fBVREF_Type\fP *)\fBVREF_BASE\fP)"
.br
.ti -1c
.RI "#define \fBVREF_BASE_ADDRS\fP   { \fBVREF_BASE\fP }"
.br
.ti -1c
.RI "#define \fBVREF_BASE_PTRS\fP   { \fBVREF\fP }"
.br
.ti -1c
.RI "#define \fBWDOG_BASE\fP   (0x40052000u)"
.br
.ti -1c
.RI "#define \fBWDOG\fP   ((\fBWDOG_Type\fP *)\fBWDOG_BASE\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_BASE_ADDRS\fP   { \fBWDOG_BASE\fP }"
.br
.ti -1c
.RI "#define \fBWDOG_BASE_PTRS\fP   { \fBWDOG\fP }"
.br
.ti -1c
.RI "#define \fBWDOG_IRQS\fP   { \fBWDOG_EWM_IRQn\fP }"
.br
.ti -1c
.RI "#define \fBNXP_VAL2FLD\fP(field,  value)   (((value) << (field ## _SHIFT)) & (field ## _MASK))"
.br
.RI "Mask and left-shift a bit field value for use in a register bit range\&. "
.ti -1c
.RI "#define \fBNXP_FLD2VAL\fP(field,  value)   (((value) & (field ## _MASK)) >> (field ## _SHIFT))"
.br
.RI "Mask and right-shift a register value to extract a bit field value\&. "
.ti -1c
.RI "#define \fBENET_RMON_R_DROP_REG\fP(base)   ENET_IEEE_R_DROP_REG(base)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_FRAME_OK_REG\fP(base)   ENET_IEEE_R_FRAME_OK_REG(base)"
.br
.ti -1c
.RI "#define \fBMCG_C2_EREFS0_MASK\fP   \fBMCG_C2_EREFS_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_EREFS0_SHIFT\fP   \fBMCG_C2_EREFS_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_HGO0_MASK\fP   \fBMCG_C2_HGO_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_HGO0_SHIFT\fP   \fBMCG_C2_HGO_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE0_MASK\fP   \fBMCG_C2_RANGE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE0_SHIFT\fP   \fBMCG_C2_RANGE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE0\fP(x)   \fBMCG_C2_RANGE\fP(x)"
.br
.ti -1c
.RI "#define \fBMCM_ISR_REG\fP(base)   MCM_ISCR_REG(base)"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIOC_MASK\fP   \fBMCM_ISCR_FIOC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIOC_SHIFT\fP   \fBMCM_ISCR_FIOC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FDZC_MASK\fP   \fBMCM_ISCR_FDZC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FDZC_SHIFT\fP   \fBMCM_ISCR_FDZC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FOFC_MASK\fP   \fBMCM_ISCR_FOFC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FOFC_SHIFT\fP   \fBMCM_ISCR_FOFC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FUFC_MASK\fP   \fBMCM_ISCR_FUFC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FUFC_SHIFT\fP   \fBMCM_ISCR_FUFC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIXC_MASK\fP   \fBMCM_ISCR_FIXC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIXC_SHIFT\fP   \fBMCM_ISCR_FIXC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIDC_MASK\fP   \fBMCM_ISCR_FIDC_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIDC_SHIFT\fP   \fBMCM_ISCR_FIDC_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIOCE_MASK\fP   \fBMCM_ISCR_FIOCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIOCE_SHIFT\fP   \fBMCM_ISCR_FIOCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FDZCE_MASK\fP   \fBMCM_ISCR_FDZCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FDZCE_SHIFT\fP   \fBMCM_ISCR_FDZCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FOFCE_MASK\fP   \fBMCM_ISCR_FOFCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FOFCE_SHIFT\fP   \fBMCM_ISCR_FOFCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FUFCE_MASK\fP   \fBMCM_ISCR_FUFCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FUFCE_SHIFT\fP   \fBMCM_ISCR_FUFCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIXCE_MASK\fP   \fBMCM_ISCR_FIXCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIXCE_SHIFT\fP   \fBMCM_ISCR_FIXCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIDCE_MASK\fP   \fBMCM_ISCR_FIDCE_MASK\fP"
.br
.ti -1c
.RI "#define \fBMCM_ISR_FIDCE_SHIFT\fP   \fBMCM_ISCR_FIDCE_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBDSPI0\fP   \fBSPI0\fP"
.br
.ti -1c
.RI "#define \fBDSPI1\fP   \fBSPI1\fP"
.br
.ti -1c
.RI "#define \fBDSPI2\fP   \fBSPI2\fP"
.br
.ti -1c
.RI "#define \fBFLEXCAN0\fP   \fBCAN0\fP"
.br
.ti -1c
.RI "#define \fBPTA_BASE\fP   \fBGPIOA_BASE\fP"
.br
.ti -1c
.RI "#define \fBPTA\fP   \fBGPIOA\fP"
.br
.ti -1c
.RI "#define \fBPTB_BASE\fP   \fBGPIOB_BASE\fP"
.br
.ti -1c
.RI "#define \fBPTB\fP   \fBGPIOB\fP"
.br
.ti -1c
.RI "#define \fBPTC_BASE\fP   \fBGPIOC_BASE\fP"
.br
.ti -1c
.RI "#define \fBPTC\fP   \fBGPIOC\fP"
.br
.ti -1c
.RI "#define \fBPTD_BASE\fP   \fBGPIOD_BASE\fP"
.br
.ti -1c
.RI "#define \fBPTD\fP   \fBGPIOD\fP"
.br
.ti -1c
.RI "#define \fBPTE_BASE\fP   \fBGPIOE_BASE\fP"
.br
.ti -1c
.RI "#define \fBPTE\fP   \fBGPIOE\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE0_REG\fP(base)   UART_WP7816T0_REG(base)"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_REG\fP(base)   UART_WP7816T1_REG(base)"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE0_WI_MASK\fP   \fBUART_WP7816T0_WI_MASK\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE0_WI_SHIFT\fP   \fBUART_WP7816T0_WI_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE0_WI\fP(x)   \fBUART_WP7816T0_WI\fP(x)"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_BWI_MASK\fP   \fBUART_WP7816T1_BWI_MASK\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_BWI_SHIFT\fP   \fBUART_WP7816T1_BWI_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_BWI\fP(x)   \fBUART_WP7816T1_BWI\fP(x)"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_CWI_MASK\fP   \fBUART_WP7816T1_CWI_MASK\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_CWI_SHIFT\fP   \fBUART_WP7816T1_CWI_SHIFT\fP"
.br
.ti -1c
.RI "#define \fBUART_WP7816_T_TYPE1_CWI\fP(x)   \fBUART_WP7816T1_CWI\fP(x)"
.br
.ti -1c
.RI "#define \fBWatchdog_IRQn\fP   \fBWDOG_EWM_IRQn\fP"
.br
.ti -1c
.RI "#define \fBWatchdog_IRQHandler\fP   \fBWDOG_EWM_IRQHandler\fP"
.br
.ti -1c
.RI "#define \fBLPTimer_IRQn\fP   \fBLPTMR0_IRQn\fP"
.br
.ti -1c
.RI "#define \fBLPTimer_IRQHandler\fP   \fBLPTMR0_IRQHandler\fP"
.br
.ti -1c
.RI "#define \fBLLW_IRQn\fP   \fBLLWU_IRQn\fP"
.br
.ti -1c
.RI "#define \fBLLW_IRQHandler\fP   \fBLLWU_IRQHandler\fP"
.br
.ti -1c
.RI "#define \fBDMAMUX0\fP   \fBDMAMUX\fP"
.br
.ti -1c
.RI "#define \fBWDOG0\fP   \fBWDOG\fP"
.br
.ti -1c
.RI "#define \fBMCM0\fP   \fBMCM\fP"
.br
.ti -1c
.RI "#define \fBRTC0\fP   \fBRTC\fP"
.br
.in -1c
.PP
.RI "\fBSC1 - ADC Status and Control Registers 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_SC1_ADCH_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBADC_SC1_ADCH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_ADCH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC1_ADCH_SHIFT\fP)) & \fBADC_SC1_ADCH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC1_DIFF_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_DIFF_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_DIFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC1_DIFF_SHIFT\fP)) & \fBADC_SC1_DIFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC1_AIEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_AIEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_AIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC1_AIEN_SHIFT\fP)) & \fBADC_SC1_AIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC1_COCO_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_COCO_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBADC_SC1_COCO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC1_COCO_SHIFT\fP)) & \fBADC_SC1_COCO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC1_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCFG1 - ADC Configuration Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CFG1_ADICLK_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADICLK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADICLK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG1_ADICLK_SHIFT\fP)) & \fBADC_CFG1_ADICLK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_MODE_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_MODE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_MODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG1_MODE_SHIFT\fP)) & \fBADC_CFG1_MODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLSMP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLSMP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLSMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG1_ADLSMP_SHIFT\fP)) & \fBADC_CFG1_ADLSMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADIV_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADIV_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG1_ADIV_SHIFT\fP)) & \fBADC_CFG1_ADIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLPC_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLPC_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBADC_CFG1_ADLPC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG1_ADLPC_SHIFT\fP)) & \fBADC_CFG1_ADLPC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCFG2 - ADC Configuration Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CFG2_ADLSTS_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADLSTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADLSTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG2_ADLSTS_SHIFT\fP)) & \fBADC_CFG2_ADLSTS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADHSC_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADHSC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADHSC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG2_ADHSC_SHIFT\fP)) & \fBADC_CFG2_ADHSC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADACKEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADACKEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_ADACKEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG2_ADACKEN_SHIFT\fP)) & \fBADC_CFG2_ADACKEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_MUXSEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_MUXSEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBADC_CFG2_MUXSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CFG2_MUXSEL_SHIFT\fP)) & \fBADC_CFG2_MUXSEL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBR - ADC Data Result Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_R_D_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_R_D_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_R_D\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_R_D_SHIFT\fP)) & \fBADC_R_D_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_R_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCV1 - Compare Value Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CV1_CV_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_CV1_CV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CV1_CV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CV1_CV_SHIFT\fP)) & \fBADC_CV1_CV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCV2 - Compare Value Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CV2_CV_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_CV2_CV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CV2_CV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CV2_CV_SHIFT\fP)) & \fBADC_CV2_CV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC2 - Status and Control Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_SC2_REFSEL_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_REFSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_REFSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_REFSEL_SHIFT\fP)) & \fBADC_SC2_REFSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_DMAEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_DMAEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_DMAEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_DMAEN_SHIFT\fP)) & \fBADC_SC2_DMAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACREN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACREN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_ACREN_SHIFT\fP)) & \fBADC_SC2_ACREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFGT_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFGT_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFGT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_ACFGT_SHIFT\fP)) & \fBADC_SC2_ACFGT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ACFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_ACFE_SHIFT\fP)) & \fBADC_SC2_ACFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADTRG_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADTRG_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADTRG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_ADTRG_SHIFT\fP)) & \fBADC_SC2_ADTRG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADACT_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADACT_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBADC_SC2_ADACT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC2_ADACT_SHIFT\fP)) & \fBADC_SC2_ADACT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC3 - Status and Control Register 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_SC3_AVGS_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_AVGS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_AVGS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC3_AVGS_SHIFT\fP)) & \fBADC_SC3_AVGS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC3_AVGE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_AVGE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_AVGE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC3_AVGE_SHIFT\fP)) & \fBADC_SC3_AVGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC3_ADCO_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_ADCO_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_ADCO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC3_ADCO_SHIFT\fP)) & \fBADC_SC3_ADCO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CALF_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CALF_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CALF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC3_CALF_SHIFT\fP)) & \fBADC_SC3_CALF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CAL_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CAL_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBADC_SC3_CAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_SC3_CAL_SHIFT\fP)) & \fBADC_SC3_CAL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOFS - ADC Offset Correction Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_OFS_OFS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_OFS_OFS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_OFS_OFS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_OFS_OFS_SHIFT\fP)) & \fBADC_OFS_OFS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPG - ADC Plus-Side Gain Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_PG_PG_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_PG_PG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_PG_PG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_PG_PG_SHIFT\fP)) & \fBADC_PG_PG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMG - ADC Minus-Side Gain Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_MG_MG_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBADC_MG_MG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_MG_MG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_MG_MG_SHIFT\fP)) & \fBADC_MG_MG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLPD - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLPD_CLPD_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLPD_CLPD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLPD_CLPD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLPD_CLPD_SHIFT\fP)) & \fBADC_CLPD_CLPD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLPS - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLPS_CLPS_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLPS_CLPS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLPS_CLPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLPS_CLPS_SHIFT\fP)) & \fBADC_CLPS_CLPS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLP4 - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLP4_CLP4_MASK\fP   (0x3FFU)"
.br
.ti -1c
.RI "#define \fBADC_CLP4_CLP4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLP4_CLP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLP4_CLP4_SHIFT\fP)) & \fBADC_CLP4_CLP4_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLP3 - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLP3_CLP3_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBADC_CLP3_CLP3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLP3_CLP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLP3_CLP3_SHIFT\fP)) & \fBADC_CLP3_CLP3_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLP2 - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLP2_CLP2_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBADC_CLP2_CLP2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLP2_CLP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLP2_CLP2_SHIFT\fP)) & \fBADC_CLP2_CLP2_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLP1 - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLP1_CLP1_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBADC_CLP1_CLP1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLP1_CLP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLP1_CLP1_SHIFT\fP)) & \fBADC_CLP1_CLP1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLP0 - ADC Plus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLP0_CLP0_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLP0_CLP0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLP0_CLP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLP0_CLP0_SHIFT\fP)) & \fBADC_CLP0_CLP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLMD - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLMD_CLMD_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLMD_CLMD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLMD_CLMD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLMD_CLMD_SHIFT\fP)) & \fBADC_CLMD_CLMD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLMS - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLMS_CLMS_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLMS_CLMS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLMS_CLMS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLMS_CLMS_SHIFT\fP)) & \fBADC_CLMS_CLMS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLM4 - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLM4_CLM4_MASK\fP   (0x3FFU)"
.br
.ti -1c
.RI "#define \fBADC_CLM4_CLM4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLM4_CLM4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLM4_CLM4_SHIFT\fP)) & \fBADC_CLM4_CLM4_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLM3 - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLM3_CLM3_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBADC_CLM3_CLM3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLM3_CLM3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLM3_CLM3_SHIFT\fP)) & \fBADC_CLM3_CLM3_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLM2 - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLM2_CLM2_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBADC_CLM2_CLM2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLM2_CLM2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLM2_CLM2_SHIFT\fP)) & \fBADC_CLM2_CLM2_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLM1 - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLM1_CLM1_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBADC_CLM1_CLM1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLM1_CLM1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLM1_CLM1_SHIFT\fP)) & \fBADC_CLM1_CLM1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLM0 - ADC Minus-Side General Calibration Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBADC_CLM0_CLM0_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBADC_CLM0_CLM0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBADC_CLM0_CLM0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBADC_CLM0_CLM0_SHIFT\fP)) & \fBADC_CLM0_CLM0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMPRA - Master Privilege Register A\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL5_SHIFT\fP)) & \fBAIPS_MPRA_MPL5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW5_SHIFT\fP)) & \fBAIPS_MPRA_MTW5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR5_SHIFT\fP)) & \fBAIPS_MPRA_MTR5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL4_SHIFT\fP)) & \fBAIPS_MPRA_MPL4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW4_SHIFT\fP)) & \fBAIPS_MPRA_MTW4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR4_SHIFT\fP)) & \fBAIPS_MPRA_MTR4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL3_SHIFT\fP)) & \fBAIPS_MPRA_MPL3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW3_SHIFT\fP)) & \fBAIPS_MPRA_MTW3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR3_SHIFT\fP)) & \fBAIPS_MPRA_MTR3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL2_SHIFT\fP)) & \fBAIPS_MPRA_MPL2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW2_SHIFT\fP)) & \fBAIPS_MPRA_MTW2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR2_SHIFT\fP)) & \fBAIPS_MPRA_MTR2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL1_SHIFT\fP)) & \fBAIPS_MPRA_MPL1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW1_SHIFT\fP)) & \fBAIPS_MPRA_MTW1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR1_SHIFT\fP)) & \fBAIPS_MPRA_MTR1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MPL0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MPL0_SHIFT\fP)) & \fBAIPS_MPRA_MPL0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTW0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTW0_SHIFT\fP)) & \fBAIPS_MPRA_MTW0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_MPRA_MTR0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_MPRA_MTR0_SHIFT\fP)) & \fBAIPS_MPRA_MTR0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRA - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRA_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP7_SHIFT\fP)) & \fBAIPS_PACRA_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP7_SHIFT\fP)) & \fBAIPS_PACRA_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP7_SHIFT\fP)) & \fBAIPS_PACRA_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP6_SHIFT\fP)) & \fBAIPS_PACRA_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP6_SHIFT\fP)) & \fBAIPS_PACRA_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP6_SHIFT\fP)) & \fBAIPS_PACRA_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP5_SHIFT\fP)) & \fBAIPS_PACRA_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP5_SHIFT\fP)) & \fBAIPS_PACRA_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP5_SHIFT\fP)) & \fBAIPS_PACRA_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP4_SHIFT\fP)) & \fBAIPS_PACRA_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP4_SHIFT\fP)) & \fBAIPS_PACRA_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP4_SHIFT\fP)) & \fBAIPS_PACRA_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP3_SHIFT\fP)) & \fBAIPS_PACRA_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP3_SHIFT\fP)) & \fBAIPS_PACRA_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP3_SHIFT\fP)) & \fBAIPS_PACRA_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP2_SHIFT\fP)) & \fBAIPS_PACRA_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP2_SHIFT\fP)) & \fBAIPS_PACRA_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP2_SHIFT\fP)) & \fBAIPS_PACRA_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP1_SHIFT\fP)) & \fBAIPS_PACRA_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP1_SHIFT\fP)) & \fBAIPS_PACRA_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP1_SHIFT\fP)) & \fBAIPS_PACRA_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_TP0_SHIFT\fP)) & \fBAIPS_PACRA_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_WP0_SHIFT\fP)) & \fBAIPS_PACRA_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRA_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRA_SP0_SHIFT\fP)) & \fBAIPS_PACRA_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRB - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRB_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP7_SHIFT\fP)) & \fBAIPS_PACRB_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP7_SHIFT\fP)) & \fBAIPS_PACRB_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP7_SHIFT\fP)) & \fBAIPS_PACRB_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP6_SHIFT\fP)) & \fBAIPS_PACRB_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP6_SHIFT\fP)) & \fBAIPS_PACRB_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP6_SHIFT\fP)) & \fBAIPS_PACRB_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP5_SHIFT\fP)) & \fBAIPS_PACRB_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP5_SHIFT\fP)) & \fBAIPS_PACRB_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP5_SHIFT\fP)) & \fBAIPS_PACRB_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP4_SHIFT\fP)) & \fBAIPS_PACRB_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP4_SHIFT\fP)) & \fBAIPS_PACRB_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP4_SHIFT\fP)) & \fBAIPS_PACRB_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP3_SHIFT\fP)) & \fBAIPS_PACRB_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP3_SHIFT\fP)) & \fBAIPS_PACRB_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP3_SHIFT\fP)) & \fBAIPS_PACRB_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP2_SHIFT\fP)) & \fBAIPS_PACRB_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP2_SHIFT\fP)) & \fBAIPS_PACRB_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP2_SHIFT\fP)) & \fBAIPS_PACRB_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP1_SHIFT\fP)) & \fBAIPS_PACRB_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP1_SHIFT\fP)) & \fBAIPS_PACRB_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP1_SHIFT\fP)) & \fBAIPS_PACRB_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_TP0_SHIFT\fP)) & \fBAIPS_PACRB_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_WP0_SHIFT\fP)) & \fBAIPS_PACRB_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRB_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRB_SP0_SHIFT\fP)) & \fBAIPS_PACRB_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRC - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRC_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP7_SHIFT\fP)) & \fBAIPS_PACRC_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP7_SHIFT\fP)) & \fBAIPS_PACRC_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP7_SHIFT\fP)) & \fBAIPS_PACRC_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP6_SHIFT\fP)) & \fBAIPS_PACRC_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP6_SHIFT\fP)) & \fBAIPS_PACRC_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP6_SHIFT\fP)) & \fBAIPS_PACRC_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP5_SHIFT\fP)) & \fBAIPS_PACRC_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP5_SHIFT\fP)) & \fBAIPS_PACRC_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP5_SHIFT\fP)) & \fBAIPS_PACRC_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP4_SHIFT\fP)) & \fBAIPS_PACRC_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP4_SHIFT\fP)) & \fBAIPS_PACRC_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP4_SHIFT\fP)) & \fBAIPS_PACRC_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP3_SHIFT\fP)) & \fBAIPS_PACRC_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP3_SHIFT\fP)) & \fBAIPS_PACRC_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP3_SHIFT\fP)) & \fBAIPS_PACRC_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP2_SHIFT\fP)) & \fBAIPS_PACRC_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP2_SHIFT\fP)) & \fBAIPS_PACRC_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP2_SHIFT\fP)) & \fBAIPS_PACRC_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP1_SHIFT\fP)) & \fBAIPS_PACRC_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP1_SHIFT\fP)) & \fBAIPS_PACRC_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP1_SHIFT\fP)) & \fBAIPS_PACRC_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_TP0_SHIFT\fP)) & \fBAIPS_PACRC_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_WP0_SHIFT\fP)) & \fBAIPS_PACRC_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRC_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRC_SP0_SHIFT\fP)) & \fBAIPS_PACRC_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRD - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRD_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP7_SHIFT\fP)) & \fBAIPS_PACRD_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP7_SHIFT\fP)) & \fBAIPS_PACRD_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP7_SHIFT\fP)) & \fBAIPS_PACRD_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP6_SHIFT\fP)) & \fBAIPS_PACRD_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP6_SHIFT\fP)) & \fBAIPS_PACRD_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP6_SHIFT\fP)) & \fBAIPS_PACRD_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP5_SHIFT\fP)) & \fBAIPS_PACRD_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP5_SHIFT\fP)) & \fBAIPS_PACRD_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP5_SHIFT\fP)) & \fBAIPS_PACRD_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP4_SHIFT\fP)) & \fBAIPS_PACRD_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP4_SHIFT\fP)) & \fBAIPS_PACRD_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP4_SHIFT\fP)) & \fBAIPS_PACRD_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP3_SHIFT\fP)) & \fBAIPS_PACRD_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP3_SHIFT\fP)) & \fBAIPS_PACRD_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP3_SHIFT\fP)) & \fBAIPS_PACRD_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP2_SHIFT\fP)) & \fBAIPS_PACRD_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP2_SHIFT\fP)) & \fBAIPS_PACRD_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP2_SHIFT\fP)) & \fBAIPS_PACRD_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP1_SHIFT\fP)) & \fBAIPS_PACRD_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP1_SHIFT\fP)) & \fBAIPS_PACRD_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP1_SHIFT\fP)) & \fBAIPS_PACRD_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_TP0_SHIFT\fP)) & \fBAIPS_PACRD_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_WP0_SHIFT\fP)) & \fBAIPS_PACRD_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRD_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRD_SP0_SHIFT\fP)) & \fBAIPS_PACRD_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRE - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRE_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP7_SHIFT\fP)) & \fBAIPS_PACRE_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP7_SHIFT\fP)) & \fBAIPS_PACRE_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP7_SHIFT\fP)) & \fBAIPS_PACRE_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP6_SHIFT\fP)) & \fBAIPS_PACRE_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP6_SHIFT\fP)) & \fBAIPS_PACRE_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP6_SHIFT\fP)) & \fBAIPS_PACRE_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP5_SHIFT\fP)) & \fBAIPS_PACRE_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP5_SHIFT\fP)) & \fBAIPS_PACRE_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP5_SHIFT\fP)) & \fBAIPS_PACRE_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP4_SHIFT\fP)) & \fBAIPS_PACRE_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP4_SHIFT\fP)) & \fBAIPS_PACRE_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP4_SHIFT\fP)) & \fBAIPS_PACRE_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP3_SHIFT\fP)) & \fBAIPS_PACRE_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP3_SHIFT\fP)) & \fBAIPS_PACRE_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP3_SHIFT\fP)) & \fBAIPS_PACRE_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP2_SHIFT\fP)) & \fBAIPS_PACRE_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP2_SHIFT\fP)) & \fBAIPS_PACRE_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP2_SHIFT\fP)) & \fBAIPS_PACRE_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP1_SHIFT\fP)) & \fBAIPS_PACRE_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP1_SHIFT\fP)) & \fBAIPS_PACRE_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP1_SHIFT\fP)) & \fBAIPS_PACRE_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_TP0_SHIFT\fP)) & \fBAIPS_PACRE_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_WP0_SHIFT\fP)) & \fBAIPS_PACRE_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRE_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRE_SP0_SHIFT\fP)) & \fBAIPS_PACRE_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRF - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRF_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP7_SHIFT\fP)) & \fBAIPS_PACRF_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP7_SHIFT\fP)) & \fBAIPS_PACRF_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP7_SHIFT\fP)) & \fBAIPS_PACRF_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP6_SHIFT\fP)) & \fBAIPS_PACRF_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP6_SHIFT\fP)) & \fBAIPS_PACRF_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP6_SHIFT\fP)) & \fBAIPS_PACRF_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP5_SHIFT\fP)) & \fBAIPS_PACRF_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP5_SHIFT\fP)) & \fBAIPS_PACRF_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP5_SHIFT\fP)) & \fBAIPS_PACRF_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP4_SHIFT\fP)) & \fBAIPS_PACRF_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP4_SHIFT\fP)) & \fBAIPS_PACRF_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP4_SHIFT\fP)) & \fBAIPS_PACRF_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP3_SHIFT\fP)) & \fBAIPS_PACRF_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP3_SHIFT\fP)) & \fBAIPS_PACRF_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP3_SHIFT\fP)) & \fBAIPS_PACRF_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP2_SHIFT\fP)) & \fBAIPS_PACRF_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP2_SHIFT\fP)) & \fBAIPS_PACRF_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP2_SHIFT\fP)) & \fBAIPS_PACRF_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP1_SHIFT\fP)) & \fBAIPS_PACRF_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP1_SHIFT\fP)) & \fBAIPS_PACRF_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP1_SHIFT\fP)) & \fBAIPS_PACRF_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_TP0_SHIFT\fP)) & \fBAIPS_PACRF_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_WP0_SHIFT\fP)) & \fBAIPS_PACRF_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRF_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRF_SP0_SHIFT\fP)) & \fBAIPS_PACRF_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRG - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRG_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP7_SHIFT\fP)) & \fBAIPS_PACRG_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP7_SHIFT\fP)) & \fBAIPS_PACRG_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP7_SHIFT\fP)) & \fBAIPS_PACRG_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP6_SHIFT\fP)) & \fBAIPS_PACRG_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP6_SHIFT\fP)) & \fBAIPS_PACRG_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP6_SHIFT\fP)) & \fBAIPS_PACRG_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP5_SHIFT\fP)) & \fBAIPS_PACRG_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP5_SHIFT\fP)) & \fBAIPS_PACRG_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP5_SHIFT\fP)) & \fBAIPS_PACRG_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP4_SHIFT\fP)) & \fBAIPS_PACRG_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP4_SHIFT\fP)) & \fBAIPS_PACRG_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP4_SHIFT\fP)) & \fBAIPS_PACRG_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP3_SHIFT\fP)) & \fBAIPS_PACRG_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP3_SHIFT\fP)) & \fBAIPS_PACRG_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP3_SHIFT\fP)) & \fBAIPS_PACRG_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP2_SHIFT\fP)) & \fBAIPS_PACRG_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP2_SHIFT\fP)) & \fBAIPS_PACRG_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP2_SHIFT\fP)) & \fBAIPS_PACRG_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP1_SHIFT\fP)) & \fBAIPS_PACRG_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP1_SHIFT\fP)) & \fBAIPS_PACRG_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP1_SHIFT\fP)) & \fBAIPS_PACRG_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_TP0_SHIFT\fP)) & \fBAIPS_PACRG_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_WP0_SHIFT\fP)) & \fBAIPS_PACRG_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRG_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRG_SP0_SHIFT\fP)) & \fBAIPS_PACRG_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRH - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRH_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP7_SHIFT\fP)) & \fBAIPS_PACRH_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP7_SHIFT\fP)) & \fBAIPS_PACRH_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP7_SHIFT\fP)) & \fBAIPS_PACRH_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP6_SHIFT\fP)) & \fBAIPS_PACRH_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP6_SHIFT\fP)) & \fBAIPS_PACRH_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP6_SHIFT\fP)) & \fBAIPS_PACRH_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP5_SHIFT\fP)) & \fBAIPS_PACRH_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP5_SHIFT\fP)) & \fBAIPS_PACRH_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP5_SHIFT\fP)) & \fBAIPS_PACRH_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP4_SHIFT\fP)) & \fBAIPS_PACRH_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP4_SHIFT\fP)) & \fBAIPS_PACRH_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP4_SHIFT\fP)) & \fBAIPS_PACRH_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP3_SHIFT\fP)) & \fBAIPS_PACRH_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP3_SHIFT\fP)) & \fBAIPS_PACRH_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP3_SHIFT\fP)) & \fBAIPS_PACRH_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP2_SHIFT\fP)) & \fBAIPS_PACRH_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP2_SHIFT\fP)) & \fBAIPS_PACRH_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP2_SHIFT\fP)) & \fBAIPS_PACRH_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP1_SHIFT\fP)) & \fBAIPS_PACRH_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP1_SHIFT\fP)) & \fBAIPS_PACRH_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP1_SHIFT\fP)) & \fBAIPS_PACRH_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_TP0_SHIFT\fP)) & \fBAIPS_PACRH_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_WP0_SHIFT\fP)) & \fBAIPS_PACRH_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRH_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRH_SP0_SHIFT\fP)) & \fBAIPS_PACRH_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRI - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRI_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP7_SHIFT\fP)) & \fBAIPS_PACRI_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP7_SHIFT\fP)) & \fBAIPS_PACRI_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP7_SHIFT\fP)) & \fBAIPS_PACRI_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP6_SHIFT\fP)) & \fBAIPS_PACRI_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP6_SHIFT\fP)) & \fBAIPS_PACRI_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP6_SHIFT\fP)) & \fBAIPS_PACRI_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP5_SHIFT\fP)) & \fBAIPS_PACRI_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP5_SHIFT\fP)) & \fBAIPS_PACRI_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP5_SHIFT\fP)) & \fBAIPS_PACRI_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP4_SHIFT\fP)) & \fBAIPS_PACRI_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP4_SHIFT\fP)) & \fBAIPS_PACRI_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP4_SHIFT\fP)) & \fBAIPS_PACRI_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP3_SHIFT\fP)) & \fBAIPS_PACRI_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP3_SHIFT\fP)) & \fBAIPS_PACRI_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP3_SHIFT\fP)) & \fBAIPS_PACRI_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP2_SHIFT\fP)) & \fBAIPS_PACRI_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP2_SHIFT\fP)) & \fBAIPS_PACRI_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP2_SHIFT\fP)) & \fBAIPS_PACRI_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP1_SHIFT\fP)) & \fBAIPS_PACRI_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP1_SHIFT\fP)) & \fBAIPS_PACRI_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP1_SHIFT\fP)) & \fBAIPS_PACRI_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_TP0_SHIFT\fP)) & \fBAIPS_PACRI_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_WP0_SHIFT\fP)) & \fBAIPS_PACRI_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRI_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRI_SP0_SHIFT\fP)) & \fBAIPS_PACRI_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRJ - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP7_SHIFT\fP)) & \fBAIPS_PACRJ_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP7_SHIFT\fP)) & \fBAIPS_PACRJ_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP7_SHIFT\fP)) & \fBAIPS_PACRJ_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP6_SHIFT\fP)) & \fBAIPS_PACRJ_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP6_SHIFT\fP)) & \fBAIPS_PACRJ_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP6_SHIFT\fP)) & \fBAIPS_PACRJ_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP5_SHIFT\fP)) & \fBAIPS_PACRJ_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP5_SHIFT\fP)) & \fBAIPS_PACRJ_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP5_SHIFT\fP)) & \fBAIPS_PACRJ_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP4_SHIFT\fP)) & \fBAIPS_PACRJ_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP4_SHIFT\fP)) & \fBAIPS_PACRJ_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP4_SHIFT\fP)) & \fBAIPS_PACRJ_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP3_SHIFT\fP)) & \fBAIPS_PACRJ_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP3_SHIFT\fP)) & \fBAIPS_PACRJ_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP3_SHIFT\fP)) & \fBAIPS_PACRJ_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP2_SHIFT\fP)) & \fBAIPS_PACRJ_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP2_SHIFT\fP)) & \fBAIPS_PACRJ_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP2_SHIFT\fP)) & \fBAIPS_PACRJ_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP1_SHIFT\fP)) & \fBAIPS_PACRJ_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP1_SHIFT\fP)) & \fBAIPS_PACRJ_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP1_SHIFT\fP)) & \fBAIPS_PACRJ_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_TP0_SHIFT\fP)) & \fBAIPS_PACRJ_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_WP0_SHIFT\fP)) & \fBAIPS_PACRJ_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRJ_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRJ_SP0_SHIFT\fP)) & \fBAIPS_PACRJ_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRK - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRK_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP7_SHIFT\fP)) & \fBAIPS_PACRK_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP7_SHIFT\fP)) & \fBAIPS_PACRK_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP7_SHIFT\fP)) & \fBAIPS_PACRK_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP6_SHIFT\fP)) & \fBAIPS_PACRK_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP6_SHIFT\fP)) & \fBAIPS_PACRK_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP6_SHIFT\fP)) & \fBAIPS_PACRK_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP5_SHIFT\fP)) & \fBAIPS_PACRK_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP5_SHIFT\fP)) & \fBAIPS_PACRK_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP5_SHIFT\fP)) & \fBAIPS_PACRK_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP4_SHIFT\fP)) & \fBAIPS_PACRK_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP4_SHIFT\fP)) & \fBAIPS_PACRK_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP4_SHIFT\fP)) & \fBAIPS_PACRK_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP3_SHIFT\fP)) & \fBAIPS_PACRK_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP3_SHIFT\fP)) & \fBAIPS_PACRK_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP3_SHIFT\fP)) & \fBAIPS_PACRK_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP2_SHIFT\fP)) & \fBAIPS_PACRK_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP2_SHIFT\fP)) & \fBAIPS_PACRK_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP2_SHIFT\fP)) & \fBAIPS_PACRK_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP1_SHIFT\fP)) & \fBAIPS_PACRK_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP1_SHIFT\fP)) & \fBAIPS_PACRK_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP1_SHIFT\fP)) & \fBAIPS_PACRK_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_TP0_SHIFT\fP)) & \fBAIPS_PACRK_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_WP0_SHIFT\fP)) & \fBAIPS_PACRK_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRK_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRK_SP0_SHIFT\fP)) & \fBAIPS_PACRK_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRL - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRL_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP7_SHIFT\fP)) & \fBAIPS_PACRL_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP7_SHIFT\fP)) & \fBAIPS_PACRL_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP7_SHIFT\fP)) & \fBAIPS_PACRL_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP6_SHIFT\fP)) & \fBAIPS_PACRL_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP6_SHIFT\fP)) & \fBAIPS_PACRL_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP6_SHIFT\fP)) & \fBAIPS_PACRL_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP5_SHIFT\fP)) & \fBAIPS_PACRL_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP5_SHIFT\fP)) & \fBAIPS_PACRL_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP5_SHIFT\fP)) & \fBAIPS_PACRL_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP4_SHIFT\fP)) & \fBAIPS_PACRL_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP4_SHIFT\fP)) & \fBAIPS_PACRL_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP4_SHIFT\fP)) & \fBAIPS_PACRL_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP3_SHIFT\fP)) & \fBAIPS_PACRL_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP3_SHIFT\fP)) & \fBAIPS_PACRL_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP3_SHIFT\fP)) & \fBAIPS_PACRL_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP2_SHIFT\fP)) & \fBAIPS_PACRL_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP2_SHIFT\fP)) & \fBAIPS_PACRL_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP2_SHIFT\fP)) & \fBAIPS_PACRL_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP1_SHIFT\fP)) & \fBAIPS_PACRL_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP1_SHIFT\fP)) & \fBAIPS_PACRL_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP1_SHIFT\fP)) & \fBAIPS_PACRL_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_TP0_SHIFT\fP)) & \fBAIPS_PACRL_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_WP0_SHIFT\fP)) & \fBAIPS_PACRL_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRL_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRL_SP0_SHIFT\fP)) & \fBAIPS_PACRL_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRM - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRM_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP7_SHIFT\fP)) & \fBAIPS_PACRM_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP7_SHIFT\fP)) & \fBAIPS_PACRM_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP7_SHIFT\fP)) & \fBAIPS_PACRM_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP6_SHIFT\fP)) & \fBAIPS_PACRM_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP6_SHIFT\fP)) & \fBAIPS_PACRM_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP6_SHIFT\fP)) & \fBAIPS_PACRM_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP5_SHIFT\fP)) & \fBAIPS_PACRM_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP5_SHIFT\fP)) & \fBAIPS_PACRM_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP5_SHIFT\fP)) & \fBAIPS_PACRM_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP4_SHIFT\fP)) & \fBAIPS_PACRM_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP4_SHIFT\fP)) & \fBAIPS_PACRM_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP4_SHIFT\fP)) & \fBAIPS_PACRM_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP3_SHIFT\fP)) & \fBAIPS_PACRM_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP3_SHIFT\fP)) & \fBAIPS_PACRM_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP3_SHIFT\fP)) & \fBAIPS_PACRM_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP2_SHIFT\fP)) & \fBAIPS_PACRM_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP2_SHIFT\fP)) & \fBAIPS_PACRM_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP2_SHIFT\fP)) & \fBAIPS_PACRM_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP1_SHIFT\fP)) & \fBAIPS_PACRM_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP1_SHIFT\fP)) & \fBAIPS_PACRM_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP1_SHIFT\fP)) & \fBAIPS_PACRM_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_TP0_SHIFT\fP)) & \fBAIPS_PACRM_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_WP0_SHIFT\fP)) & \fBAIPS_PACRM_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRM_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRM_SP0_SHIFT\fP)) & \fBAIPS_PACRM_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRN - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRN_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP7_SHIFT\fP)) & \fBAIPS_PACRN_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP7_SHIFT\fP)) & \fBAIPS_PACRN_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP7_SHIFT\fP)) & \fBAIPS_PACRN_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP6_SHIFT\fP)) & \fBAIPS_PACRN_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP6_SHIFT\fP)) & \fBAIPS_PACRN_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP6_SHIFT\fP)) & \fBAIPS_PACRN_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP5_SHIFT\fP)) & \fBAIPS_PACRN_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP5_SHIFT\fP)) & \fBAIPS_PACRN_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP5_SHIFT\fP)) & \fBAIPS_PACRN_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP4_SHIFT\fP)) & \fBAIPS_PACRN_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP4_SHIFT\fP)) & \fBAIPS_PACRN_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP4_SHIFT\fP)) & \fBAIPS_PACRN_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP3_SHIFT\fP)) & \fBAIPS_PACRN_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP3_SHIFT\fP)) & \fBAIPS_PACRN_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP3_SHIFT\fP)) & \fBAIPS_PACRN_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP2_SHIFT\fP)) & \fBAIPS_PACRN_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP2_SHIFT\fP)) & \fBAIPS_PACRN_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP2_SHIFT\fP)) & \fBAIPS_PACRN_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP1_SHIFT\fP)) & \fBAIPS_PACRN_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP1_SHIFT\fP)) & \fBAIPS_PACRN_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP1_SHIFT\fP)) & \fBAIPS_PACRN_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_TP0_SHIFT\fP)) & \fBAIPS_PACRN_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_WP0_SHIFT\fP)) & \fBAIPS_PACRN_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRN_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRN_SP0_SHIFT\fP)) & \fBAIPS_PACRN_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRO - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRO_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP7_SHIFT\fP)) & \fBAIPS_PACRO_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP7_SHIFT\fP)) & \fBAIPS_PACRO_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP7_SHIFT\fP)) & \fBAIPS_PACRO_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP6_SHIFT\fP)) & \fBAIPS_PACRO_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP6_SHIFT\fP)) & \fBAIPS_PACRO_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP6_SHIFT\fP)) & \fBAIPS_PACRO_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP5_SHIFT\fP)) & \fBAIPS_PACRO_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP5_SHIFT\fP)) & \fBAIPS_PACRO_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP5_SHIFT\fP)) & \fBAIPS_PACRO_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP4_SHIFT\fP)) & \fBAIPS_PACRO_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP4_SHIFT\fP)) & \fBAIPS_PACRO_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP4_SHIFT\fP)) & \fBAIPS_PACRO_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP3_SHIFT\fP)) & \fBAIPS_PACRO_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP3_SHIFT\fP)) & \fBAIPS_PACRO_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP3_SHIFT\fP)) & \fBAIPS_PACRO_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP2_SHIFT\fP)) & \fBAIPS_PACRO_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP2_SHIFT\fP)) & \fBAIPS_PACRO_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP2_SHIFT\fP)) & \fBAIPS_PACRO_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP1_SHIFT\fP)) & \fBAIPS_PACRO_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP1_SHIFT\fP)) & \fBAIPS_PACRO_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP1_SHIFT\fP)) & \fBAIPS_PACRO_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_TP0_SHIFT\fP)) & \fBAIPS_PACRO_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_WP0_SHIFT\fP)) & \fBAIPS_PACRO_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRO_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRO_SP0_SHIFT\fP)) & \fBAIPS_PACRO_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRP - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRP_TP7_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP7_SHIFT\fP)) & \fBAIPS_PACRP_TP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP7_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP7_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP7_SHIFT\fP)) & \fBAIPS_PACRP_WP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP7_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP7_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP7_SHIFT\fP)) & \fBAIPS_PACRP_SP7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP6_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP6_SHIFT\fP)) & \fBAIPS_PACRP_TP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP6_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP6_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP6_SHIFT\fP)) & \fBAIPS_PACRP_WP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP6_SHIFT\fP)) & \fBAIPS_PACRP_SP6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP5_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP5_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP5_SHIFT\fP)) & \fBAIPS_PACRP_TP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP5_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP5_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP5_SHIFT\fP)) & \fBAIPS_PACRP_WP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP5_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP5_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP5_SHIFT\fP)) & \fBAIPS_PACRP_SP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP4_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP4_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP4_SHIFT\fP)) & \fBAIPS_PACRP_TP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP4_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP4_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP4_SHIFT\fP)) & \fBAIPS_PACRP_WP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP4_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP4_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP4_SHIFT\fP)) & \fBAIPS_PACRP_SP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP3_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP3_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP3_SHIFT\fP)) & \fBAIPS_PACRP_TP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP3_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP3_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP3_SHIFT\fP)) & \fBAIPS_PACRP_WP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP3_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP3_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP3_SHIFT\fP)) & \fBAIPS_PACRP_SP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP2_SHIFT\fP)) & \fBAIPS_PACRP_TP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP2_SHIFT\fP)) & \fBAIPS_PACRP_WP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP2_SHIFT\fP)) & \fBAIPS_PACRP_SP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP1_SHIFT\fP)) & \fBAIPS_PACRP_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP1_SHIFT\fP)) & \fBAIPS_PACRP_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP1_SHIFT\fP)) & \fBAIPS_PACRP_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_TP0_SHIFT\fP)) & \fBAIPS_PACRP_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_WP0_SHIFT\fP)) & \fBAIPS_PACRP_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRP_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRP_SP0_SHIFT\fP)) & \fBAIPS_PACRP_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPACRU - Peripheral Access Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAIPS_PACRU_TP1_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_TP1_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_TP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_TP1_SHIFT\fP)) & \fBAIPS_PACRU_TP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_WP1_SHIFT\fP)) & \fBAIPS_PACRU_WP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP1_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP1_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_SP1_SHIFT\fP)) & \fBAIPS_PACRU_SP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_TP0_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_TP0_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_TP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_TP0_SHIFT\fP)) & \fBAIPS_PACRU_TP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP0_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP0_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_WP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_WP0_SHIFT\fP)) & \fBAIPS_PACRU_WP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP0_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP0_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAIPS_PACRU_SP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAIPS_PACRU_SP0_SHIFT\fP)) & \fBAIPS_PACRU_SP0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPRS - Priority Registers Slave\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_PRS_M0_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M0_SHIFT\fP)) & \fBAXBS_PRS_M0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M1_MASK\fP   (0x70U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M1_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M1_SHIFT\fP)) & \fBAXBS_PRS_M1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M2_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M2_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M2_SHIFT\fP)) & \fBAXBS_PRS_M2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M3_MASK\fP   (0x7000U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M3_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M3_SHIFT\fP)) & \fBAXBS_PRS_M3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M4_MASK\fP   (0x70000U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M4_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M4_SHIFT\fP)) & \fBAXBS_PRS_M4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M5_MASK\fP   (0x700000U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M5_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_M5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_PRS_M5_SHIFT\fP)) & \fBAXBS_PRS_M5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_PRS_COUNT\fP   (5U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCRS - Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_CRS_PARK_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_PARK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_PARK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_CRS_PARK_SHIFT\fP)) & \fBAXBS_CRS_PARK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_PCTL_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_PCTL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_PCTL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_CRS_PCTL_SHIFT\fP)) & \fBAXBS_CRS_PCTL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_ARB_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_ARB_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_ARB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_CRS_ARB_SHIFT\fP)) & \fBAXBS_CRS_ARB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_HLP_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_HLP_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_HLP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_CRS_HLP_SHIFT\fP)) & \fBAXBS_CRS_HLP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_RO_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_RO_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_RO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_CRS_RO_SHIFT\fP)) & \fBAXBS_CRS_RO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBAXBS_CRS_COUNT\fP   (5U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR0 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR0_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR0_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR0_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR0_AULB_SHIFT\fP)) & \fBAXBS_MGPCR0_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR1 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR1_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR1_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR1_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR1_AULB_SHIFT\fP)) & \fBAXBS_MGPCR1_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR2 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR2_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR2_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR2_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR2_AULB_SHIFT\fP)) & \fBAXBS_MGPCR2_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR3 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR3_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR3_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR3_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR3_AULB_SHIFT\fP)) & \fBAXBS_MGPCR3_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR4 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR4_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR4_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR4_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR4_AULB_SHIFT\fP)) & \fBAXBS_MGPCR4_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMGPCR5 - Master General Purpose Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBAXBS_MGPCR5_AULB_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR5_AULB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBAXBS_MGPCR5_AULB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBAXBS_MGPCR5_AULB_SHIFT\fP)) & \fBAXBS_MGPCR5_AULB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMCR - Module Configuration Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MAXMB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MAXMB_SHIFT\fP)) & \fBCAN_MCR_MAXMB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IDAM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IDAM_SHIFT\fP)) & \fBCAN_MCR_IDAM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_AEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_AEN_SHIFT\fP)) & \fBCAN_MCR_AEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPRIOEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPRIOEN_SHIFT\fP)) & \fBCAN_MCR_LPRIOEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_IRMQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_IRMQ_SHIFT\fP)) & \fBCAN_MCR_IRMQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SRXDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SRXDIS_SHIFT\fP)) & \fBCAN_MCR_SRXDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKSRC_SHIFT\fP)) & \fBCAN_MCR_WAKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_LPMACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_LPMACK_SHIFT\fP)) & \fBCAN_MCR_LPMACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WRNEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WRNEN_SHIFT\fP)) & \fBCAN_MCR_WRNEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SLFWAK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SLFWAK_SHIFT\fP)) & \fBCAN_MCR_SLFWAK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SUPV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SUPV_SHIFT\fP)) & \fBCAN_MCR_SUPV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZACK_SHIFT\fP)) & \fBCAN_MCR_FRZACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_SOFTRST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_SOFTRST_SHIFT\fP)) & \fBCAN_MCR_SOFTRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_WAKMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_WAKMSK_SHIFT\fP)) & \fBCAN_MCR_WAKMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_NOTRDY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_NOTRDY_SHIFT\fP)) & \fBCAN_MCR_NOTRDY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_HALT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_HALT_SHIFT\fP)) & \fBCAN_MCR_HALT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_RFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_RFEN_SHIFT\fP)) & \fBCAN_MCR_RFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_FRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_FRZ_SHIFT\fP)) & \fBCAN_MCR_FRZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBCAN_MCR_MDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_MCR_MDIS_SHIFT\fP)) & \fBCAN_MCR_MDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_HALT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_HALT_SHIFT\fP)) & \fBSPI_MCR_HALT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_SMPL_PT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_SMPL_PT_SHIFT\fP)) & \fBSPI_MCR_SMPL_PT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_RXF_SHIFT\fP)) & \fBSPI_MCR_CLR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CLR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CLR_TXF_SHIFT\fP)) & \fBSPI_MCR_CLR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_RXF_SHIFT\fP)) & \fBSPI_MCR_DIS_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DIS_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DIS_TXF_SHIFT\fP)) & \fBSPI_MCR_DIS_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MDIS_SHIFT\fP)) & \fBSPI_MCR_MDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DOZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DOZE_SHIFT\fP)) & \fBSPI_MCR_DOZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS_MASK\fP   (0x3F0000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSIS_SHIFT\fP)) & \fBSPI_MCR_PCSIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_ROOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_ROOE_SHIFT\fP)) & \fBSPI_MCR_ROOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_PCSSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_PCSSE_SHIFT\fP)) & \fBSPI_MCR_PCSSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MTFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MTFE_SHIFT\fP)) & \fBSPI_MCR_MTFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_FRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_FRZ_SHIFT\fP)) & \fBSPI_MCR_FRZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_DCONF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_DCONF_SHIFT\fP)) & \fBSPI_MCR_DCONF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_CONT_SCKE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_CONT_SCKE_SHIFT\fP)) & \fBSPI_MCR_CONT_SCKE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_MCR_MSTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_MCR_MSTR_SHIFT\fP)) & \fBSPI_MCR_MSTR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTRL1 - Control 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PROPSEG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PROPSEG_SHIFT\fP)) & \fBCAN_CTRL1_PROPSEG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LOM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LOM_SHIFT\fP)) & \fBCAN_CTRL1_LOM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LBUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LBUF_SHIFT\fP)) & \fBCAN_CTRL1_LBUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TSYN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TSYN_SHIFT\fP)) & \fBCAN_CTRL1_TSYN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFREC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFREC_SHIFT\fP)) & \fBCAN_CTRL1_BOFFREC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_SMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_SMP_SHIFT\fP)) & \fBCAN_CTRL1_SMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RWRNMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_RWRNMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_TWRNMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_TWRNMSK_SHIFT\fP)) & \fBCAN_CTRL1_TWRNMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_LPB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_LPB_SHIFT\fP)) & \fBCAN_CTRL1_LPB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_CLKSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_CLKSRC_SHIFT\fP)) & \fBCAN_CTRL1_CLKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_ERRMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_ERRMSK_SHIFT\fP)) & \fBCAN_CTRL1_ERRMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_BOFFMSK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_BOFFMSK_SHIFT\fP)) & \fBCAN_CTRL1_BOFFMSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2_MASK\fP   (0x70000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG2_SHIFT\fP)) & \fBCAN_CTRL1_PSEG2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1_MASK\fP   (0x380000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PSEG1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PSEG1_SHIFT\fP)) & \fBCAN_CTRL1_PSEG1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW_MASK\fP   (0xC00000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_RJW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_RJW_SHIFT\fP)) & \fBCAN_CTRL1_RJW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL1_PRESDIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL1_PRESDIV_SHIFT\fP)) & \fBCAN_CTRL1_PRESDIV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIMER - Free Running Timer\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_TIMER_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_TIMER_TIMER_SHIFT\fP)) & \fBCAN_TIMER_TIMER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXMGMASK - Rx Mailboxes Global Mask Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXMGMASK_MG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXMGMASK_MG_SHIFT\fP)) & \fBCAN_RXMGMASK_MG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRX14MASK - Rx 14 Mask register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RX14MASK_RX14M\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX14MASK_RX14M_SHIFT\fP)) & \fBCAN_RX14MASK_RX14M_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRX15MASK - Rx 15 Mask register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RX15MASK_RX15M\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RX15MASK_RX15M_SHIFT\fP)) & \fBCAN_RX15MASK_RX15M_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBECR - Error Counter\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_TXERRCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_TXERRCNT_SHIFT\fP)) & \fBCAN_ECR_TXERRCNT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_ECR_RXERRCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ECR_RXERRCNT_SHIFT\fP)) & \fBCAN_ECR_RXERRCNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBESR1 - Error and Status 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_WAKINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_WAKINT_SHIFT\fP)) & \fBCAN_ESR1_WAKINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ERRINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ERRINT_SHIFT\fP)) & \fBCAN_ESR1_ERRINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BOFFINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BOFFINT_SHIFT\fP)) & \fBCAN_ESR1_BOFFINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RX_SHIFT\fP)) & \fBCAN_ESR1_RX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FLTCONF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FLTCONF_SHIFT\fP)) & \fBCAN_ESR1_FLTCONF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TX_SHIFT\fP)) & \fBCAN_ESR1_TX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_IDLE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_IDLE_SHIFT\fP)) & \fBCAN_ESR1_IDLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RXWRN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RXWRN_SHIFT\fP)) & \fBCAN_ESR1_RXWRN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TXWRN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TXWRN_SHIFT\fP)) & \fBCAN_ESR1_TXWRN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_STFERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_STFERR_SHIFT\fP)) & \fBCAN_ESR1_STFERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_FRMERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_FRMERR_SHIFT\fP)) & \fBCAN_ESR1_FRMERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_CRCERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_CRCERR_SHIFT\fP)) & \fBCAN_ESR1_CRCERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_ACKERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_ACKERR_SHIFT\fP)) & \fBCAN_ESR1_ACKERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT0ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT0ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT0ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_BIT1ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_BIT1ERR_SHIFT\fP)) & \fBCAN_ESR1_BIT1ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_RWRNINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_RWRNINT_SHIFT\fP)) & \fBCAN_ESR1_RWRNINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_TWRNINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_TWRNINT_SHIFT\fP)) & \fBCAN_ESR1_TWRNINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR1_SYNCH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR1_SYNCH_SHIFT\fP)) & \fBCAN_ESR1_SYNCH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIMASK1 - Interrupt Masks 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_IMASK1_BUFLM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IMASK1_BUFLM_SHIFT\fP)) & \fBCAN_IMASK1_BUFLM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIFLAG1 - Interrupt Flags 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF0I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF0I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF0I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I_MASK\fP   (0x1EU)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF4TO1I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF4TO1I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF4TO1I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF5I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF5I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF5I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF6I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF6I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF6I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF7I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF7I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF7I_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I_MASK\fP   (0xFFFFFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_IFLAG1_BUF31TO8I\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_IFLAG1_BUF31TO8I_SHIFT\fP)) & \fBCAN_IFLAG1_BUF31TO8I_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTRL2 - Control 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_EACEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_EACEN_SHIFT\fP)) & \fBCAN_CTRL2_EACEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RRS_SHIFT\fP)) & \fBCAN_CTRL2_RRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_MRP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_MRP_SHIFT\fP)) & \fBCAN_CTRL2_MRP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD_MASK\fP   (0xF80000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_TASD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_TASD_SHIFT\fP)) & \fBCAN_CTRL2_TASD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_RFFN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_RFFN_SHIFT\fP)) & \fBCAN_CTRL2_RFFN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAN_CTRL2_WRMFRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CTRL2_WRMFRZ_SHIFT\fP)) & \fBCAN_CTRL2_WRMFRZ_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBESR2 - Error and Status 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_ESR2_IMB_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_IMB_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_IMB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_IMB_SHIFT\fP)) & \fBCAN_ESR2_IMB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_VPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_VPS_SHIFT\fP)) & \fBCAN_ESR2_VPS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM_MASK\fP   (0x7F0000U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_ESR2_LPTM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ESR2_LPTM_SHIFT\fP)) & \fBCAN_ESR2_LPTM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCRCR - CRC Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC_MASK\fP   (0x7FFFU)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_TXCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_TXCRC_SHIFT\fP)) & \fBCAN_CRCR_TXCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC_MASK\fP   (0x7F0000U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CRCR_MBCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CRCR_MBCRC_SHIFT\fP)) & \fBCAN_CRCR_MBCRC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFGMASK - Rx FIFO Global Mask register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXFGMASK_FGM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFGMASK_FGM_SHIFT\fP)) & \fBCAN_RXFGMASK_FGM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFIR - Rx FIFO Information Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXFIR_IDHIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXFIR_IDHIT_SHIFT\fP)) & \fBCAN_RXFIR_IDHIT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCS - Message Buffer 0 CS Register\&.\&.Message Buffer 15 CS Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_TIME_STAMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_TIME_STAMP_SHIFT\fP)) & \fBCAN_CS_TIME_STAMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_DLC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_DLC_SHIFT\fP)) & \fBCAN_CS_DLC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_RTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_RTR_SHIFT\fP)) & \fBCAN_CS_RTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_IDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_IDE_SHIFT\fP)) & \fBCAN_CS_IDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_SRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_SRR_SHIFT\fP)) & \fBCAN_CS_SRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_CS_CODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_CS_CODE_SHIFT\fP)) & \fBCAN_CS_CODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_CS_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBID - Message Buffer 0 ID Register\&.\&.Message Buffer 15 ID Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_ID_EXT_MASK\fP   (0x3FFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_ID_EXT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_EXT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_EXT_SHIFT\fP)) & \fBCAN_ID_EXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD_MASK\fP   (0x1FFC0000U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_STD_SHIFT\fP)) & \fBCAN_ID_STD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO_MASK\fP   (0xE0000000U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBCAN_ID_PRIO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_ID_PRIO_SHIFT\fP)) & \fBCAN_ID_PRIO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_ID_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWORD0 - Message Buffer 0 WORD0 Register\&.\&.Message Buffer 15 WORD0 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_3_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_2_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_1_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_DATA_BYTE_0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD0_DATA_BYTE_0_SHIFT\fP)) & \fBCAN_WORD0_DATA_BYTE_0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD0_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWORD1 - Message Buffer 0 WORD1 Register\&.\&.Message Buffer 15 WORD1 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_7_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_6_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_5_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_DATA_BYTE_4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_WORD1_DATA_BYTE_4_SHIFT\fP)) & \fBCAN_WORD1_DATA_BYTE_4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_WORD1_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXIMR - Rx Individual Mask Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAN_RXIMR_MI_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_MI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_MI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAN_RXIMR_MI_SHIFT\fP)) & \fBCAN_RXIMR_MI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAN_RXIMR_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDIRECT - Direct access register 0\&.\&.Direct access register 15\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT0_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT1_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT2_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT3_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT4_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT5_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT6_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT7_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT8_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT9_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT9_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT9_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT10_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT10_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT10_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT11_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT11_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT11_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT12_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT12_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT12_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT13_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT13_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT13_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT14_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT14_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT14_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT15_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT15_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_CAU_DIRECT15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_DIRECT_CAU_DIRECT15_SHIFT\fP)) & \fBCAU_DIRECT_CAU_DIRECT15_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_DIRECT_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLDR_CASR - Status register - Load Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_LDR_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CASR_IC_SHIFT\fP)) & \fBCAU_LDR_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CASR_DPE_SHIFT\fP)) & \fBCAU_LDR_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CASR_VER_SHIFT\fP)) & \fBCAU_LDR_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLDR_CAA - Accumulator register - Load Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_LDR_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CAA_ACC_SHIFT\fP)) & \fBCAU_LDR_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLDR_CA - General Purpose Register 0 - Load Register command\&.\&.General Purpose Register 8 - Load Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA0_SHIFT\fP)) & \fBCAU_LDR_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA1_SHIFT\fP)) & \fBCAU_LDR_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA2_SHIFT\fP)) & \fBCAU_LDR_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA3_SHIFT\fP)) & \fBCAU_LDR_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA4_SHIFT\fP)) & \fBCAU_LDR_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA5_SHIFT\fP)) & \fBCAU_LDR_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA6_SHIFT\fP)) & \fBCAU_LDR_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA7_SHIFT\fP)) & \fBCAU_LDR_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_LDR_CA_CA8_SHIFT\fP)) & \fBCAU_LDR_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_LDR_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTR_CASR - Status register - Store Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_STR_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CASR_IC_SHIFT\fP)) & \fBCAU_STR_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CASR_DPE_SHIFT\fP)) & \fBCAU_STR_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CASR_VER_SHIFT\fP)) & \fBCAU_STR_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTR_CAA - Accumulator register - Store Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_STR_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CAA_ACC_SHIFT\fP)) & \fBCAU_STR_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTR_CA - General Purpose Register 0 - Store Register command\&.\&.General Purpose Register 8 - Store Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_STR_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA0_SHIFT\fP)) & \fBCAU_STR_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA1_SHIFT\fP)) & \fBCAU_STR_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA2_SHIFT\fP)) & \fBCAU_STR_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA3_SHIFT\fP)) & \fBCAU_STR_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA4_SHIFT\fP)) & \fBCAU_STR_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA5_SHIFT\fP)) & \fBCAU_STR_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA6_SHIFT\fP)) & \fBCAU_STR_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA7_SHIFT\fP)) & \fBCAU_STR_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_STR_CA_CA8_SHIFT\fP)) & \fBCAU_STR_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_STR_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADR_CASR - Status register - Add Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ADR_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CASR_IC_SHIFT\fP)) & \fBCAU_ADR_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CASR_DPE_SHIFT\fP)) & \fBCAU_ADR_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CASR_VER_SHIFT\fP)) & \fBCAU_ADR_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADR_CAA - Accumulator register - Add to register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ADR_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CAA_ACC_SHIFT\fP)) & \fBCAU_ADR_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADR_CA - General Purpose Register 0 - Add to register command\&.\&.General Purpose Register 8 - Add to register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA0_SHIFT\fP)) & \fBCAU_ADR_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA1_SHIFT\fP)) & \fBCAU_ADR_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA2_SHIFT\fP)) & \fBCAU_ADR_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA3_SHIFT\fP)) & \fBCAU_ADR_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA4_SHIFT\fP)) & \fBCAU_ADR_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA5_SHIFT\fP)) & \fBCAU_ADR_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA6_SHIFT\fP)) & \fBCAU_ADR_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA7_SHIFT\fP)) & \fBCAU_ADR_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ADR_CA_CA8_SHIFT\fP)) & \fBCAU_ADR_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ADR_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRADR_CASR - Status register - Reverse and Add to Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_RADR_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CASR_IC_SHIFT\fP)) & \fBCAU_RADR_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CASR_DPE_SHIFT\fP)) & \fBCAU_RADR_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CASR_VER_SHIFT\fP)) & \fBCAU_RADR_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRADR_CAA - Accumulator register - Reverse and Add to Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_RADR_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CAA_ACC_SHIFT\fP)) & \fBCAU_RADR_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRADR_CA - General Purpose Register 0 - Reverse and Add to Register command\&.\&.General Purpose Register 8 - Reverse and Add to Register command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA0_SHIFT\fP)) & \fBCAU_RADR_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA1_SHIFT\fP)) & \fBCAU_RADR_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA2_SHIFT\fP)) & \fBCAU_RADR_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA3_SHIFT\fP)) & \fBCAU_RADR_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA4_SHIFT\fP)) & \fBCAU_RADR_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA5_SHIFT\fP)) & \fBCAU_RADR_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA6_SHIFT\fP)) & \fBCAU_RADR_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA7_SHIFT\fP)) & \fBCAU_RADR_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_RADR_CA_CA8_SHIFT\fP)) & \fBCAU_RADR_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_RADR_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBXOR_CASR - Status register - Exclusive Or command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_XOR_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CASR_IC_SHIFT\fP)) & \fBCAU_XOR_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CASR_DPE_SHIFT\fP)) & \fBCAU_XOR_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CASR_VER_SHIFT\fP)) & \fBCAU_XOR_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBXOR_CAA - Accumulator register - Exclusive Or command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_XOR_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CAA_ACC_SHIFT\fP)) & \fBCAU_XOR_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBXOR_CA - General Purpose Register 0 - Exclusive Or command\&.\&.General Purpose Register 8 - Exclusive Or command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA0_SHIFT\fP)) & \fBCAU_XOR_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA1_SHIFT\fP)) & \fBCAU_XOR_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA2_SHIFT\fP)) & \fBCAU_XOR_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA3_SHIFT\fP)) & \fBCAU_XOR_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA4_SHIFT\fP)) & \fBCAU_XOR_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA5_SHIFT\fP)) & \fBCAU_XOR_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA6_SHIFT\fP)) & \fBCAU_XOR_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA7_SHIFT\fP)) & \fBCAU_XOR_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_XOR_CA_CA8_SHIFT\fP)) & \fBCAU_XOR_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_XOR_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBROTL_CASR - Status register - Rotate Left command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CASR_IC_SHIFT\fP)) & \fBCAU_ROTL_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CASR_DPE_SHIFT\fP)) & \fBCAU_ROTL_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CASR_VER_SHIFT\fP)) & \fBCAU_ROTL_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBROTL_CAA - Accumulator register - Rotate Left command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ROTL_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CAA_ACC_SHIFT\fP)) & \fBCAU_ROTL_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBROTL_CA - General Purpose Register 0 - Rotate Left command\&.\&.General Purpose Register 8 - Rotate Left command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA0_SHIFT\fP)) & \fBCAU_ROTL_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA1_SHIFT\fP)) & \fBCAU_ROTL_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA2_SHIFT\fP)) & \fBCAU_ROTL_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA3_SHIFT\fP)) & \fBCAU_ROTL_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA4_SHIFT\fP)) & \fBCAU_ROTL_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA5_SHIFT\fP)) & \fBCAU_ROTL_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA6_SHIFT\fP)) & \fBCAU_ROTL_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA7_SHIFT\fP)) & \fBCAU_ROTL_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_ROTL_CA_CA8_SHIFT\fP)) & \fBCAU_ROTL_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_ROTL_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESC_CASR - Status register - AES Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESC_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CASR_IC_SHIFT\fP)) & \fBCAU_AESC_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CASR_DPE_SHIFT\fP)) & \fBCAU_AESC_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CASR_VER_SHIFT\fP)) & \fBCAU_AESC_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESC_CAA - Accumulator register - AES Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESC_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CAA_ACC_SHIFT\fP)) & \fBCAU_AESC_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESC_CA - General Purpose Register 0 - AES Column Operation command\&.\&.General Purpose Register 8 - AES Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA0_SHIFT\fP)) & \fBCAU_AESC_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA1_SHIFT\fP)) & \fBCAU_AESC_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA2_SHIFT\fP)) & \fBCAU_AESC_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA3_SHIFT\fP)) & \fBCAU_AESC_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA4_SHIFT\fP)) & \fBCAU_AESC_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA5_SHIFT\fP)) & \fBCAU_AESC_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA6_SHIFT\fP)) & \fBCAU_AESC_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA7_SHIFT\fP)) & \fBCAU_AESC_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESC_CA_CA8_SHIFT\fP)) & \fBCAU_AESC_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESC_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESIC_CASR - Status register - AES Inverse Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_IC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_IC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_IC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CASR_IC_SHIFT\fP)) & \fBCAU_AESIC_CASR_IC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_DPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_DPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CASR_DPE_SHIFT\fP)) & \fBCAU_AESIC_CASR_DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_VER_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_VER_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CASR_VER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CASR_VER_SHIFT\fP)) & \fBCAU_AESIC_CASR_VER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESIC_CAA - Accumulator register - AES Inverse Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESIC_CAA_ACC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CAA_ACC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CAA_ACC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CAA_ACC_SHIFT\fP)) & \fBCAU_AESIC_CAA_ACC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAESIC_CA - General Purpose Register 0 - AES Inverse Column Operation command\&.\&.General Purpose Register 8 - AES Inverse Column Operation command\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA0_SHIFT\fP)) & \fBCAU_AESIC_CA_CA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA1_SHIFT\fP)) & \fBCAU_AESIC_CA_CA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA2_SHIFT\fP)) & \fBCAU_AESIC_CA_CA2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA3_SHIFT\fP)) & \fBCAU_AESIC_CA_CA3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA4_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA4_SHIFT\fP)) & \fBCAU_AESIC_CA_CA4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA5_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA5_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA5_SHIFT\fP)) & \fBCAU_AESIC_CA_CA5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA6_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA6_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA6_SHIFT\fP)) & \fBCAU_AESIC_CA_CA6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA7_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA7_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA7_SHIFT\fP)) & \fBCAU_AESIC_CA_CA7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA8_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_CA8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCAU_AESIC_CA_CA8_SHIFT\fP)) & \fBCAU_AESIC_CA_CA8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCAU_AESIC_CA_COUNT\fP   (9U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR0 - CMP Control Register 0\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_HYSTCTR_SHIFT\fP)) & \fBCMP_CR0_HYSTCTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT_MASK\fP   (0x70U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_FILTER_CNT_SHIFT\fP)) & \fBCMP_CR0_FILTER_CNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR1 - CMP Control Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_CR1_EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_EN_SHIFT\fP)) & \fBCMP_CR1_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_OPE_SHIFT\fP)) & \fBCMP_CR1_OPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_COS_SHIFT\fP)) & \fBCMP_CR1_COS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_INV_SHIFT\fP)) & \fBCMP_CR1_INV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_PMODE_SHIFT\fP)) & \fBCMP_CR1_PMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_WE_SHIFT\fP)) & \fBCMP_CR1_WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_SE_SHIFT\fP)) & \fBCMP_CR1_SE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPR - CMP Filter Period Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_FPR_FILT_PER_SHIFT\fP)) & \fBCMP_FPR_FILT_PER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCR - CMP Status and Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_SCR_COUT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_COUT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_COUT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_COUT_SHIFT\fP)) & \fBCMP_SCR_COUT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFF_SHIFT\fP)) & \fBCMP_SCR_CFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFR_SHIFT\fP)) & \fBCMP_SCR_CFR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IEF_SHIFT\fP)) & \fBCMP_SCR_IEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IER_SHIFT\fP)) & \fBCMP_SCR_IER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_DMAEN_SHIFT\fP)) & \fBCMP_SCR_DMAEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDACCR - DAC Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VOSEL_SHIFT\fP)) & \fBCMP_DACCR_VOSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VRSEL_SHIFT\fP)) & \fBCMP_DACCR_VRSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_DACEN_SHIFT\fP)) & \fBCMP_DACCR_DACEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMUXCR - MUX Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_MSEL_SHIFT\fP)) & \fBCMP_MUXCR_MSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL_MASK\fP   (0x38U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSEL_SHIFT\fP)) & \fBCMP_MUXCR_PSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSTM_SHIFT\fP)) & \fBCMP_MUXCR_PSTM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCGH1 - CMT Carrier Generator High Data Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CGH1_PH_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CGH1_PH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CGH1_PH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CGH1_PH_SHIFT\fP)) & \fBCMT_CGH1_PH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCGL1 - CMT Carrier Generator Low Data Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CGL1_PL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CGL1_PL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CGL1_PL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CGL1_PL_SHIFT\fP)) & \fBCMT_CGL1_PL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCGH2 - CMT Carrier Generator High Data Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CGH2_SH_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CGH2_SH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CGH2_SH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CGH2_SH_SHIFT\fP)) & \fBCMT_CGH2_SH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCGL2 - CMT Carrier Generator Low Data Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CGL2_SL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CGL2_SL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CGL2_SL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CGL2_SL_SHIFT\fP)) & \fBCMT_CGL2_SL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOC - CMT Output Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_OC_IROPEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_IROPEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_IROPEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_OC_IROPEN_SHIFT\fP)) & \fBCMT_OC_IROPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_OC_CMTPOL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_CMTPOL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_CMTPOL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_OC_CMTPOL_SHIFT\fP)) & \fBCMT_OC_CMTPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_OC_IROL_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_IROL_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMT_OC_IROL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_OC_IROL_SHIFT\fP)) & \fBCMT_OC_IROL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMSC - CMT Modulator Status and Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_MSC_MCGEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_MCGEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_MCGEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_MCGEN_SHIFT\fP)) & \fBCMT_MSC_MCGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCIE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCIE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_EOCIE_SHIFT\fP)) & \fBCMT_MSC_EOCIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_FSK_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_FSK_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_FSK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_FSK_SHIFT\fP)) & \fBCMT_MSC_FSK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_BASE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_BASE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_BASE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_BASE_SHIFT\fP)) & \fBCMT_MSC_BASE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EXSPC_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EXSPC_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EXSPC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_EXSPC_SHIFT\fP)) & \fBCMT_MSC_EXSPC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_CMTDIV_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_CMTDIV_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_CMTDIV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_CMTDIV_SHIFT\fP)) & \fBCMT_MSC_CMTDIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMT_MSC_EOCF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_MSC_EOCF_SHIFT\fP)) & \fBCMT_MSC_EOCF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMD1 - CMT Modulator Data Register Mark High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CMD1_MB_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CMD1_MB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CMD1_MB\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CMD1_MB_SHIFT\fP)) & \fBCMT_CMD1_MB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMD2 - CMT Modulator Data Register Mark Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CMD2_MB_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CMD2_MB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CMD2_MB\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CMD2_MB_SHIFT\fP)) & \fBCMT_CMD2_MB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMD3 - CMT Modulator Data Register Space High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CMD3_SB_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CMD3_SB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CMD3_SB\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CMD3_SB_SHIFT\fP)) & \fBCMT_CMD3_SB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMD4 - CMT Modulator Data Register Space Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_CMD4_SB_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMT_CMD4_SB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_CMD4_SB\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_CMD4_SB_SHIFT\fP)) & \fBCMT_CMD4_SB_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPPS - CMT Primary Prescaler Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_PPS_PPSDIV_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBCMT_PPS_PPSDIV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_PPS_PPSDIV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_PPS_PPSDIV_SHIFT\fP)) & \fBCMT_PPS_PPSDIV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDMA - CMT Direct Memory Access Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCMT_DMA_DMA_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMT_DMA_DMA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMT_DMA_DMA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMT_DMA_DMA_SHIFT\fP)) & \fBCMT_DMA_DMA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATAL - CRC_DATAL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAL_DATAL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAL_DATAL_SHIFT\fP)) & \fBCRC_DATAL_DATAL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATAH - CRC_DATAH register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAH_DATAH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_DATAH_DATAH_SHIFT\fP)) & \fBCRC_DATAH_DATAH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATA - CRC Data register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATA_LL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LL_SHIFT\fP)) & \fBCRC_DATA_LL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_LU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_LU_SHIFT\fP)) & \fBCRC_DATA_LU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HL_SHIFT\fP)) & \fBCRC_DATA_HL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCRC_DATA_HU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_DATA_HU_SHIFT\fP)) & \fBCRC_DATA_HU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATALL - CRC_DATALL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATALL_DATALL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALL_DATALL_SHIFT\fP)) & \fBCRC_DATALL_DATALL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATALU - CRC_DATALU register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATALU_DATALU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATALU_DATALU_SHIFT\fP)) & \fBCRC_DATALU_DATALU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATAHL - CRC_DATAHL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHL_DATAHL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHL_DATAHL_SHIFT\fP)) & \fBCRC_DATAHL_DATAHL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATAHU - CRC_DATAHU register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_DATAHU_DATAHU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_DATAHU_DATAHU_SHIFT\fP)) & \fBCRC_DATAHU_DATAHU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYL - CRC_GPOLYL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYL_GPOLYL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYL_GPOLYL_SHIFT\fP)) & \fBCRC_GPOLYL_GPOLYL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYH - CRC_GPOLYH register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYH_GPOLYH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBCRC_GPOLYH_GPOLYH_SHIFT\fP)) & \fBCRC_GPOLYH_GPOLYH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLY - CRC Polynomial register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_LOW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_LOW_SHIFT\fP)) & \fBCRC_GPOLY_LOW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLY_HIGH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_GPOLY_HIGH_SHIFT\fP)) & \fBCRC_GPOLY_HIGH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYLL - CRC_GPOLYLL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLL_GPOLYLL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLL_GPOLYLL_SHIFT\fP)) & \fBCRC_GPOLYLL_GPOLYLL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYLU - CRC_GPOLYLU register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYLU_GPOLYLU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYLU_GPOLYLU_SHIFT\fP)) & \fBCRC_GPOLYLU_GPOLYLU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYHL - CRC_GPOLYHL register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHL_GPOLYHL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHL_GPOLYHL_SHIFT\fP)) & \fBCRC_GPOLYHL_GPOLYHL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPOLYHU - CRC_GPOLYHU register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_GPOLYHU_GPOLYHU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_GPOLYHU_GPOLYHU_SHIFT\fP)) & \fBCRC_GPOLYHU_GPOLYHU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTRL - CRC Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TCRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TCRC_SHIFT\fP)) & \fBCRC_CTRL_TCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_WAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_WAS_SHIFT\fP)) & \fBCRC_CTRL_WAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_FXOR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_FXOR_SHIFT\fP)) & \fBCRC_CTRL_FXOR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOTR_SHIFT\fP)) & \fBCRC_CTRL_TOTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRL_TOT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBCRC_CTRL_TOT_SHIFT\fP)) & \fBCRC_CTRL_TOT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTRLHU - CRC_CTRLHU register\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TCRC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TCRC_SHIFT\fP)) & \fBCRC_CTRLHU_TCRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_WAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_WAS_SHIFT\fP)) & \fBCRC_CTRLHU_WAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_FXOR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_FXOR_SHIFT\fP)) & \fBCRC_CTRLHU_FXOR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOTR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOTR_SHIFT\fP)) & \fBCRC_CTRLHU_TOTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCRC_CTRLHU_TOT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCRC_CTRLHU_TOT_SHIFT\fP)) & \fBCRC_CTRLHU_TOT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATL - DAC Data Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_DATL_DATA0_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBDAC_DATL_DATA0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_DATL_DATA0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_DATL_DATA0_SHIFT\fP)) & \fBDAC_DATL_DATA0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_DATL_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATH - DAC Data High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_DATH_DATA1_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDAC_DATH_DATA1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_DATH_DATA1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_DATH_DATA1_SHIFT\fP)) & \fBDAC_DATH_DATA1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_DATH_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSR - DAC Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPBF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPBF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPBF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_SR_DACBFRPBF_SHIFT\fP)) & \fBDAC_SR_DACBFRPBF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPTF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPTF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFRPTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_SR_DACBFRPTF_SHIFT\fP)) & \fBDAC_SR_DACBFRPTF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFWMF_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFWMF_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDAC_SR_DACBFWMF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_SR_DACBFWMF_SHIFT\fP)) & \fBDAC_SR_DACBFWMF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC0 - DAC Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_C0_DACBBIEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBBIEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBBIEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACBBIEN_SHIFT\fP)) & \fBDAC_C0_DACBBIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBTIEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBTIEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBTIEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACBTIEN_SHIFT\fP)) & \fBDAC_C0_DACBTIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBWIEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBWIEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACBWIEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACBWIEN_SHIFT\fP)) & \fBDAC_C0_DACBWIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_LPEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_LPEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_LPEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_LPEN_SHIFT\fP)) & \fBDAC_C0_LPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACSWTRG_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACSWTRG_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACSWTRG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACSWTRG_SHIFT\fP)) & \fBDAC_C0_DACSWTRG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACTRGSEL_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACTRGSEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACTRGSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACTRGSEL_SHIFT\fP)) & \fBDAC_C0_DACTRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACRFS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACRFS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACRFS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACRFS_SHIFT\fP)) & \fBDAC_C0_DACRFS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDAC_C0_DACEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C0_DACEN_SHIFT\fP)) & \fBDAC_C0_DACEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC1 - DAC Control Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_C1_DACBFEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C1_DACBFEN_SHIFT\fP)) & \fBDAC_C1_DACBFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFMD_MASK\fP   (0x6U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFMD_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFMD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C1_DACBFMD_SHIFT\fP)) & \fBDAC_C1_DACBFMD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFWM_MASK\fP   (0x18U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFWM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DACBFWM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C1_DACBFWM_SHIFT\fP)) & \fBDAC_C1_DACBFWM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DMAEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DMAEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDAC_C1_DMAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C1_DMAEN_SHIFT\fP)) & \fBDAC_C1_DMAEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC2 - DAC Control Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDAC_C2_DACBFUP_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDAC_C2_DACBFUP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDAC_C2_DACBFUP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C2_DACBFUP_SHIFT\fP)) & \fBDAC_C2_DACBFUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDAC_C2_DACBFRP_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBDAC_C2_DACBFRP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDAC_C2_DACBFRP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDAC_C2_DACBFRP_SHIFT\fP)) & \fBDAC_C2_DACBFRP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR - Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CR_EDBG_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_EDBG_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_EDBG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_EDBG_SHIFT\fP)) & \fBDMA_CR_EDBG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ERCA_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ERCA_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ERCA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_ERCA_SHIFT\fP)) & \fBDMA_CR_ERCA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HOE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HOE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_HOE_SHIFT\fP)) & \fBDMA_CR_HOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HALT_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HALT_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_HALT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_HALT_SHIFT\fP)) & \fBDMA_CR_HALT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CLM_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CLM_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CLM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_CLM_SHIFT\fP)) & \fBDMA_CR_CLM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_EMLM_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_EMLM_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_EMLM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_EMLM_SHIFT\fP)) & \fBDMA_CR_EMLM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ECX_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ECX_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_ECX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_ECX_SHIFT\fP)) & \fBDMA_CR_ECX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CX_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CX_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBDMA_CR_CX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_CR_CX_SHIFT\fP)) & \fBDMA_CR_CX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP_MASK\fP   (0x3000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUAP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUAP_SHIFT\fP)) & \fBMCM_CR_SRAMUAP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMUWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMUWP_SHIFT\fP)) & \fBMCM_CR_SRAMUWP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLAP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLAP_SHIFT\fP)) & \fBMCM_CR_SRAMLAP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBMCM_CR_SRAMLWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_CR_SRAMLWP_SHIFT\fP)) & \fBMCM_CR_SRAMLWP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBES - Error Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_ES_DBE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DBE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_DBE_SHIFT\fP)) & \fBDMA_ES_DBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SBE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SBE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_SBE_SHIFT\fP)) & \fBDMA_ES_SBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SGE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SGE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SGE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_SGE_SHIFT\fP)) & \fBDMA_ES_SGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_NCE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_NCE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_NCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_NCE_SHIFT\fP)) & \fBDMA_ES_NCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DOE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DOE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_DOE_SHIFT\fP)) & \fBDMA_ES_DOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DAE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DAE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_DAE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_DAE_SHIFT\fP)) & \fBDMA_ES_DAE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SOE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SOE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_SOE_SHIFT\fP)) & \fBDMA_ES_SOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SAE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SAE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_SAE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_SAE_SHIFT\fP)) & \fBDMA_ES_SAE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ERRCHN_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ERRCHN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ERRCHN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_ERRCHN_SHIFT\fP)) & \fBDMA_ES_ERRCHN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_CPE_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_CPE_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_CPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_CPE_SHIFT\fP)) & \fBDMA_ES_CPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ECX_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ECX_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_ECX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_ECX_SHIFT\fP)) & \fBDMA_ES_ECX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ES_VLD_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_VLD_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBDMA_ES_VLD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ES_VLD_SHIFT\fP)) & \fBDMA_ES_VLD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBERQ - Enable Request Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ0_SHIFT\fP)) & \fBDMA_ERQ_ERQ0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ1_SHIFT\fP)) & \fBDMA_ERQ_ERQ1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ2_SHIFT\fP)) & \fBDMA_ERQ_ERQ2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ3_SHIFT\fP)) & \fBDMA_ERQ_ERQ3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ4_SHIFT\fP)) & \fBDMA_ERQ_ERQ4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ5_SHIFT\fP)) & \fBDMA_ERQ_ERQ5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ6_SHIFT\fP)) & \fBDMA_ERQ_ERQ6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ7_SHIFT\fP)) & \fBDMA_ERQ_ERQ7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ8_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ8_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ8_SHIFT\fP)) & \fBDMA_ERQ_ERQ8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ9_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ9_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ9_SHIFT\fP)) & \fBDMA_ERQ_ERQ9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ10_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ10_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ10_SHIFT\fP)) & \fBDMA_ERQ_ERQ10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ11_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ11_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ11_SHIFT\fP)) & \fBDMA_ERQ_ERQ11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ12_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ12_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ12_SHIFT\fP)) & \fBDMA_ERQ_ERQ12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ13_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ13_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ13_SHIFT\fP)) & \fBDMA_ERQ_ERQ13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ14_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ14_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ14_SHIFT\fP)) & \fBDMA_ERQ_ERQ14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ15_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ15_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_ERQ_ERQ15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERQ_ERQ15_SHIFT\fP)) & \fBDMA_ERQ_ERQ15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEEI - Enable Error Interrupt Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_EEI_EEI0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI0_SHIFT\fP)) & \fBDMA_EEI_EEI0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI1_SHIFT\fP)) & \fBDMA_EEI_EEI1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI2_SHIFT\fP)) & \fBDMA_EEI_EEI2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI3_SHIFT\fP)) & \fBDMA_EEI_EEI3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI4_SHIFT\fP)) & \fBDMA_EEI_EEI4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI5_SHIFT\fP)) & \fBDMA_EEI_EEI5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI6_SHIFT\fP)) & \fBDMA_EEI_EEI6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI7_SHIFT\fP)) & \fBDMA_EEI_EEI7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI8_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI8_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI8_SHIFT\fP)) & \fBDMA_EEI_EEI8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI9_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI9_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI9_SHIFT\fP)) & \fBDMA_EEI_EEI9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI10_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI10_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI10_SHIFT\fP)) & \fBDMA_EEI_EEI10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI11_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI11_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI11_SHIFT\fP)) & \fBDMA_EEI_EEI11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI12_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI12_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI12_SHIFT\fP)) & \fBDMA_EEI_EEI12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI13_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI13_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI13_SHIFT\fP)) & \fBDMA_EEI_EEI13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI14_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI14_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI14_SHIFT\fP)) & \fBDMA_EEI_EEI14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI15_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI15_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_EEI_EEI15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_EEI_EEI15_SHIFT\fP)) & \fBDMA_EEI_EEI15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCEEI - Clear Enable Error Interrupt Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CEEI_CEEI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_CEEI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_CEEI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CEEI_CEEI_SHIFT\fP)) & \fBDMA_CEEI_CEEI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_CAEE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_CAEE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_CAEE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CEEI_CAEE_SHIFT\fP)) & \fBDMA_CEEI_CAEE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CEEI_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CEEI_NOP_SHIFT\fP)) & \fBDMA_CEEI_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSEEI - Set Enable Error Interrupt Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SEEI_SEEI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_SEEI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_SEEI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SEEI_SEEI_SHIFT\fP)) & \fBDMA_SEEI_SEEI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_SAEE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_SAEE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_SAEE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SEEI_SAEE_SHIFT\fP)) & \fBDMA_SEEI_SAEE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_SEEI_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SEEI_NOP_SHIFT\fP)) & \fBDMA_SEEI_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCERQ - Clear Enable Request Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CERQ_CERQ_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_CERQ_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_CERQ\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERQ_CERQ_SHIFT\fP)) & \fBDMA_CERQ_CERQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_CAER_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_CAER_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_CAER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERQ_CAER_SHIFT\fP)) & \fBDMA_CERQ_CAER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CERQ_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERQ_NOP_SHIFT\fP)) & \fBDMA_CERQ_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSERQ - Set Enable Request Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SERQ_SERQ_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_SERQ_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_SERQ\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SERQ_SERQ_SHIFT\fP)) & \fBDMA_SERQ_SERQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_SAER_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_SAER_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_SAER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SERQ_SAER_SHIFT\fP)) & \fBDMA_SERQ_SAER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_SERQ_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SERQ_NOP_SHIFT\fP)) & \fBDMA_SERQ_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCDNE - Clear DONE Status Bit Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CDNE_CDNE_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_CDNE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_CDNE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CDNE_CDNE_SHIFT\fP)) & \fBDMA_CDNE_CDNE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_CADN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_CADN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_CADN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CDNE_CADN_SHIFT\fP)) & \fBDMA_CDNE_CADN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CDNE_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CDNE_NOP_SHIFT\fP)) & \fBDMA_CDNE_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSSRT - Set START Bit Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SSRT_SSRT_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_SSRT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_SSRT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SSRT_SSRT_SHIFT\fP)) & \fBDMA_SSRT_SSRT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_SAST_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_SAST_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_SAST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SSRT_SAST_SHIFT\fP)) & \fBDMA_SSRT_SAST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_SSRT_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_SSRT_NOP_SHIFT\fP)) & \fBDMA_SSRT_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCERR - Clear Error Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CERR_CERR_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_CERR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_CERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERR_CERR_SHIFT\fP)) & \fBDMA_CERR_CERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_CAEI_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_CAEI_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_CAEI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERR_CAEI_SHIFT\fP)) & \fBDMA_CERR_CAEI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CERR_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CERR_NOP_SHIFT\fP)) & \fBDMA_CERR_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCINT - Clear Interrupt Request Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CINT_CINT_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_CINT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_CINT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CINT_CINT_SHIFT\fP)) & \fBDMA_CINT_CINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_CAIR_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_CAIR_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_CAIR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CINT_CAIR_SHIFT\fP)) & \fBDMA_CINT_CAIR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_NOP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_NOP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CINT_NOP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_CINT_NOP_SHIFT\fP)) & \fBDMA_CINT_NOP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBINT - Interrupt Request Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_INT_INT0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT0_SHIFT\fP)) & \fBDMA_INT_INT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT1_SHIFT\fP)) & \fBDMA_INT_INT1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT2_SHIFT\fP)) & \fBDMA_INT_INT2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT3_SHIFT\fP)) & \fBDMA_INT_INT3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT4_SHIFT\fP)) & \fBDMA_INT_INT4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT5_SHIFT\fP)) & \fBDMA_INT_INT5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT6_SHIFT\fP)) & \fBDMA_INT_INT6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT7_SHIFT\fP)) & \fBDMA_INT_INT7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT8_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT8_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT8_SHIFT\fP)) & \fBDMA_INT_INT8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT9_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT9_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT9_SHIFT\fP)) & \fBDMA_INT_INT9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT10_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT10_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT10_SHIFT\fP)) & \fBDMA_INT_INT10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT11_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT11_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT11_SHIFT\fP)) & \fBDMA_INT_INT11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT12_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT12_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT12_SHIFT\fP)) & \fBDMA_INT_INT12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT13_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT13_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT13_SHIFT\fP)) & \fBDMA_INT_INT13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT14_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT14_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT14_SHIFT\fP)) & \fBDMA_INT_INT14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT15_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT15_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_INT_INT15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_INT_INT15_SHIFT\fP)) & \fBDMA_INT_INT15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBERR - Error Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_ERR_ERR0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR0_SHIFT\fP)) & \fBDMA_ERR_ERR0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR1_SHIFT\fP)) & \fBDMA_ERR_ERR1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR2_SHIFT\fP)) & \fBDMA_ERR_ERR2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR3_SHIFT\fP)) & \fBDMA_ERR_ERR3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR4_SHIFT\fP)) & \fBDMA_ERR_ERR4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR5_SHIFT\fP)) & \fBDMA_ERR_ERR5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR6_SHIFT\fP)) & \fBDMA_ERR_ERR6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR7_SHIFT\fP)) & \fBDMA_ERR_ERR7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR8_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR8_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR8_SHIFT\fP)) & \fBDMA_ERR_ERR8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR9_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR9_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR9_SHIFT\fP)) & \fBDMA_ERR_ERR9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR10_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR10_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR10_SHIFT\fP)) & \fBDMA_ERR_ERR10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR11_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR11_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR11_SHIFT\fP)) & \fBDMA_ERR_ERR11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR12_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR12_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR12_SHIFT\fP)) & \fBDMA_ERR_ERR12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR13_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR13_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR13_SHIFT\fP)) & \fBDMA_ERR_ERR13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR14_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR14_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR14_SHIFT\fP)) & \fBDMA_ERR_ERR14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR15_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR15_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_ERR_ERR15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_ERR_ERR15_SHIFT\fP)) & \fBDMA_ERR_ERR15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBHRS - Hardware Request Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_HRS_HRS0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS0_SHIFT\fP)) & \fBDMA_HRS_HRS0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS1_SHIFT\fP)) & \fBDMA_HRS_HRS1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS2_SHIFT\fP)) & \fBDMA_HRS_HRS2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS3_SHIFT\fP)) & \fBDMA_HRS_HRS3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS4_SHIFT\fP)) & \fBDMA_HRS_HRS4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS5_SHIFT\fP)) & \fBDMA_HRS_HRS5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS6_SHIFT\fP)) & \fBDMA_HRS_HRS6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS7_SHIFT\fP)) & \fBDMA_HRS_HRS7_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS8_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS8_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS8\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS8_SHIFT\fP)) & \fBDMA_HRS_HRS8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS9_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS9_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS9\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS9_SHIFT\fP)) & \fBDMA_HRS_HRS9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS10_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS10_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS10\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS10_SHIFT\fP)) & \fBDMA_HRS_HRS10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS11_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS11_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS11\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS11_SHIFT\fP)) & \fBDMA_HRS_HRS11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS12_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS12_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS12_SHIFT\fP)) & \fBDMA_HRS_HRS12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS13_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS13_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS13\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS13_SHIFT\fP)) & \fBDMA_HRS_HRS13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS14_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS14_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS14\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS14_SHIFT\fP)) & \fBDMA_HRS_HRS14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS15_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS15_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_HRS_HRS15\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_HRS_HRS15_SHIFT\fP)) & \fBDMA_HRS_HRS15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI3 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI3_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI3_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI3_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI3_DPA_SHIFT\fP)) & \fBDMA_DCHPRI3_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI3_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI3_ECP_SHIFT\fP)) & \fBDMA_DCHPRI3_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI2 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI2_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI2_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI2_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI2_DPA_SHIFT\fP)) & \fBDMA_DCHPRI2_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI2_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI2_ECP_SHIFT\fP)) & \fBDMA_DCHPRI2_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI1 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI1_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI1_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI1_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI1_DPA_SHIFT\fP)) & \fBDMA_DCHPRI1_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI1_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI1_ECP_SHIFT\fP)) & \fBDMA_DCHPRI1_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI0 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI0_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI0_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI0_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI0_DPA_SHIFT\fP)) & \fBDMA_DCHPRI0_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI0_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI0_ECP_SHIFT\fP)) & \fBDMA_DCHPRI0_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI7 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI7_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI7_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI7_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI7_DPA_SHIFT\fP)) & \fBDMA_DCHPRI7_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI7_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI7_ECP_SHIFT\fP)) & \fBDMA_DCHPRI7_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI6 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI6_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI6_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI6_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI6_DPA_SHIFT\fP)) & \fBDMA_DCHPRI6_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI6_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI6_ECP_SHIFT\fP)) & \fBDMA_DCHPRI6_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI5 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI5_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI5_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI5_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI5_DPA_SHIFT\fP)) & \fBDMA_DCHPRI5_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI5_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI5_ECP_SHIFT\fP)) & \fBDMA_DCHPRI5_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI4 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI4_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI4_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI4_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI4_DPA_SHIFT\fP)) & \fBDMA_DCHPRI4_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI4_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI4_ECP_SHIFT\fP)) & \fBDMA_DCHPRI4_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI11 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI11_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI11_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI11_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI11_DPA_SHIFT\fP)) & \fBDMA_DCHPRI11_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI11_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI11_ECP_SHIFT\fP)) & \fBDMA_DCHPRI11_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI10 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI10_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI10_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI10_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI10_DPA_SHIFT\fP)) & \fBDMA_DCHPRI10_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI10_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI10_ECP_SHIFT\fP)) & \fBDMA_DCHPRI10_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI9 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI9_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI9_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI9_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI9_DPA_SHIFT\fP)) & \fBDMA_DCHPRI9_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI9_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI9_ECP_SHIFT\fP)) & \fBDMA_DCHPRI9_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI8 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI8_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI8_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI8_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI8_DPA_SHIFT\fP)) & \fBDMA_DCHPRI8_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI8_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI8_ECP_SHIFT\fP)) & \fBDMA_DCHPRI8_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI15 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI15_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI15_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI15_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI15_DPA_SHIFT\fP)) & \fBDMA_DCHPRI15_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI15_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI15_ECP_SHIFT\fP)) & \fBDMA_DCHPRI15_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI14 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI14_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI14_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI14_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI14_DPA_SHIFT\fP)) & \fBDMA_DCHPRI14_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI14_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI14_ECP_SHIFT\fP)) & \fBDMA_DCHPRI14_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI13 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI13_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI13_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI13_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI13_DPA_SHIFT\fP)) & \fBDMA_DCHPRI13_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI13_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI13_ECP_SHIFT\fP)) & \fBDMA_DCHPRI13_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDCHPRI12 - Channel n Priority Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DCHPRI12_CHPRI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_CHPRI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_CHPRI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI12_CHPRI_SHIFT\fP)) & \fBDMA_DCHPRI12_CHPRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_DPA_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_DPA_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_DPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI12_DPA_SHIFT\fP)) & \fBDMA_DCHPRI12_DPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_ECP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_ECP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_DCHPRI12_ECP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMA_DCHPRI12_ECP_SHIFT\fP)) & \fBDMA_DCHPRI12_ECP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSADDR - TCD Source Address\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SADDR_SADDR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_SADDR_SADDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SADDR_SADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_SADDR_SADDR_SHIFT\fP)) & \fBDMA_SADDR_SADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SADDR_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOFF - TCD Signed Source Address Offset\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SOFF_SOFF_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_SOFF_SOFF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SOFF_SOFF\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_SOFF_SOFF_SHIFT\fP)) & \fBDMA_SOFF_SOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SOFF_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATTR - TCD Transfer Attributes\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_ATTR_DSIZE_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_DSIZE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_DSIZE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_ATTR_DSIZE_SHIFT\fP)) & \fBDMA_ATTR_DSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_DMOD_MASK\fP   (0xF8U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_DMOD_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_DMOD\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_ATTR_DMOD_SHIFT\fP)) & \fBDMA_ATTR_DMOD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SSIZE_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SSIZE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SSIZE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_ATTR_SSIZE_SHIFT\fP)) & \fBDMA_ATTR_SSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SMOD_MASK\fP   (0xF800U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SMOD_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_SMOD\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_ATTR_SMOD_SHIFT\fP)) & \fBDMA_ATTR_SMOD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_ATTR_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBNBYTES_MLNO - TCD Minor Byte Count (Minor Loop Disabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_NBYTES_MLNO_NBYTES_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLNO_NBYTES_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLNO_NBYTES\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLNO_NBYTES_SHIFT\fP)) & \fBDMA_NBYTES_MLNO_NBYTES_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLNO_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBNBYTES_MLOFFNO - TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_NBYTES_MASK\fP   (0x3FFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_NBYTES_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_NBYTES\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFNO_NBYTES_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFNO_NBYTES_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_DMLOE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_DMLOE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_DMLOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFNO_DMLOE_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFNO_DMLOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_SMLOE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_SMLOE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_SMLOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFNO_SMLOE_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFNO_SMLOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFNO_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBNBYTES_MLOFFYES - TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_NBYTES_MASK\fP   (0x3FFU)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_NBYTES_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_NBYTES\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFYES_NBYTES_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFYES_NBYTES_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_MLOFF_MASK\fP   (0x3FFFFC00U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_MLOFF_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_MLOFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFYES_MLOFF_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFYES_MLOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_DMLOE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_DMLOE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_DMLOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFYES_DMLOE_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFYES_DMLOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_SMLOE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_SMLOE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_SMLOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_NBYTES_MLOFFYES_SMLOE_SHIFT\fP)) & \fBDMA_NBYTES_MLOFFYES_SMLOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_NBYTES_MLOFFYES_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSLAST - TCD Last Source Address Adjustment\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_SLAST_SLAST_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_SLAST_SLAST_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_SLAST_SLAST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_SLAST_SLAST_SHIFT\fP)) & \fBDMA_SLAST_SLAST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_SLAST_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDADDR - TCD Destination Address\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DADDR_DADDR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_DADDR_DADDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DADDR_DADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_DADDR_DADDR_SHIFT\fP)) & \fBDMA_DADDR_DADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DADDR_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDOFF - TCD Signed Destination Address Offset\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DOFF_DOFF_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_DOFF_DOFF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DOFF_DOFF\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_DOFF_DOFF_SHIFT\fP)) & \fBDMA_DOFF_DOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DOFF_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCITER_ELINKNO - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_CITER_MASK\fP   (0x7FFFU)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_CITER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_CITER\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CITER_ELINKNO_CITER_SHIFT\fP)) & \fBDMA_CITER_ELINKNO_CITER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_ELINK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_ELINK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_ELINK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CITER_ELINKNO_ELINK_SHIFT\fP)) & \fBDMA_CITER_ELINKNO_ELINK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKNO_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCITER_ELINKYES - TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_CITER_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_CITER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_CITER\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CITER_ELINKYES_CITER_SHIFT\fP)) & \fBDMA_CITER_ELINKYES_CITER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_LINKCH_MASK\fP   (0x1E00U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_LINKCH_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_LINKCH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CITER_ELINKYES_LINKCH_SHIFT\fP)) & \fBDMA_CITER_ELINKYES_LINKCH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_ELINK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_ELINK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_ELINK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CITER_ELINKYES_ELINK_SHIFT\fP)) & \fBDMA_CITER_ELINKYES_ELINK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CITER_ELINKYES_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDLAST_SGA - TCD Last Destination Address Adjustment/Scatter Gather Address\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_DLAST_SGA_DLASTSGA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBDMA_DLAST_SGA_DLASTSGA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_DLAST_SGA_DLASTSGA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBDMA_DLAST_SGA_DLASTSGA_SHIFT\fP)) & \fBDMA_DLAST_SGA_DLASTSGA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_DLAST_SGA_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSR - TCD Control and Status\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_CSR_START_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_START_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_START\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_START_SHIFT\fP)) & \fBDMA_CSR_START_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTMAJOR_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTMAJOR_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTMAJOR\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_INTMAJOR_SHIFT\fP)) & \fBDMA_CSR_INTMAJOR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTHALF_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTHALF_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_INTHALF\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_INTHALF_SHIFT\fP)) & \fBDMA_CSR_INTHALF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DREQ_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DREQ_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DREQ\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_DREQ_SHIFT\fP)) & \fBDMA_CSR_DREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ESG_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ESG_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ESG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_ESG_SHIFT\fP)) & \fBDMA_CSR_ESG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORELINK_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORELINK_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORELINK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_MAJORELINK_SHIFT\fP)) & \fBDMA_CSR_MAJORELINK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ACTIVE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ACTIVE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_ACTIVE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_ACTIVE_SHIFT\fP)) & \fBDMA_CSR_ACTIVE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DONE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DONE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_DONE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_DONE_SHIFT\fP)) & \fBDMA_CSR_DONE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORLINKCH_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORLINKCH_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_MAJORLINKCH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_MAJORLINKCH_SHIFT\fP)) & \fBDMA_CSR_MAJORLINKCH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_BWC_MASK\fP   (0xC000U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_BWC_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_BWC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_CSR_BWC_SHIFT\fP)) & \fBDMA_CSR_BWC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_CSR_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBITER_ELINKNO - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_BITER_MASK\fP   (0x7FFFU)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_BITER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_BITER\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_BITER_ELINKNO_BITER_SHIFT\fP)) & \fBDMA_BITER_ELINKNO_BITER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_ELINK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_ELINK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_ELINK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_BITER_ELINKNO_ELINK_SHIFT\fP)) & \fBDMA_BITER_ELINKNO_ELINK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKNO_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBITER_ELINKYES - TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_BITER_MASK\fP   (0x1FFU)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_BITER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_BITER\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_BITER_ELINKYES_BITER_SHIFT\fP)) & \fBDMA_BITER_ELINKYES_BITER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_LINKCH_MASK\fP   (0x1E00U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_LINKCH_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_LINKCH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_BITER_ELINKYES_LINKCH_SHIFT\fP)) & \fBDMA_BITER_ELINKYES_LINKCH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_ELINK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_ELINK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_ELINK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBDMA_BITER_ELINKYES_ELINK_SHIFT\fP)) & \fBDMA_BITER_ELINKYES_ELINK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMA_BITER_ELINKYES_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCHCFG - Channel Configuration register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_SOURCE_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_SOURCE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_SOURCE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMAMUX_CHCFG_SOURCE_SHIFT\fP)) & \fBDMAMUX_CHCFG_SOURCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_TRIG_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_TRIG_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_TRIG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMAMUX_CHCFG_TRIG_SHIFT\fP)) & \fBDMAMUX_CHCFG_TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_ENBL_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_ENBL_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_ENBL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBDMAMUX_CHCFG_ENBL_SHIFT\fP)) & \fBDMAMUX_CHCFG_ENBL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBDMAMUX_CHCFG_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEIR - Interrupt Event Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_TIMER_SHIFT\fP)) & \fBENET_EIR_TS_TIMER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TS_AVAIL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIR_TS_AVAIL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_WAKEUP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_WAKEUP_SHIFT\fP)) & \fBENET_EIR_WAKEUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_PLR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_PLR_SHIFT\fP)) & \fBENET_EIR_PLR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_UN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_UN_SHIFT\fP)) & \fBENET_EIR_UN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RL_SHIFT\fP)) & \fBENET_EIR_RL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_LC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_LC_SHIFT\fP)) & \fBENET_EIR_LC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_EBERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_EBERR_SHIFT\fP)) & \fBENET_EIR_EBERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_MII\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_MII_SHIFT\fP)) & \fBENET_EIR_MII_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXB_SHIFT\fP)) & \fBENET_EIR_RXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_RXF_SHIFT\fP)) & \fBENET_EIR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXB_SHIFT\fP)) & \fBENET_EIR_TXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_TXF_SHIFT\fP)) & \fBENET_EIR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_GRA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_GRA_SHIFT\fP)) & \fBENET_EIR_GRA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABT_SHIFT\fP)) & \fBENET_EIR_BABT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_EIR_BABR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIR_BABR_SHIFT\fP)) & \fBENET_EIR_BABR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEIMR - Interrupt Mask Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_TIMER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_TIMER_SHIFT\fP)) & \fBENET_EIMR_TS_TIMER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TS_AVAIL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TS_AVAIL_SHIFT\fP)) & \fBENET_EIMR_TS_AVAIL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_WAKEUP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_WAKEUP_SHIFT\fP)) & \fBENET_EIMR_WAKEUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_PLR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_PLR_SHIFT\fP)) & \fBENET_EIMR_PLR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_UN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_UN_SHIFT\fP)) & \fBENET_EIMR_UN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RL_SHIFT\fP)) & \fBENET_EIMR_RL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_LC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_LC_SHIFT\fP)) & \fBENET_EIMR_LC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_EBERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_EBERR_SHIFT\fP)) & \fBENET_EIMR_EBERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_MII\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_MII_SHIFT\fP)) & \fBENET_EIMR_MII_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXB_SHIFT\fP)) & \fBENET_EIMR_RXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_RXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_RXF_SHIFT\fP)) & \fBENET_EIMR_RXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXB_SHIFT\fP)) & \fBENET_EIMR_TXB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_TXF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_TXF_SHIFT\fP)) & \fBENET_EIMR_TXF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_GRA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_GRA_SHIFT\fP)) & \fBENET_EIMR_GRA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABT_SHIFT\fP)) & \fBENET_EIMR_BABT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_EIMR_BABR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_EIMR_BABR_SHIFT\fP)) & \fBENET_EIMR_BABR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRDAR - Receive Descriptor Active Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RDAR_RDAR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_RDAR_RDAR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_RDAR_RDAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDAR_RDAR_SHIFT\fP)) & \fBENET_RDAR_RDAR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTDAR - Transmit Descriptor Active Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TDAR_TDAR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBENET_TDAR_TDAR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBENET_TDAR_TDAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDAR_TDAR_SHIFT\fP)) & \fBENET_TDAR_TDAR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBECR - Ethernet Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ECR_RESET_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_RESET_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_RESET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_RESET_SHIFT\fP)) & \fBENET_ECR_RESET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_ETHEREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_ETHEREN_SHIFT\fP)) & \fBENET_ECR_ETHEREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_MAGICEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_MAGICEN_SHIFT\fP)) & \fBENET_ECR_MAGICEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_SLEEP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_SLEEP_SHIFT\fP)) & \fBENET_ECR_SLEEP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_EN1588\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_EN1588_SHIFT\fP)) & \fBENET_ECR_EN1588_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBGEN_SHIFT\fP)) & \fBENET_ECR_DBGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_STOPEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_STOPEN_SHIFT\fP)) & \fBENET_ECR_STOPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_ECR_DBSWP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ECR_DBSWP_SHIFT\fP)) & \fBENET_ECR_DBSWP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMMFR - MII Management Frame Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_MMFR_DATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_DATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_DATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_DATA_SHIFT\fP)) & \fBENET_MMFR_DATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_TA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_TA_SHIFT\fP)) & \fBENET_MMFR_TA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA_MASK\fP   (0x7C0000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_RA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_RA_SHIFT\fP)) & \fBENET_MMFR_RA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA_MASK\fP   (0xF800000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_PA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_PA_SHIFT\fP)) & \fBENET_MMFR_PA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_OP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_OP_SHIFT\fP)) & \fBENET_MMFR_OP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_MMFR_ST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MMFR_ST_SHIFT\fP)) & \fBENET_MMFR_ST_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMSCR - MII Speed Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED_MASK\fP   (0x7EU)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_MII_SPEED\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_MII_SPEED_SHIFT\fP)) & \fBENET_MSCR_MII_SPEED_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_DIS_PRE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_DIS_PRE_SHIFT\fP)) & \fBENET_MSCR_DIS_PRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_MSCR_HOLDTIME\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MSCR_HOLDTIME_SHIFT\fP)) & \fBENET_MSCR_HOLDTIME_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMIBC - MIB Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_CLEAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_CLEAR_SHIFT\fP)) & \fBENET_MIBC_MIB_CLEAR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_IDLE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_IDLE_SHIFT\fP)) & \fBENET_MIBC_MIB_IDLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBENET_MIBC_MIB_DIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MIBC_MIB_DIS_SHIFT\fP)) & \fBENET_MIBC_MIB_DIS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR - Receive Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RCR_LOOP_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_LOOP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_LOOP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_LOOP_SHIFT\fP)) & \fBENET_RCR_LOOP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_DRT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_DRT_SHIFT\fP)) & \fBENET_RCR_DRT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MII_MODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MII_MODE_SHIFT\fP)) & \fBENET_RCR_MII_MODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PROM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PROM_SHIFT\fP)) & \fBENET_RCR_PROM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_BC_REJ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_BC_REJ_SHIFT\fP)) & \fBENET_RCR_BC_REJ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_FCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_FCE_SHIFT\fP)) & \fBENET_RCR_FCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_MODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_MODE_SHIFT\fP)) & \fBENET_RCR_RMII_MODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_RMII_10T\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_RMII_10T_SHIFT\fP)) & \fBENET_RCR_RMII_10T_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PADEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PADEN_SHIFT\fP)) & \fBENET_RCR_PADEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_PAUFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_PAUFWD_SHIFT\fP)) & \fBENET_RCR_PAUFWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CRCFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CRCFWD_SHIFT\fP)) & \fBENET_RCR_CRCFWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_CFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_CFEN_SHIFT\fP)) & \fBENET_RCR_CFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL_MASK\fP   (0x3FFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_MAX_FL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_MAX_FL_SHIFT\fP)) & \fBENET_RCR_MAX_FL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_NLC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_NLC_SHIFT\fP)) & \fBENET_RCR_NLC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBENET_RCR_GRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RCR_GRS_SHIFT\fP)) & \fBENET_RCR_GRS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR - Transmit Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TCR_GTS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_GTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_GTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_GTS_SHIFT\fP)) & \fBENET_TCR_GTS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_FDEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_FDEN_SHIFT\fP)) & \fBENET_TCR_FDEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_TFC_PAUSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_TFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_TFC_PAUSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_RFC_PAUSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_RFC_PAUSE_SHIFT\fP)) & \fBENET_TCR_RFC_PAUSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL_MASK\fP   (0xE0U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDSEL_SHIFT\fP)) & \fBENET_TCR_ADDSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_ADDINS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_ADDINS_SHIFT\fP)) & \fBENET_TCR_ADDINS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_TCR_CRCFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCR_CRCFWD_SHIFT\fP)) & \fBENET_TCR_CRCFWD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPALR - Physical Address Lower Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_PALR_PADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_PALR_PADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_PALR_PADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PALR_PADDR1_SHIFT\fP)) & \fBENET_PALR_PADDR1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPAUR - Physical Address Upper Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_PAUR_TYPE_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_TYPE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_TYPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_TYPE_SHIFT\fP)) & \fBENET_PAUR_TYPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_PAUR_PADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_PAUR_PADDR2_SHIFT\fP)) & \fBENET_PAUR_PADDR2_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOPD - Opcode/Pause Duration Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_PAUSE_DUR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_PAUSE_DUR_SHIFT\fP)) & \fBENET_OPD_PAUSE_DUR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_OPD_OPCODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_OPD_OPCODE_SHIFT\fP)) & \fBENET_OPD_OPCODE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIAUR - Descriptor Individual Upper Address Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IAUR_IADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IAUR_IADDR1_SHIFT\fP)) & \fBENET_IAUR_IADDR1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIALR - Descriptor Individual Lower Address Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IALR_IADDR2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IALR_IADDR2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IALR_IADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IALR_IADDR2_SHIFT\fP)) & \fBENET_IALR_IADDR2_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGAUR - Descriptor Group Upper Address Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_GAUR_GADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GAUR_GADDR1_SHIFT\fP)) & \fBENET_GAUR_GADDR1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGALR - Descriptor Group Lower Address Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_GALR_GADDR2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_GALR_GADDR2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_GALR_GADDR2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_GALR_GADDR2_SHIFT\fP)) & \fBENET_GALR_GADDR2_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTFWR - Transmit FIFO Watermark Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TFWR_TFWR_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_TFWR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_TFWR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_TFWR_SHIFT\fP)) & \fBENET_TFWR_TFWR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_TFWR_STRFWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TFWR_STRFWD_SHIFT\fP)) & \fBENET_TFWR_STRFWD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRDSR - Receive Descriptor Ring Start Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START_MASK\fP   (0xFFFFFFF8U)"
.br
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_RDSR_R_DES_START\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RDSR_R_DES_START_SHIFT\fP)) & \fBENET_RDSR_R_DES_START_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTDSR - Transmit Buffer Descriptor Ring Start Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START_MASK\fP   (0xFFFFFFF8U)"
.br
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TDSR_X_DES_START\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TDSR_X_DES_START_SHIFT\fP)) & \fBENET_TDSR_X_DES_START_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMRBR - Maximum Receive Buffer Size Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE_MASK\fP   (0x3FF0U)"
.br
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_MRBR_R_BUF_SIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_MRBR_R_BUF_SIZE_SHIFT\fP)) & \fBENET_MRBR_R_BUF_SIZE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRSFL - Receive FIFO Section Full Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RSFL_RX_SECTION_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSFL_RX_SECTION_FULL_SHIFT\fP)) & \fBENET_RSFL_RX_SECTION_FULL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRSEM - Receive FIFO Section Empty Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_RX_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_RX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_RX_SECTION_EMPTY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBENET_RSEM_STAT_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RSEM_STAT_SECTION_EMPTY_SHIFT\fP)) & \fBENET_RSEM_STAT_SECTION_EMPTY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRAEM - Receive FIFO Almost Empty Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RAEM_RX_ALMOST_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAEM_RX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_RAEM_RX_ALMOST_EMPTY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRAFL - Receive FIFO Almost Full Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RAFL_RX_ALMOST_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RAFL_RX_ALMOST_FULL_SHIFT\fP)) & \fBENET_RAFL_RX_ALMOST_FULL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTSEM - Transmit FIFO Section Empty Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TSEM_TX_SECTION_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TSEM_TX_SECTION_EMPTY_SHIFT\fP)) & \fBENET_TSEM_TX_SECTION_EMPTY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAEM - Transmit FIFO Almost Empty Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TAEM_TX_ALMOST_EMPTY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAEM_TX_ALMOST_EMPTY_SHIFT\fP)) & \fBENET_TAEM_TX_ALMOST_EMPTY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAFL - Transmit FIFO Almost Full Threshold\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TAFL_TX_ALMOST_FULL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TAFL_TX_ALMOST_FULL_SHIFT\fP)) & \fBENET_TAFL_TX_ALMOST_FULL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIPG - Transmit Inter-Packet Gap\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TIPG_IPG_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBENET_TIPG_IPG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TIPG_IPG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TIPG_IPG_SHIFT\fP)) & \fBENET_TIPG_IPG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFTRL - Frame Truncation Length\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL_MASK\fP   (0x3FFFU)"
.br
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_FTRL_TRUNC_FL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_FTRL_TRUNC_FL_SHIFT\fP)) & \fBENET_FTRL_TRUNC_FL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTACC - Transmit Accelerator Function Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_SHIFT16\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_SHIFT16_SHIFT\fP)) & \fBENET_TACC_SHIFT16_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_IPCHK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_IPCHK_SHIFT\fP)) & \fBENET_TACC_IPCHK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_TACC_PROCHK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TACC_PROCHK_SHIFT\fP)) & \fBENET_TACC_PROCHK_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRACC - Receive Accelerator Function Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RACC_PADREM_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PADREM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PADREM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PADREM_SHIFT\fP)) & \fBENET_RACC_PADREM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_IPDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_IPDIS_SHIFT\fP)) & \fBENET_RACC_IPDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_PRODIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_PRODIS_SHIFT\fP)) & \fBENET_RACC_PRODIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_LINEDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_LINEDIS_SHIFT\fP)) & \fBENET_RACC_LINEDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_RACC_SHIFT16\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RACC_SHIFT16_SHIFT\fP)) & \fBENET_RACC_SHIFT16_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_PACKETS - Tx Packet Count Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_PACKETS_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_PACKETS_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_PACKETS_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_BC_PKT - Tx Broadcast Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_BC_PKT_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_BC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_BC_PKT_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_MC_PKT - Tx Multicast Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_MC_PKT_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_MC_PKT_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_MC_PKT_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_CRC_ALIGN_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_CRC_ALIGN_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_UNDERSIZE_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_UNDERSIZE_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OVERSIZE_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OVERSIZE_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_OVERSIZE_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_FRAG_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_FRAG_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_FRAG_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_JAB_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_JAB_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_JAB_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_COL - Tx Collision Count Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_COL_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_COL_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_COL_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P64 - Tx 64-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P64_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P64_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P64_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P65TO127_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P65TO127_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P65TO127_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P128TO255_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P128TO255_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P128TO255_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P256TO511_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P256TO511_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P256TO511_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P512TO1023_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P512TO1023_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P512TO1023_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P1024TO2047_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P1024TO2047_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P1024TO2047_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_P_GTE2048_TXPKTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_P_GTE2048_TXPKTS_SHIFT\fP)) & \fBENET_RMON_T_P_GTE2048_TXPKTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_T_OCTETS - Tx Octets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_T_OCTETS_TXOCTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_T_OCTETS_TXOCTS_SHIFT\fP)) & \fBENET_RMON_T_OCTETS_TXOCTS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FRAME_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FRAME_OK_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_1COL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_1COL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_1COL_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MCOL_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_DEF_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_DEF_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_DEF_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_LCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_LCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_LCOL_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_EXCOL_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_EXCOL_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_EXCOL_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_MACERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_MACERR_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_CSERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_CSERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_CSERR_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_FDXFC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_FDXFC_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_T_OCTETS_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_T_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_T_OCTETS_OK_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_PACKETS - Rx Packet Count Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_PACKETS_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_PACKETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_PACKETS_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_BC_PKT - Rx Broadcast Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_BC_PKT_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_BC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_BC_PKT_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_MC_PKT - Rx Multicast Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_MC_PKT_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_MC_PKT_COUNT_SHIFT\fP)) & \fBENET_RMON_R_MC_PKT_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_CRC_ALIGN_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_CRC_ALIGN_COUNT_SHIFT\fP)) & \fBENET_RMON_R_CRC_ALIGN_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_UNDERSIZE_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_UNDERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_UNDERSIZE_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OVERSIZE_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OVERSIZE_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OVERSIZE_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_FRAG_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_FRAG_COUNT_SHIFT\fP)) & \fBENET_RMON_R_FRAG_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_JAB_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_JAB_COUNT_SHIFT\fP)) & \fBENET_RMON_R_JAB_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P64 - Rx 64-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P64_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P64_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P64_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P65TO127_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P65TO127_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P65TO127_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P128TO255_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P128TO255_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P128TO255_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P256TO511_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P256TO511_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P256TO511_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P512TO1023_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P512TO1023_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P512TO1023_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P1024TO2047_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P1024TO2047_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P1024TO2047_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_P_GTE2048_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_P_GTE2048_COUNT_SHIFT\fP)) & \fBENET_RMON_R_P_GTE2048_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMON_R_OCTETS - Rx Octets Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_RMON_R_OCTETS_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_RMON_R_OCTETS_COUNT_SHIFT\fP)) & \fBENET_RMON_R_OCTETS_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_DROP - Frames not Counted Correctly Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_DROP_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_DROP_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_DROP_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_FRAME_OK - Frames Received OK Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FRAME_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FRAME_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FRAME_OK_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_CRC - Frames Received with CRC Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_CRC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_CRC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_CRC_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_ALIGN_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_ALIGN_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_ALIGN_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_MACERR_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_MACERR_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_MACERR_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_FDXFC_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_FDXFC_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_FDXFC_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_IEEE_R_OCTETS_OK_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_IEEE_R_OCTETS_OK_COUNT_SHIFT\fP)) & \fBENET_IEEE_R_OCTETS_OK_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATCR - Adjustable Timer Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATCR_EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_EN_SHIFT\fP)) & \fBENET_ATCR_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFEN_SHIFT\fP)) & \fBENET_ATCR_OFFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_OFFRST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_OFFRST_SHIFT\fP)) & \fBENET_ATCR_OFFRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PEREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PEREN_SHIFT\fP)) & \fBENET_ATCR_PEREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_PINPER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_PINPER_SHIFT\fP)) & \fBENET_ATCR_PINPER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_RESTART\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_RESTART_SHIFT\fP)) & \fBENET_ATCR_RESTART_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_CAPTURE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_CAPTURE_SHIFT\fP)) & \fBENET_ATCR_CAPTURE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBENET_ATCR_SLAVE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCR_SLAVE_SHIFT\fP)) & \fBENET_ATCR_SLAVE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATVR - Timer Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATVR_ATIME_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATVR_ATIME_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATVR_ATIME\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATVR_ATIME_SHIFT\fP)) & \fBENET_ATVR_ATIME_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATOFF - Timer Offset Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATOFF_OFFSET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATOFF_OFFSET_SHIFT\fP)) & \fBENET_ATOFF_OFFSET_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATPER - Timer Period Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATPER_PERIOD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATPER_PERIOD_SHIFT\fP)) & \fBENET_ATPER_PERIOD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATCOR - Timer Correction Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATCOR_COR_MASK\fP   (0x7FFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATCOR_COR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATCOR_COR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATCOR_COR_SHIFT\fP)) & \fBENET_ATCOR_COR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATINC - Time-Stamping Clock Period Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATINC_INC_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_SHIFT\fP)) & \fBENET_ATINC_INC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR_MASK\fP   (0x7F00U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBENET_ATINC_INC_CORR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATINC_INC_CORR_SHIFT\fP)) & \fBENET_ATINC_INC_CORR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATSTMP - Timestamp of Last Transmitted Frame\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_ATSTMP_TIMESTAMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_ATSTMP_TIMESTAMP_SHIFT\fP)) & \fBENET_ATSTMP_TIMESTAMP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTGSR - Timer Global Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TGSR_TF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF0_SHIFT\fP)) & \fBENET_TGSR_TF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF1_SHIFT\fP)) & \fBENET_TGSR_TF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF2_SHIFT\fP)) & \fBENET_TGSR_TF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBENET_TGSR_TF3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TGSR_TF3_SHIFT\fP)) & \fBENET_TGSR_TF3_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCSR - Timer Control Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TCSR_TDRE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TDRE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TDRE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TDRE_SHIFT\fP)) & \fBENET_TCSR_TDRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE_MASK\fP   (0x3CU)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TMODE_SHIFT\fP)) & \fBENET_TCSR_TMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TIE_SHIFT\fP)) & \fBENET_TCSR_TIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_TF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCSR_TF_SHIFT\fP)) & \fBENET_TCSR_TF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCSR_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCCR - Timer Compare Capture Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBENET_TCCR_TCC_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_TCC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_TCC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBENET_TCCR_TCC_SHIFT\fP)) & \fBENET_TCCR_TCC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBENET_TCCR_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTRL - Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_EWMEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_EWMEN_SHIFT\fP)) & \fBEWM_CTRL_EWMEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_ASSIN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_ASSIN_SHIFT\fP)) & \fBEWM_CTRL_ASSIN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INEN_SHIFT\fP)) & \fBEWM_CTRL_INEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBEWM_CTRL_INTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CTRL_INTEN_SHIFT\fP)) & \fBEWM_CTRL_INTEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSERV - Service Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_SERV_SERVICE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_SERV_SERVICE_SHIFT\fP)) & \fBEWM_SERV_SERVICE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMPL - Compare Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CMPL_COMPAREL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPL_COMPAREL_SHIFT\fP)) & \fBEWM_CMPL_COMPAREL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMPH - Compare High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBEWM_CMPH_COMPAREH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBEWM_CMPH_COMPAREH_SHIFT\fP)) & \fBEWM_CMPH_COMPAREH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSAR - Chip Select Address Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFB_CSAR_BA_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBFB_CSAR_BA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFB_CSAR_BA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSAR_BA_SHIFT\fP)) & \fBFB_CSAR_BA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSAR_COUNT\fP   (6U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSMR - Chip Select Mask Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFB_CSMR_V_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_V_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_V\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSMR_V_SHIFT\fP)) & \fBFB_CSMR_V_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_WP_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_WP_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_WP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSMR_WP_SHIFT\fP)) & \fBFB_CSMR_WP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_BAM_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_BAM_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_BAM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSMR_BAM_SHIFT\fP)) & \fBFB_CSMR_BAM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSMR_COUNT\fP   (6U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSCR - Chip Select Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFB_CSCR_BSTW_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BSTW_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BSTW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_BSTW_SHIFT\fP)) & \fBFB_CSCR_BSTW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BSTR_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BSTR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BSTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_BSTR_SHIFT\fP)) & \fBFB_CSCR_BSTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BEM_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BEM_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BEM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_BEM_SHIFT\fP)) & \fBFB_CSCR_BEM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_PS_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_PS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_PS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_PS_SHIFT\fP)) & \fBFB_CSCR_PS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_AA_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_AA_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_AA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_AA_SHIFT\fP)) & \fBFB_CSCR_AA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BLS_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BLS_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_BLS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_BLS_SHIFT\fP)) & \fBFB_CSCR_BLS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WS_MASK\fP   (0xFC00U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WS_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_WS_SHIFT\fP)) & \fBFB_CSCR_WS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WRAH_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WRAH_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_WRAH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_WRAH_SHIFT\fP)) & \fBFB_CSCR_WRAH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_RDAH_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_RDAH_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_RDAH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_RDAH_SHIFT\fP)) & \fBFB_CSCR_RDAH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_ASET_MASK\fP   (0x300000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_ASET_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_ASET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_ASET_SHIFT\fP)) & \fBFB_CSCR_ASET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_EXTS_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_EXTS_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_EXTS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_EXTS_SHIFT\fP)) & \fBFB_CSCR_EXTS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWSEN_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWSEN_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_SWSEN_SHIFT\fP)) & \fBFB_CSCR_SWSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWS_MASK\fP   (0xFC000000U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWS_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_SWS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSCR_SWS_SHIFT\fP)) & \fBFB_CSCR_SWS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSCR_COUNT\fP   (6U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSPMCR - Chip Select port Multiplexing Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP5_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP5_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSPMCR_GROUP5_SHIFT\fP)) & \fBFB_CSPMCR_GROUP5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP4_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP4_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSPMCR_GROUP4_SHIFT\fP)) & \fBFB_CSPMCR_GROUP4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP3_MASK\fP   (0xF00000U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP3_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSPMCR_GROUP3_SHIFT\fP)) & \fBFB_CSPMCR_GROUP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP2_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP2_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSPMCR_GROUP2_SHIFT\fP)) & \fBFB_CSPMCR_GROUP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP1_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP1_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBFB_CSPMCR_GROUP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFB_CSPMCR_GROUP1_SHIFT\fP)) & \fBFB_CSPMCR_GROUP1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPFAPR - Flash Access Protection Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_PFAPR_M0AP_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M0AP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M0AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M0AP_SHIFT\fP)) & \fBFMC_PFAPR_M0AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1AP_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1AP_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M1AP_SHIFT\fP)) & \fBFMC_PFAPR_M1AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2AP_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2AP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M2AP_SHIFT\fP)) & \fBFMC_PFAPR_M2AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3AP_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3AP_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M3AP_SHIFT\fP)) & \fBFMC_PFAPR_M3AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4AP_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4AP_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M4AP_SHIFT\fP)) & \fBFMC_PFAPR_M4AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5AP_MASK\fP   (0xC00U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5AP_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M5AP_SHIFT\fP)) & \fBFMC_PFAPR_M5AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6AP_MASK\fP   (0x3000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6AP_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M6AP_SHIFT\fP)) & \fBFMC_PFAPR_M6AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7AP_MASK\fP   (0xC000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7AP_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7AP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M7AP_SHIFT\fP)) & \fBFMC_PFAPR_M7AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M0PFD_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M0PFD_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M0PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M0PFD_SHIFT\fP)) & \fBFMC_PFAPR_M0PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1PFD_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1PFD_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M1PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M1PFD_SHIFT\fP)) & \fBFMC_PFAPR_M1PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2PFD_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2PFD_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M2PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M2PFD_SHIFT\fP)) & \fBFMC_PFAPR_M2PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3PFD_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3PFD_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M3PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M3PFD_SHIFT\fP)) & \fBFMC_PFAPR_M3PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4PFD_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4PFD_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M4PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M4PFD_SHIFT\fP)) & \fBFMC_PFAPR_M4PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5PFD_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5PFD_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M5PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M5PFD_SHIFT\fP)) & \fBFMC_PFAPR_M5PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6PFD_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6PFD_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M6PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M6PFD_SHIFT\fP)) & \fBFMC_PFAPR_M6PFD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7PFD_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7PFD_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBFMC_PFAPR_M7PFD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFAPR_M7PFD_SHIFT\fP)) & \fBFMC_PFAPR_M7PFD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPFB0CR - Flash Bank 0 Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0SEBE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0SEBE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0SEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0SEBE_SHIFT\fP)) & \fBFMC_PFB0CR_B0SEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0IPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0IPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0IPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0IPE_SHIFT\fP)) & \fBFMC_PFB0CR_B0IPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DPE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DPE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0DPE_SHIFT\fP)) & \fBFMC_PFB0CR_B0DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0ICE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0ICE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0ICE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0ICE_SHIFT\fP)) & \fBFMC_PFB0CR_B0ICE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DCE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DCE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0DCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0DCE_SHIFT\fP)) & \fBFMC_PFB0CR_B0DCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CRC_MASK\fP   (0xE0U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CRC_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_CRC_SHIFT\fP)) & \fBFMC_PFB0CR_CRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0MW_MASK\fP   (0x60000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0MW_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0MW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0MW_SHIFT\fP)) & \fBFMC_PFB0CR_B0MW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_S_B_INV_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_S_B_INV_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_S_B_INV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_S_B_INV_SHIFT\fP)) & \fBFMC_PFB0CR_S_B_INV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CINV_WAY_MASK\fP   (0xF00000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CINV_WAY_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CINV_WAY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_CINV_WAY_SHIFT\fP)) & \fBFMC_PFB0CR_CINV_WAY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CLCK_WAY_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CLCK_WAY_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_CLCK_WAY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_CLCK_WAY_SHIFT\fP)) & \fBFMC_PFB0CR_CLCK_WAY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0RWSC_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0RWSC_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB0CR_B0RWSC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB0CR_B0RWSC_SHIFT\fP)) & \fBFMC_PFB0CR_B0RWSC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPFB1CR - Flash Bank 1 Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1SEBE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1SEBE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1SEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1SEBE_SHIFT\fP)) & \fBFMC_PFB1CR_B1SEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1IPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1IPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1IPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1IPE_SHIFT\fP)) & \fBFMC_PFB1CR_B1IPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DPE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DPE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1DPE_SHIFT\fP)) & \fBFMC_PFB1CR_B1DPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1ICE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1ICE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1ICE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1ICE_SHIFT\fP)) & \fBFMC_PFB1CR_B1ICE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DCE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DCE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1DCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1DCE_SHIFT\fP)) & \fBFMC_PFB1CR_B1DCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1MW_MASK\fP   (0x60000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1MW_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1MW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1MW_SHIFT\fP)) & \fBFMC_PFB1CR_B1MW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1RWSC_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1RWSC_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBFMC_PFB1CR_B1RWSC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_PFB1CR_B1RWSC_SHIFT\fP)) & \fBFMC_PFB1CR_B1RWSC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAGVDW0S - Cache Tag Storage\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_valid_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_valid_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_valid\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW0S_valid_SHIFT\fP)) & \fBFMC_TAGVDW0S_valid_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_tag_MASK\fP   (0x7FFE0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_tag_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_tag\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW0S_tag_SHIFT\fP)) & \fBFMC_TAGVDW0S_tag_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW0S_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAGVDW1S - Cache Tag Storage\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_valid_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_valid_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_valid\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW1S_valid_SHIFT\fP)) & \fBFMC_TAGVDW1S_valid_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_tag_MASK\fP   (0x7FFE0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_tag_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_tag\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW1S_tag_SHIFT\fP)) & \fBFMC_TAGVDW1S_tag_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW1S_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAGVDW2S - Cache Tag Storage\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_valid_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_valid_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_valid\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW2S_valid_SHIFT\fP)) & \fBFMC_TAGVDW2S_valid_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_tag_MASK\fP   (0x7FFE0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_tag_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_tag\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW2S_tag_SHIFT\fP)) & \fBFMC_TAGVDW2S_tag_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW2S_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAGVDW3S - Cache Tag Storage\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_valid_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_valid_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_valid\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW3S_valid_SHIFT\fP)) & \fBFMC_TAGVDW3S_valid_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_tag_MASK\fP   (0x7FFE0U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_tag_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_tag\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_TAGVDW3S_tag_SHIFT\fP)) & \fBFMC_TAGVDW3S_tag_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_TAGVDW3S_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATA_U - Cache Data Storage (upper word)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_DATA_U_data_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_U_data_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_U_data\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_DATA_U_data_SHIFT\fP)) & \fBFMC_DATA_U_data_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_U_COUNT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_U_COUNT2\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATA_L - Cache Data Storage (lower word)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFMC_DATA_L_data_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_L_data_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_L_data\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFMC_DATA_L_data_SHIFT\fP)) & \fBFMC_DATA_L_data_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_L_COUNT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFMC_DATA_L_COUNT2\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFSTAT - Flash Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FSTAT_MGSTAT0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_MGSTAT0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_MGSTAT0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSTAT_MGSTAT0_SHIFT\fP)) & \fBFTFE_FSTAT_MGSTAT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_FPVIOL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_FPVIOL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_FPVIOL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSTAT_FPVIOL_SHIFT\fP)) & \fBFTFE_FSTAT_FPVIOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_ACCERR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_ACCERR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_ACCERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSTAT_ACCERR_SHIFT\fP)) & \fBFTFE_FSTAT_ACCERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_RDCOLERR_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_RDCOLERR_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_RDCOLERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSTAT_RDCOLERR_SHIFT\fP)) & \fBFTFE_FSTAT_RDCOLERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_CCIF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_CCIF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSTAT_CCIF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSTAT_CCIF_SHIFT\fP)) & \fBFTFE_FSTAT_CCIF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCNFG - Flash Configuration Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCNFG_EEERDY_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_EEERDY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_EEERDY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_EEERDY_SHIFT\fP)) & \fBFTFE_FCNFG_EEERDY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RAMRDY_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RAMRDY_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RAMRDY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_RAMRDY_SHIFT\fP)) & \fBFTFE_FCNFG_RAMRDY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_PFLSH_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_PFLSH_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_PFLSH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_PFLSH_SHIFT\fP)) & \fBFTFE_FCNFG_PFLSH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_SWAP_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_SWAP_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_SWAP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_SWAP_SHIFT\fP)) & \fBFTFE_FCNFG_SWAP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSSUSP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSSUSP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSSUSP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_ERSSUSP_SHIFT\fP)) & \fBFTFE_FCNFG_ERSSUSP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSAREQ_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSAREQ_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_ERSAREQ\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_ERSAREQ_SHIFT\fP)) & \fBFTFE_FCNFG_ERSAREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RDCOLLIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RDCOLLIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_RDCOLLIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_RDCOLLIE_SHIFT\fP)) & \fBFTFE_FCNFG_RDCOLLIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_CCIE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_CCIE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCNFG_CCIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCNFG_CCIE_SHIFT\fP)) & \fBFTFE_FCNFG_CCIE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFSEC - Flash Security Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FSEC_SEC_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_SEC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_SEC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSEC_SEC_SHIFT\fP)) & \fBFTFE_FSEC_SEC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_FSLACC_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_FSLACC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_FSLACC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSEC_FSLACC_SHIFT\fP)) & \fBFTFE_FSEC_FSLACC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_MEEN_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_MEEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_MEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSEC_MEEN_SHIFT\fP)) & \fBFTFE_FSEC_MEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_KEYEN_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_KEYEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTFE_FSEC_KEYEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FSEC_KEYEN_SHIFT\fP)) & \fBFTFE_FSEC_KEYEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFOPT - Flash Option Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FOPT_OPT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FOPT_OPT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FOPT_OPT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FOPT_OPT_SHIFT\fP)) & \fBFTFE_FOPT_OPT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB3 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB3_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB3_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB3_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB3_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB3_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB2 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB2_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB2_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB2_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB2_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB2_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB1 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB1_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB1_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB1_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB1_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB1_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB0 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB0_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB0_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB0_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB0_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB0_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB7 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB7_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB7_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB7_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB7_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB7_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB6 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB6_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB6_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB6_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB6_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB6_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB5 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB5_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB5_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB5_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB5_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB5_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB4 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB4_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB4_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB4_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB4_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB4_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOBB - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOBB_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOBB_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOBB_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOBB_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOBB_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOBA - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOBA_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOBA_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOBA_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOBA_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOBA_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB9 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB9_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB9_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB9_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB9_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB9_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCCOB8 - Flash Common Command Object Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FCCOB8_CCOBn_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB8_CCOBn_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FCCOB8_CCOBn\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FCCOB8_CCOBn_SHIFT\fP)) & \fBFTFE_FCCOB8_CCOBn_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT3 - Program Flash Protection Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FPROT3_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT3_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT3_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FPROT3_PROT_SHIFT\fP)) & \fBFTFE_FPROT3_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT2 - Program Flash Protection Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FPROT2_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT2_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT2_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FPROT2_PROT_SHIFT\fP)) & \fBFTFE_FPROT2_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT1 - Program Flash Protection Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FPROT1_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT1_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT1_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FPROT1_PROT_SHIFT\fP)) & \fBFTFE_FPROT1_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT0 - Program Flash Protection Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FPROT0_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT0_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FPROT0_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FPROT0_PROT_SHIFT\fP)) & \fBFTFE_FPROT0_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFEPROT - EEPROM Protection Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FEPROT_EPROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FEPROT_EPROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FEPROT_EPROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FEPROT_EPROT_SHIFT\fP)) & \fBFTFE_FEPROT_EPROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFDPROT - Data Flash Protection Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTFE_FDPROT_DPROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBFTFE_FDPROT_DPROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTFE_FDPROT_DPROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBFTFE_FDPROT_DPROT_SHIFT\fP)) & \fBFTFE_FDPROT_DPROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC - Status And Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_SC_PS_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_PS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_PS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SC_PS_SHIFT\fP)) & \fBFTM_SC_PS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CLKS_MASK\fP   (0x18U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CLKS_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CLKS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SC_CLKS_SHIFT\fP)) & \fBFTM_SC_CLKS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CPWMS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CPWMS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_CPWMS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SC_CPWMS_SHIFT\fP)) & \fBFTM_SC_CPWMS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SC_TOIE_SHIFT\fP)) & \fBFTM_SC_TOIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_SC_TOF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SC_TOF_SHIFT\fP)) & \fBFTM_SC_TOF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCNT - Counter\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_CNT_COUNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBFTM_CNT_COUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_CNT_COUNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CNT_COUNT_SHIFT\fP)) & \fBFTM_CNT_COUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMOD - Modulo\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_MOD_MOD_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBFTM_MOD_MOD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_MOD_MOD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MOD_MOD_SHIFT\fP)) & \fBFTM_MOD_MOD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCnSC - Channel (n) Status And Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_CnSC_DMA_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_DMA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_DMA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_DMA_SHIFT\fP)) & \fBFTM_CnSC_DMA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSA_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSA_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_ELSA_SHIFT\fP)) & \fBFTM_CnSC_ELSA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSB_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSB_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_ELSB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_ELSB_SHIFT\fP)) & \fBFTM_CnSC_ELSB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSA_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSA_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_MSA_SHIFT\fP)) & \fBFTM_CnSC_MSA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSB_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSB_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_MSB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_MSB_SHIFT\fP)) & \fBFTM_CnSC_MSB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_CHIE_SHIFT\fP)) & \fBFTM_CnSC_CHIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_CHF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnSC_CHF_SHIFT\fP)) & \fBFTM_CnSC_CHF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnSC_COUNT\fP   (8U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCnV - Channel (n) Value\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_CnV_VAL_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBFTM_CnV_VAL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_CnV_VAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CnV_VAL_SHIFT\fP)) & \fBFTM_CnV_VAL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CnV_COUNT\fP   (8U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCNTIN - Counter Initial Value\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_CNTIN_INIT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBFTM_CNTIN_INIT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_CNTIN_INIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CNTIN_INIT_SHIFT\fP)) & \fBFTM_CNTIN_INIT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTATUS - Capture And Compare Status\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_STATUS_CH0F_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH0F_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH0F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH0F_SHIFT\fP)) & \fBFTM_STATUS_CH0F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH1F_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH1F_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH1F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH1F_SHIFT\fP)) & \fBFTM_STATUS_CH1F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH2F_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH2F_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH2F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH2F_SHIFT\fP)) & \fBFTM_STATUS_CH2F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH3F_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH3F_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH3F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH3F_SHIFT\fP)) & \fBFTM_STATUS_CH3F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH4F_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH4F_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH4F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH4F_SHIFT\fP)) & \fBFTM_STATUS_CH4F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH5F_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH5F_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH5F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH5F_SHIFT\fP)) & \fBFTM_STATUS_CH5F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH6F_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH6F_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH6F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH6F_SHIFT\fP)) & \fBFTM_STATUS_CH6F_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH7F_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH7F_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_STATUS_CH7F\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_STATUS_CH7F_SHIFT\fP)) & \fBFTM_STATUS_CH7F_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMODE - Features Mode Selection\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_MODE_FTMEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FTMEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FTMEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_FTMEN_SHIFT\fP)) & \fBFTM_MODE_FTMEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_INIT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_INIT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_INIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_INIT_SHIFT\fP)) & \fBFTM_MODE_INIT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_WPDIS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_WPDIS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_WPDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_WPDIS_SHIFT\fP)) & \fBFTM_MODE_WPDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_PWMSYNC_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_PWMSYNC_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_PWMSYNC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_PWMSYNC_SHIFT\fP)) & \fBFTM_MODE_PWMSYNC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_CAPTEST_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_CAPTEST_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_CAPTEST\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_CAPTEST_SHIFT\fP)) & \fBFTM_MODE_CAPTEST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTM_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTM_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_FAULTM_SHIFT\fP)) & \fBFTM_MODE_FAULTM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTIE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTIE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_MODE_FAULTIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_MODE_FAULTIE_SHIFT\fP)) & \fBFTM_MODE_FAULTIE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSYNC - Synchronization\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMIN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMIN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMIN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_CNTMIN_SHIFT\fP)) & \fBFTM_SYNC_CNTMIN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMAX_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMAX_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_CNTMAX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_CNTMAX_SHIFT\fP)) & \fBFTM_SYNC_CNTMAX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_REINIT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_REINIT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_REINIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_REINIT_SHIFT\fP)) & \fBFTM_SYNC_REINIT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SYNCHOM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SYNCHOM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SYNCHOM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_SYNCHOM_SHIFT\fP)) & \fBFTM_SYNC_SYNCHOM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG0_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG0_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_TRIG0_SHIFT\fP)) & \fBFTM_SYNC_TRIG0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG1_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG1_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_TRIG1_SHIFT\fP)) & \fBFTM_SYNC_TRIG1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG2_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG2_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_TRIG2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_TRIG2_SHIFT\fP)) & \fBFTM_SYNC_TRIG2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SWSYNC_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SWSYNC_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNC_SWSYNC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNC_SWSYNC_SHIFT\fP)) & \fBFTM_SYNC_SWSYNC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOUTINIT - Initial State For Channels Output\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH0OI_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH0OI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH0OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH0OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH0OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH1OI_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH1OI_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH1OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH1OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH1OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH2OI_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH2OI_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH2OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH2OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH2OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH3OI_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH3OI_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH3OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH3OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH3OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH4OI_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH4OI_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH4OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH4OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH4OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH5OI_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH5OI_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH5OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH5OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH5OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH6OI_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH6OI_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH6OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH6OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH6OI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH7OI_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH7OI_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTINIT_CH7OI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTINIT_CH7OI_SHIFT\fP)) & \fBFTM_OUTINIT_CH7OI_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOUTMASK - Output Mask\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH0OM_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH0OM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH0OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH0OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH0OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH1OM_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH1OM_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH1OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH1OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH1OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH2OM_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH2OM_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH2OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH2OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH2OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH3OM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH3OM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH3OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH3OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH3OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH4OM_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH4OM_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH4OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH4OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH4OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH5OM_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH5OM_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH5OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH5OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH5OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH6OM_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH6OM_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH6OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH6OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH6OM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH7OM_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH7OM_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_OUTMASK_CH7OM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_OUTMASK_CH7OM_SHIFT\fP)) & \fBFTM_OUTMASK_CH7OM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCOMBINE - Function For Linked Channels\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMBINE0_SHIFT\fP)) & \fBFTM_COMBINE_COMBINE0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP0_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP0_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMP0_SHIFT\fP)) & \fBFTM_COMBINE_COMP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN0_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN0_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAPEN0_SHIFT\fP)) & \fBFTM_COMBINE_DECAPEN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP0_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP0_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAP0_SHIFT\fP)) & \fBFTM_COMBINE_DECAP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN0_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN0_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DTEN0_SHIFT\fP)) & \fBFTM_COMBINE_DTEN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN0_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN0_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_SYNCEN0_SHIFT\fP)) & \fBFTM_COMBINE_SYNCEN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN0_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN0_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_FAULTEN0_SHIFT\fP)) & \fBFTM_COMBINE_FAULTEN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE1_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE1_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMBINE1_SHIFT\fP)) & \fBFTM_COMBINE_COMBINE1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP1_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP1_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMP1_SHIFT\fP)) & \fBFTM_COMBINE_COMP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN1_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN1_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAPEN1_SHIFT\fP)) & \fBFTM_COMBINE_DECAPEN1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP1_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP1_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAP1_SHIFT\fP)) & \fBFTM_COMBINE_DECAP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN1_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN1_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DTEN1_SHIFT\fP)) & \fBFTM_COMBINE_DTEN1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN1_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN1_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_SYNCEN1_SHIFT\fP)) & \fBFTM_COMBINE_SYNCEN1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN1_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN1_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_FAULTEN1_SHIFT\fP)) & \fBFTM_COMBINE_FAULTEN1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE2_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE2_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMBINE2_SHIFT\fP)) & \fBFTM_COMBINE_COMBINE2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP2_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP2_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMP2_SHIFT\fP)) & \fBFTM_COMBINE_COMP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN2_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN2_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAPEN2_SHIFT\fP)) & \fBFTM_COMBINE_DECAPEN2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP2_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP2_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAP2_SHIFT\fP)) & \fBFTM_COMBINE_DECAP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN2_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN2_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DTEN2_SHIFT\fP)) & \fBFTM_COMBINE_DTEN2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN2_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN2_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_SYNCEN2_SHIFT\fP)) & \fBFTM_COMBINE_SYNCEN2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN2_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN2_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_FAULTEN2_SHIFT\fP)) & \fBFTM_COMBINE_FAULTEN2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE3_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE3_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMBINE3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMBINE3_SHIFT\fP)) & \fBFTM_COMBINE_COMBINE3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP3_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP3_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_COMP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_COMP3_SHIFT\fP)) & \fBFTM_COMBINE_COMP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN3_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN3_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAPEN3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAPEN3_SHIFT\fP)) & \fBFTM_COMBINE_DECAPEN3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP3_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP3_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DECAP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DECAP3_SHIFT\fP)) & \fBFTM_COMBINE_DECAP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN3_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN3_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_DTEN3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_DTEN3_SHIFT\fP)) & \fBFTM_COMBINE_DTEN3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN3_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN3_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_SYNCEN3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_SYNCEN3_SHIFT\fP)) & \fBFTM_COMBINE_SYNCEN3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN3_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN3_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBFTM_COMBINE_FAULTEN3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_COMBINE_FAULTEN3_SHIFT\fP)) & \fBFTM_COMBINE_FAULTEN3_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDEADTIME - Deadtime Insertion Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTVAL_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTVAL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_DEADTIME_DTVAL_SHIFT\fP)) & \fBFTM_DEADTIME_DTVAL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTPS_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTPS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_DEADTIME_DTPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_DEADTIME_DTPS_SHIFT\fP)) & \fBFTM_DEADTIME_DTPS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEXTTRIG - FTM External Trigger\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH2TRIG_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH2TRIG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH2TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH2TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH2TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH3TRIG_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH3TRIG_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH3TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH3TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH3TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH4TRIG_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH4TRIG_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH4TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH4TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH4TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH5TRIG_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH5TRIG_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH5TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH5TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH5TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH0TRIG_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH0TRIG_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH0TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH0TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH0TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH1TRIG_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH1TRIG_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_CH1TRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_CH1TRIG_SHIFT\fP)) & \fBFTM_EXTTRIG_CH1TRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_INITTRIGEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_INITTRIGEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_INITTRIGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_INITTRIGEN_SHIFT\fP)) & \fBFTM_EXTTRIG_INITTRIGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_TRIGF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_TRIGF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_EXTTRIG_TRIGF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_EXTTRIG_TRIGF_SHIFT\fP)) & \fBFTM_EXTTRIG_TRIGF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPOL - Channels Polarity\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_POL_POL0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL0_SHIFT\fP)) & \fBFTM_POL_POL0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL1_SHIFT\fP)) & \fBFTM_POL_POL1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL2_SHIFT\fP)) & \fBFTM_POL_POL2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL3_SHIFT\fP)) & \fBFTM_POL_POL3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL4_SHIFT\fP)) & \fBFTM_POL_POL4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL5_SHIFT\fP)) & \fBFTM_POL_POL5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL6\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL6_SHIFT\fP)) & \fBFTM_POL_POL6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_POL_POL7\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_POL_POL7_SHIFT\fP)) & \fBFTM_POL_POL7_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFMS - Fault Mode Status\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTF0_SHIFT\fP)) & \fBFTM_FMS_FAULTF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTF1_SHIFT\fP)) & \fBFTM_FMS_FAULTF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTF2_SHIFT\fP)) & \fBFTM_FMS_FAULTF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTF3_SHIFT\fP)) & \fBFTM_FMS_FAULTF3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTIN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTIN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTIN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTIN_SHIFT\fP)) & \fBFTM_FMS_FAULTIN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_WPEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_WPEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_WPEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_WPEN_SHIFT\fP)) & \fBFTM_FMS_WPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_FMS_FAULTF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FMS_FAULTF_SHIFT\fP)) & \fBFTM_FMS_FAULTF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFILTER - Input Capture Filter Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_FILTER_CH0FVAL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH0FVAL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH0FVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FILTER_CH0FVAL_SHIFT\fP)) & \fBFTM_FILTER_CH0FVAL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH1FVAL_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH1FVAL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH1FVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FILTER_CH1FVAL_SHIFT\fP)) & \fBFTM_FILTER_CH1FVAL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH2FVAL_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH2FVAL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH2FVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FILTER_CH2FVAL_SHIFT\fP)) & \fBFTM_FILTER_CH2FVAL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH3FVAL_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH3FVAL_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFTM_FILTER_CH3FVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FILTER_CH3FVAL_SHIFT\fP)) & \fBFTM_FILTER_CH3FVAL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFLTCTRL - Fault Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT0EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT0EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT0EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FAULT0EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FAULT0EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT1EN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT1EN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT1EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FAULT1EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FAULT1EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT2EN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT2EN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT2EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FAULT2EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FAULT2EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT3EN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT3EN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FAULT3EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FAULT3EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FAULT3EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR0EN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR0EN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR0EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FFLTR0EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FFLTR0EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR1EN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR1EN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR1EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FFLTR1EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FFLTR1EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR2EN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR2EN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR2EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FFLTR2EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FFLTR2EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR3EN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR3EN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFLTR3EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FFLTR3EN_SHIFT\fP)) & \fBFTM_FLTCTRL_FFLTR3EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFVAL_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFVAL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTCTRL_FFVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTCTRL_FFVAL_SHIFT\fP)) & \fBFTM_FLTCTRL_FFVAL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBQDCTRL - Quadrature Decoder Control And Status\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_QUADEN_SHIFT\fP)) & \fBFTM_QDCTRL_QUADEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_TOFDIR_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_TOFDIR_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_TOFDIR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_TOFDIR_SHIFT\fP)) & \fBFTM_QDCTRL_TOFDIR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADIR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADIR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADIR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_QUADIR_SHIFT\fP)) & \fBFTM_QDCTRL_QUADIR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADMODE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADMODE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_QUADMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_QUADMODE_SHIFT\fP)) & \fBFTM_QDCTRL_QUADMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBPOL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBPOL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBPOL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_PHBPOL_SHIFT\fP)) & \fBFTM_QDCTRL_PHBPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAPOL_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAPOL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAPOL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_PHAPOL_SHIFT\fP)) & \fBFTM_QDCTRL_PHAPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBFLTREN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBFLTREN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHBFLTREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_PHBFLTREN_SHIFT\fP)) & \fBFTM_QDCTRL_PHBFLTREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAFLTREN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAFLTREN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_QDCTRL_PHAFLTREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_QDCTRL_PHAFLTREN_SHIFT\fP)) & \fBFTM_QDCTRL_PHAFLTREN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCONF - Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_CONF_NUMTOF_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_NUMTOF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_NUMTOF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CONF_NUMTOF_SHIFT\fP)) & \fBFTM_CONF_NUMTOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_BDMMODE_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_BDMMODE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_BDMMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CONF_BDMMODE_SHIFT\fP)) & \fBFTM_CONF_BDMMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEEN_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEEN_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CONF_GTBEEN_SHIFT\fP)) & \fBFTM_CONF_GTBEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEOUT_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEOUT_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFTM_CONF_GTBEOUT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_CONF_GTBEOUT_SHIFT\fP)) & \fBFTM_CONF_GTBEOUT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFLTPOL - FTM Fault Input Polarity\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT0POL_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT0POL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT0POL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTPOL_FLT0POL_SHIFT\fP)) & \fBFTM_FLTPOL_FLT0POL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT1POL_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT1POL_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT1POL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTPOL_FLT1POL_SHIFT\fP)) & \fBFTM_FLTPOL_FLT1POL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT2POL_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT2POL_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT2POL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTPOL_FLT2POL_SHIFT\fP)) & \fBFTM_FLTPOL_FLT2POL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT3POL_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT3POL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_FLTPOL_FLT3POL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_FLTPOL_FLT3POL_SHIFT\fP)) & \fBFTM_FLTPOL_FLT3POL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSYNCONF - Synchronization Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWTRIGMODE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWTRIGMODE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWTRIGMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWTRIGMODE_SHIFT\fP)) & \fBFTM_SYNCONF_HWTRIGMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_CNTINC_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_CNTINC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_CNTINC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_CNTINC_SHIFT\fP)) & \fBFTM_SYNCONF_CNTINC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_INVC_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_INVC_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_INVC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_INVC_SHIFT\fP)) & \fBFTM_SYNCONF_INVC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOC_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOC_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWOC_SHIFT\fP)) & \fBFTM_SYNCONF_SWOC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SYNCMODE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SYNCMODE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SYNCMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SYNCMODE_SHIFT\fP)) & \fBFTM_SYNCONF_SYNCMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWRSTCNT_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWRSTCNT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWRSTCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWRSTCNT_SHIFT\fP)) & \fBFTM_SYNCONF_SWRSTCNT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWWRBUF_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWWRBUF_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWWRBUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWWRBUF_SHIFT\fP)) & \fBFTM_SYNCONF_SWWRBUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOM_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOM_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWOM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWOM_SHIFT\fP)) & \fBFTM_SYNCONF_SWOM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWINVC_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWINVC_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWINVC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWINVC_SHIFT\fP)) & \fBFTM_SYNCONF_SWINVC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWSOC_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWSOC_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_SWSOC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_SWSOC_SHIFT\fP)) & \fBFTM_SYNCONF_SWSOC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWRSTCNT_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWRSTCNT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWRSTCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWRSTCNT_SHIFT\fP)) & \fBFTM_SYNCONF_HWRSTCNT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWWRBUF_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWWRBUF_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWWRBUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWWRBUF_SHIFT\fP)) & \fBFTM_SYNCONF_HWWRBUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWOM_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWOM_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWOM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWOM_SHIFT\fP)) & \fBFTM_SYNCONF_HWOM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWINVC_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWINVC_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWINVC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWINVC_SHIFT\fP)) & \fBFTM_SYNCONF_HWINVC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWSOC_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWSOC_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBFTM_SYNCONF_HWSOC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SYNCONF_HWSOC_SHIFT\fP)) & \fBFTM_SYNCONF_HWSOC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBINVCTRL - FTM Inverting Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV0EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV0EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV0EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_INVCTRL_INV0EN_SHIFT\fP)) & \fBFTM_INVCTRL_INV0EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV1EN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV1EN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV1EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_INVCTRL_INV1EN_SHIFT\fP)) & \fBFTM_INVCTRL_INV1EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV2EN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV2EN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV2EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_INVCTRL_INV2EN_SHIFT\fP)) & \fBFTM_INVCTRL_INV2EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV3EN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV3EN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_INVCTRL_INV3EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_INVCTRL_INV3EN_SHIFT\fP)) & \fBFTM_INVCTRL_INV3EN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSWOCTRL - FTM Software Output Control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH0OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH0OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OC_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OC_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH1OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH1OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OC_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH2OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH2OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OC_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OC_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH3OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH3OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OC_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OC_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH4OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH4OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OC_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OC_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH5OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH5OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OC_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH6OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH6OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OC_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OC_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH7OC_SHIFT\fP)) & \fBFTM_SWOCTRL_CH7OC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OCV_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OCV_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH0OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH0OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH0OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OCV_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OCV_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH1OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH1OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH1OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OCV_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OCV_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH2OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH2OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH2OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OCV_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OCV_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH3OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH3OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH3OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OCV_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OCV_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH4OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH4OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH4OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OCV_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OCV_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH5OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH5OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH5OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OCV_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OCV_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH6OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH6OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH6OCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OCV_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OCV_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBFTM_SWOCTRL_CH7OCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_SWOCTRL_CH7OCV_SHIFT\fP)) & \fBFTM_SWOCTRL_CH7OCV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPWMLOAD - FTM PWM Load\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH0SEL_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH0SEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH0SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH0SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH0SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH1SEL_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH1SEL_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH1SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH1SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH1SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH2SEL_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH2SEL_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH2SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH2SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH2SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH3SEL_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH3SEL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH3SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH3SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH3SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH4SEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH4SEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH4SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH4SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH4SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH5SEL_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH5SEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH5SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH5SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH5SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH6SEL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH6SEL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH6SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH6SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH6SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH7SEL_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH7SEL_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_CH7SEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_CH7SEL_SHIFT\fP)) & \fBFTM_PWMLOAD_CH7SEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_LDOK_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_LDOK_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBFTM_PWMLOAD_LDOK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBFTM_PWMLOAD_LDOK_SHIFT\fP)) & \fBFTM_PWMLOAD_LDOK_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPDOR - Port Data Output Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PDOR_PDO_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PDOR_PDO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PDOR_PDO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PDOR_PDO_SHIFT\fP)) & \fBGPIO_PDOR_PDO_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPSOR - Port Set Output Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PSOR_PTSO_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PSOR_PTSO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PSOR_PTSO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PSOR_PTSO_SHIFT\fP)) & \fBGPIO_PSOR_PTSO_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPCOR - Port Clear Output Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PCOR_PTCO_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PCOR_PTCO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PCOR_PTCO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PCOR_PTCO_SHIFT\fP)) & \fBGPIO_PCOR_PTCO_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPTOR - Port Toggle Output Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PTOR_PTTO_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PTOR_PTTO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PTOR_PTTO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PTOR_PTTO_SHIFT\fP)) & \fBGPIO_PTOR_PTTO_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPDIR - Port Data Input Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PDIR_PDI_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PDIR_PDI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PDIR_PDI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PDIR_PDI_SHIFT\fP)) & \fBGPIO_PDIR_PDI_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPDDR - Port Data Direction Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBGPIO_PDDR_PDD_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBGPIO_PDDR_PDD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBGPIO_PDDR_PDD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBGPIO_PDDR_PDD_SHIFT\fP)) & \fBGPIO_PDDR_PDD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBA1 - I2C Address Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_A1_AD_MASK\fP   (0xFEU)"
.br
.ti -1c
.RI "#define \fBI2C_A1_AD_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_A1_AD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_A1_AD_SHIFT\fP)) & \fBI2C_A1_AD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBF - I2C Frequency Divider register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_F_ICR_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBI2C_F_ICR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_F_ICR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_F_ICR_SHIFT\fP)) & \fBI2C_F_ICR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_F_MULT_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBI2C_F_MULT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_F_MULT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_F_MULT_SHIFT\fP)) & \fBI2C_F_MULT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC1 - I2C Control Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_C1_DMAEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_DMAEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_DMAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_DMAEN_SHIFT\fP)) & \fBI2C_C1_DMAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_WUEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_WUEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_WUEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_WUEN_SHIFT\fP)) & \fBI2C_C1_WUEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_RSTA_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_RSTA_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_RSTA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_RSTA_SHIFT\fP)) & \fBI2C_C1_RSTA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TXAK_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TXAK_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TXAK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_TXAK_SHIFT\fP)) & \fBI2C_C1_TXAK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TX_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TX_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_TX\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_TX_SHIFT\fP)) & \fBI2C_C1_TX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_MST_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_MST_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_MST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_MST_SHIFT\fP)) & \fBI2C_C1_MST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_IICIE_SHIFT\fP)) & \fBI2C_C1_IICIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBI2C_C1_IICEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C1_IICEN_SHIFT\fP)) & \fBI2C_C1_IICEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBS - I2C Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_S_RXAK_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2C_S_RXAK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_S_RXAK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_RXAK_SHIFT\fP)) & \fBI2C_S_RXAK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_IICIF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2C_S_IICIF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_S_IICIF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_IICIF_SHIFT\fP)) & \fBI2C_S_IICIF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_SRW_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBI2C_S_SRW_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBI2C_S_SRW\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_SRW_SHIFT\fP)) & \fBI2C_S_SRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_RAM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2C_S_RAM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2C_S_RAM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_RAM_SHIFT\fP)) & \fBI2C_S_RAM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_ARBL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2C_S_ARBL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2C_S_ARBL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_ARBL_SHIFT\fP)) & \fBI2C_S_ARBL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_BUSY_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBI2C_S_BUSY_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBI2C_S_BUSY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_BUSY_SHIFT\fP)) & \fBI2C_S_BUSY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_IAAS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBI2C_S_IAAS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_S_IAAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_IAAS_SHIFT\fP)) & \fBI2C_S_IAAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_S_TCF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBI2C_S_TCF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBI2C_S_TCF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_S_TCF_SHIFT\fP)) & \fBI2C_S_TCF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBD - I2C Data I/O register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_D_DATA_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBI2C_D_DATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_D_DATA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_D_DATA_SHIFT\fP)) & \fBI2C_D_DATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC2 - I2C Control Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_C2_AD_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_AD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_AD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_AD_SHIFT\fP)) & \fBI2C_C2_AD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C2_RMEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_RMEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_RMEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_RMEN_SHIFT\fP)) & \fBI2C_C2_RMEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C2_SBRC_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_SBRC_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_SBRC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_SBRC_SHIFT\fP)) & \fBI2C_C2_SBRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C2_HDRS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_HDRS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_HDRS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_HDRS_SHIFT\fP)) & \fBI2C_C2_HDRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C2_ADEXT_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_ADEXT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_ADEXT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_ADEXT_SHIFT\fP)) & \fBI2C_C2_ADEXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_C2_GCAEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_GCAEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBI2C_C2_GCAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_C2_GCAEN_SHIFT\fP)) & \fBI2C_C2_GCAEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFLT - I2C Programmable Input Glitch Filter register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_FLT_FLT_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_FLT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_FLT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_FLT_FLT_SHIFT\fP)) & \fBI2C_FLT_FLT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STARTF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STARTF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STARTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_FLT_STARTF_SHIFT\fP)) & \fBI2C_FLT_STARTF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SSIE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SSIE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SSIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_FLT_SSIE_SHIFT\fP)) & \fBI2C_FLT_SSIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STOPF_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STOPF_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_STOPF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_FLT_STOPF_SHIFT\fP)) & \fBI2C_FLT_STOPF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SHEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SHEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBI2C_FLT_SHEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_FLT_SHEN_SHIFT\fP)) & \fBI2C_FLT_SHEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRA - I2C Range Address register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_RA_RAD_MASK\fP   (0xFEU)"
.br
.ti -1c
.RI "#define \fBI2C_RA_RAD_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_RA_RAD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_RA_RAD_SHIFT\fP)) & \fBI2C_RA_RAD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSMB - I2C SMBus Control and Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2IE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2IE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2IE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_SHTF2IE_SHIFT\fP)) & \fBI2C_SMB_SHTF2IE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_SHTF2_SHIFT\fP)) & \fBI2C_SMB_SHTF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF1_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF1_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SHTF1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_SHTF1_SHIFT\fP)) & \fBI2C_SMB_SHTF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SLTF_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SLTF_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SLTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_SLTF_SHIFT\fP)) & \fBI2C_SMB_SLTF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_TCKSEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_TCKSEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_TCKSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_TCKSEL_SHIFT\fP)) & \fBI2C_SMB_TCKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SIICAEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SIICAEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_SIICAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_SIICAEN_SHIFT\fP)) & \fBI2C_SMB_SIICAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_ALERTEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_ALERTEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_ALERTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_ALERTEN_SHIFT\fP)) & \fBI2C_SMB_ALERTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_FACK_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_FACK_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBI2C_SMB_FACK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SMB_FACK_SHIFT\fP)) & \fBI2C_SMB_FACK_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBA2 - I2C Address Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_A2_SAD_MASK\fP   (0xFEU)"
.br
.ti -1c
.RI "#define \fBI2C_A2_SAD_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2C_A2_SAD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_A2_SAD_SHIFT\fP)) & \fBI2C_A2_SAD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSLTH - I2C SCL Low Timeout Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_SLTH_SSLT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBI2C_SLTH_SSLT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_SLTH_SSLT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SLTH_SSLT_SHIFT\fP)) & \fBI2C_SLTH_SSLT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSLTL - I2C SCL Low Timeout Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2C_SLTL_SSLT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBI2C_SLTL_SSLT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2C_SLTL_SSLT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBI2C_SLTL_SSLT_SHIFT\fP)) & \fBI2C_SLTL_SSLT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCSR - SAI Transmit Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCSR_FRDE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRDE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FRDE_SHIFT\fP)) & \fBI2S_TCSR_FRDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWDE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWDE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FWDE_SHIFT\fP)) & \fBI2S_TCSR_FWDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRIE_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRIE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FRIE_SHIFT\fP)) & \fBI2S_TCSR_FRIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWIE_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWIE_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FWIE_SHIFT\fP)) & \fBI2S_TCSR_FWIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEIE_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEIE_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FEIE_SHIFT\fP)) & \fBI2S_TCSR_FEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEIE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEIE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_SEIE_SHIFT\fP)) & \fBI2S_TCSR_SEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSIE_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSIE_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_WSIE_SHIFT\fP)) & \fBI2S_TCSR_WSIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRF_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRF_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FRF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FRF_SHIFT\fP)) & \fBI2S_TCSR_FRF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWF_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWF_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FWF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FWF_SHIFT\fP)) & \fBI2S_TCSR_FWF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEF_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEF_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FEF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FEF_SHIFT\fP)) & \fBI2S_TCSR_FEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEF_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEF_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SEF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_SEF_SHIFT\fP)) & \fBI2S_TCSR_SEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSF_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSF_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_WSF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_WSF_SHIFT\fP)) & \fBI2S_TCSR_WSF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_SR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_SR_SHIFT\fP)) & \fBI2S_TCSR_SR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FR_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FR_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_FR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_FR_SHIFT\fP)) & \fBI2S_TCSR_FR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_BCE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_BCE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_BCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_BCE_SHIFT\fP)) & \fBI2S_TCSR_BCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_DBGE_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_DBGE_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_DBGE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_DBGE_SHIFT\fP)) & \fBI2S_TCSR_DBGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_STOPE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_STOPE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_STOPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_STOPE_SHIFT\fP)) & \fBI2S_TCSR_STOPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_TE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_TE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBI2S_TCSR_TE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCSR_TE_SHIFT\fP)) & \fBI2S_TCSR_TE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR1 - SAI Transmit Configuration 1 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCR1_TFW_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR1_TFW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR1_TFW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR1_TFW_SHIFT\fP)) & \fBI2S_TCR1_TFW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR2 - SAI Transmit Configuration 2 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCR2_DIV_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_DIV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_DIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_DIV_SHIFT\fP)) & \fBI2S_TCR2_DIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCD_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCD_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_BCD_SHIFT\fP)) & \fBI2S_TCR2_BCD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCP_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCP_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_BCP_SHIFT\fP)) & \fBI2S_TCR2_BCP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_MSEL_MASK\fP   (0xC000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_MSEL_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_MSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_MSEL_SHIFT\fP)) & \fBI2S_TCR2_MSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCI_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCI_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_BCI_SHIFT\fP)) & \fBI2S_TCR2_BCI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCS_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCS_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_BCS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_BCS_SHIFT\fP)) & \fBI2S_TCR2_BCS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_SYNC_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_SYNC_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR2_SYNC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR2_SYNC_SHIFT\fP)) & \fBI2S_TCR2_SYNC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR3 - SAI Transmit Configuration 3 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCR3_WDFL_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBI2S_TCR3_WDFL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR3_WDFL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR3_WDFL_SHIFT\fP)) & \fBI2S_TCR3_WDFL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR3_TCE_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR3_TCE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR3_TCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR3_TCE_SHIFT\fP)) & \fBI2S_TCR3_TCE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR4 - SAI Transmit Configuration 4 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCR4_FSD_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_FSD_SHIFT\fP)) & \fBI2S_TCR4_FSD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSP_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSP_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_FSP_SHIFT\fP)) & \fBI2S_TCR4_FSP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_FSE_SHIFT\fP)) & \fBI2S_TCR4_FSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_MF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_MF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_MF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_MF_SHIFT\fP)) & \fBI2S_TCR4_MF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_SYWD_MASK\fP   (0x1F00U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_SYWD_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_SYWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_SYWD_SHIFT\fP)) & \fBI2S_TCR4_SYWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FRSZ_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FRSZ_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR4_FRSZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR4_FRSZ_SHIFT\fP)) & \fBI2S_TCR4_FRSZ_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR5 - SAI Transmit Configuration 5 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TCR5_FBT_MASK\fP   (0x1F00U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_FBT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_FBT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR5_FBT_SHIFT\fP)) & \fBI2S_TCR5_FBT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_W0W_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_W0W_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_W0W\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR5_W0W_SHIFT\fP)) & \fBI2S_TCR5_W0W_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_WNW_MASK\fP   (0x1F000000U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_WNW_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_TCR5_WNW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TCR5_WNW_SHIFT\fP)) & \fBI2S_TCR5_WNW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTDR - SAI Transmit Data Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TDR_TDR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBI2S_TDR_TDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TDR_TDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TDR_TDR_SHIFT\fP)) & \fBI2S_TDR_TDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TDR_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTFR - SAI Transmit FIFO Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TFR_RFP_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_RFP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_RFP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TFR_RFP_SHIFT\fP)) & \fBI2S_TFR_RFP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_WFP_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_WFP_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_WFP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TFR_WFP_SHIFT\fP)) & \fBI2S_TFR_WFP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_TFR_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTMR - SAI Transmit Mask Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_TMR_TWM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBI2S_TMR_TWM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_TMR_TWM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_TMR_TWM_SHIFT\fP)) & \fBI2S_TMR_TWM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCSR - SAI Receive Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCSR_FRDE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRDE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FRDE_SHIFT\fP)) & \fBI2S_RCSR_FRDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWDE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWDE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FWDE_SHIFT\fP)) & \fBI2S_RCSR_FWDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRIE_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRIE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FRIE_SHIFT\fP)) & \fBI2S_RCSR_FRIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWIE_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWIE_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FWIE_SHIFT\fP)) & \fBI2S_RCSR_FWIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEIE_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEIE_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FEIE_SHIFT\fP)) & \fBI2S_RCSR_FEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEIE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEIE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_SEIE_SHIFT\fP)) & \fBI2S_RCSR_SEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSIE_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSIE_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_WSIE_SHIFT\fP)) & \fBI2S_RCSR_WSIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRF_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRF_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FRF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FRF_SHIFT\fP)) & \fBI2S_RCSR_FRF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWF_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWF_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FWF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FWF_SHIFT\fP)) & \fBI2S_RCSR_FWF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEF_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEF_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FEF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FEF_SHIFT\fP)) & \fBI2S_RCSR_FEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEF_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEF_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SEF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_SEF_SHIFT\fP)) & \fBI2S_RCSR_SEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSF_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSF_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_WSF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_WSF_SHIFT\fP)) & \fBI2S_RCSR_WSF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SR_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SR_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_SR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_SR_SHIFT\fP)) & \fBI2S_RCSR_SR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FR_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FR_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_FR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_FR_SHIFT\fP)) & \fBI2S_RCSR_FR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_BCE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_BCE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_BCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_BCE_SHIFT\fP)) & \fBI2S_RCSR_BCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_DBGE_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_DBGE_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_DBGE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_DBGE_SHIFT\fP)) & \fBI2S_RCSR_DBGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_STOPE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_STOPE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_STOPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_STOPE_SHIFT\fP)) & \fBI2S_RCSR_STOPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_RE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_RE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBI2S_RCSR_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCSR_RE_SHIFT\fP)) & \fBI2S_RCSR_RE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR1 - SAI Receive Configuration 1 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCR1_RFW_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR1_RFW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR1_RFW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR1_RFW_SHIFT\fP)) & \fBI2S_RCR1_RFW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR2 - SAI Receive Configuration 2 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCR2_DIV_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_DIV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_DIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_DIV_SHIFT\fP)) & \fBI2S_RCR2_DIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCD_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCD_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_BCD_SHIFT\fP)) & \fBI2S_RCR2_BCD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCP_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCP_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_BCP_SHIFT\fP)) & \fBI2S_RCR2_BCP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_MSEL_MASK\fP   (0xC000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_MSEL_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_MSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_MSEL_SHIFT\fP)) & \fBI2S_RCR2_MSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCI_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCI_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_BCI_SHIFT\fP)) & \fBI2S_RCR2_BCI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCS_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCS_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_BCS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_BCS_SHIFT\fP)) & \fBI2S_RCR2_BCS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_SYNC_MASK\fP   (0xC0000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_SYNC_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR2_SYNC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR2_SYNC_SHIFT\fP)) & \fBI2S_RCR2_SYNC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR3 - SAI Receive Configuration 3 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCR3_WDFL_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBI2S_RCR3_WDFL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR3_WDFL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR3_WDFL_SHIFT\fP)) & \fBI2S_RCR3_WDFL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR3_RCE_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR3_RCE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR3_RCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR3_RCE_SHIFT\fP)) & \fBI2S_RCR3_RCE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR4 - SAI Receive Configuration 4 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCR4_FSD_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_FSD_SHIFT\fP)) & \fBI2S_RCR4_FSD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSP_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSP_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_FSP_SHIFT\fP)) & \fBI2S_RCR4_FSP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_FSE_SHIFT\fP)) & \fBI2S_RCR4_FSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_MF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_MF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_MF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_MF_SHIFT\fP)) & \fBI2S_RCR4_MF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_SYWD_MASK\fP   (0x1F00U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_SYWD_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_SYWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_SYWD_SHIFT\fP)) & \fBI2S_RCR4_SYWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FRSZ_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FRSZ_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR4_FRSZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR4_FRSZ_SHIFT\fP)) & \fBI2S_RCR4_FRSZ_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCR5 - SAI Receive Configuration 5 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RCR5_FBT_MASK\fP   (0x1F00U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_FBT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_FBT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR5_FBT_SHIFT\fP)) & \fBI2S_RCR5_FBT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_W0W_MASK\fP   (0x1F0000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_W0W_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_W0W\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR5_W0W_SHIFT\fP)) & \fBI2S_RCR5_W0W_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_WNW_MASK\fP   (0x1F000000U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_WNW_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_RCR5_WNW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RCR5_WNW_SHIFT\fP)) & \fBI2S_RCR5_WNW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRDR - SAI Receive Data Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RDR_RDR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBI2S_RDR_RDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RDR_RDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RDR_RDR_SHIFT\fP)) & \fBI2S_RDR_RDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RDR_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRFR - SAI Receive FIFO Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RFR_RFP_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_RFP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_RFP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RFR_RFP_SHIFT\fP)) & \fBI2S_RFR_RFP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_WFP_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_WFP_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_WFP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RFR_WFP_SHIFT\fP)) & \fBI2S_RFR_WFP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_RFR_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRMR - SAI Receive Mask Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_RMR_RWM_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBI2S_RMR_RWM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_RMR_RWM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_RMR_RWM_SHIFT\fP)) & \fBI2S_RMR_RWM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMCR - SAI MCLK Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_MCR_MICS_MASK\fP   (0x3000000U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_MICS_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_MICS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_MCR_MICS_SHIFT\fP)) & \fBI2S_MCR_MICS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_MOE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_MOE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_MOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_MCR_MOE_SHIFT\fP)) & \fBI2S_MCR_MOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_DUF_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_DUF_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBI2S_MCR_DUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_MCR_DUF_SHIFT\fP)) & \fBI2S_MCR_DUF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMDR - SAI MCLK Divide Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBI2S_MDR_DIVIDE_MASK\fP   (0xFFFU)"
.br
.ti -1c
.RI "#define \fBI2S_MDR_DIVIDE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBI2S_MDR_DIVIDE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_MDR_DIVIDE_SHIFT\fP)) & \fBI2S_MDR_DIVIDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBI2S_MDR_FRACT_MASK\fP   (0xFF000U)"
.br
.ti -1c
.RI "#define \fBI2S_MDR_FRACT_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBI2S_MDR_FRACT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBI2S_MDR_FRACT_SHIFT\fP)) & \fBI2S_MDR_FRACT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPE1 - LLWU Pin Enable 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE0_SHIFT\fP)) & \fBLLWU_PE1_WUPE0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE1_SHIFT\fP)) & \fBLLWU_PE1_WUPE1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE2_SHIFT\fP)) & \fBLLWU_PE1_WUPE2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE1_WUPE3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE1_WUPE3_SHIFT\fP)) & \fBLLWU_PE1_WUPE3_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPE2 - LLWU Pin Enable 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE4_SHIFT\fP)) & \fBLLWU_PE2_WUPE4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE5_SHIFT\fP)) & \fBLLWU_PE2_WUPE5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE6_SHIFT\fP)) & \fBLLWU_PE2_WUPE6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE2_WUPE7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE2_WUPE7_SHIFT\fP)) & \fBLLWU_PE2_WUPE7_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPE3 - LLWU Pin Enable 3 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE8_SHIFT\fP)) & \fBLLWU_PE3_WUPE8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE9\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE9_SHIFT\fP)) & \fBLLWU_PE3_WUPE9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE10\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE10_SHIFT\fP)) & \fBLLWU_PE3_WUPE10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE3_WUPE11\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE3_WUPE11_SHIFT\fP)) & \fBLLWU_PE3_WUPE11_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPE4 - LLWU Pin Enable 4 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE12\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE12_SHIFT\fP)) & \fBLLWU_PE4_WUPE12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE13\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE13_SHIFT\fP)) & \fBLLWU_PE4_WUPE13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE14\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE14_SHIFT\fP)) & \fBLLWU_PE4_WUPE14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_PE4_WUPE15\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_PE4_WUPE15_SHIFT\fP)) & \fBLLWU_PE4_WUPE15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBME - LLWU Module Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_ME_WUME0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME0_SHIFT\fP)) & \fBLLWU_ME_WUME0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME1_SHIFT\fP)) & \fBLLWU_ME_WUME1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME2_SHIFT\fP)) & \fBLLWU_ME_WUME2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME3_SHIFT\fP)) & \fBLLWU_ME_WUME3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME4_SHIFT\fP)) & \fBLLWU_ME_WUME4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME5_SHIFT\fP)) & \fBLLWU_ME_WUME5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME6_SHIFT\fP)) & \fBLLWU_ME_WUME6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_ME_WUME7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_ME_WUME7_SHIFT\fP)) & \fBLLWU_ME_WUME7_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBF1 - LLWU Flag 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_F1_WUF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF0_SHIFT\fP)) & \fBLLWU_F1_WUF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF1_SHIFT\fP)) & \fBLLWU_F1_WUF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF2_SHIFT\fP)) & \fBLLWU_F1_WUF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF3_SHIFT\fP)) & \fBLLWU_F1_WUF3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF4_SHIFT\fP)) & \fBLLWU_F1_WUF4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF5_SHIFT\fP)) & \fBLLWU_F1_WUF5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF6_SHIFT\fP)) & \fBLLWU_F1_WUF6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F1_WUF7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F1_WUF7_SHIFT\fP)) & \fBLLWU_F1_WUF7_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBF2 - LLWU Flag 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_F2_WUF8_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF8_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF8_SHIFT\fP)) & \fBLLWU_F2_WUF8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF9\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF9_SHIFT\fP)) & \fBLLWU_F2_WUF9_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF10\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF10_SHIFT\fP)) & \fBLLWU_F2_WUF10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF11\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF11_SHIFT\fP)) & \fBLLWU_F2_WUF11_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF12\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF12_SHIFT\fP)) & \fBLLWU_F2_WUF12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF13\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF13_SHIFT\fP)) & \fBLLWU_F2_WUF13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF14\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF14_SHIFT\fP)) & \fBLLWU_F2_WUF14_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F2_WUF15\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F2_WUF15_SHIFT\fP)) & \fBLLWU_F2_WUF15_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBF3 - LLWU Flag 3 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF0_SHIFT\fP)) & \fBLLWU_F3_MWUF0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF1_SHIFT\fP)) & \fBLLWU_F3_MWUF1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF2_SHIFT\fP)) & \fBLLWU_F3_MWUF2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF3\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF3_SHIFT\fP)) & \fBLLWU_F3_MWUF3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF4\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF4_SHIFT\fP)) & \fBLLWU_F3_MWUF4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF5\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF5_SHIFT\fP)) & \fBLLWU_F3_MWUF5_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF6\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF6_SHIFT\fP)) & \fBLLWU_F3_MWUF6_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_F3_MWUF7\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_F3_MWUF7_SHIFT\fP)) & \fBLLWU_F3_MWUF7_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFILT1 - LLWU Pin Filter 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT1_FILTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTE_SHIFT\fP)) & \fBLLWU_FILT1_FILTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT1_FILTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT1_FILTF_SHIFT\fP)) & \fBLLWU_FILT1_FILTF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFILT2 - LLWU Pin Filter 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTSEL_SHIFT\fP)) & \fBLLWU_FILT2_FILTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTE_SHIFT\fP)) & \fBLLWU_FILT2_FILTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLLWU_FILT2_FILTF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_FILT2_FILTF_SHIFT\fP)) & \fBLLWU_FILT2_FILTF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRST - LLWU Reset Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_RSTFILT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_RSTFILT_SHIFT\fP)) & \fBLLWU_RST_RSTFILT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLLWU_RST_LLRSTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBLLWU_RST_LLRSTE_SHIFT\fP)) & \fBLLWU_RST_LLRSTE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCSR - Low Power Timer Control Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLPTMR_CSR_TEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TEN_SHIFT\fP)) & \fBLPTMR_CSR_TEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TMS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TMS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TMS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TMS_SHIFT\fP)) & \fBLPTMR_CSR_TMS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TFC_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TFC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TFC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TFC_SHIFT\fP)) & \fBLPTMR_CSR_TFC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPP_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPP_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TPP_SHIFT\fP)) & \fBLPTMR_CSR_TPP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPS_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TPS_SHIFT\fP)) & \fBLPTMR_CSR_TPS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TIE_SHIFT\fP)) & \fBLPTMR_CSR_TIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TCF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TCF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CSR_TCF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CSR_TCF_SHIFT\fP)) & \fBLPTMR_CSR_TCF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPSR - Low Power Timer Prescale Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLPTMR_PSR_PCS_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PCS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PCS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_PSR_PCS_SHIFT\fP)) & \fBLPTMR_PSR_PCS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PBYP_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PBYP_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PBYP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_PSR_PBYP_SHIFT\fP)) & \fBLPTMR_PSR_PBYP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PRESCALE_MASK\fP   (0x78U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PRESCALE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBLPTMR_PSR_PRESCALE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_PSR_PRESCALE_SHIFT\fP)) & \fBLPTMR_PSR_PRESCALE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMR - Low Power Timer Compare Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLPTMR_CMR_COMPARE_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBLPTMR_CMR_COMPARE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CMR_COMPARE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CMR_COMPARE_SHIFT\fP)) & \fBLPTMR_CMR_COMPARE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCNR - Low Power Timer Counter Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBLPTMR_CNR_COUNTER_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBLPTMR_CNR_COUNTER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBLPTMR_CNR_COUNTER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBLPTMR_CNR_COUNTER_SHIFT\fP)) & \fBLPTMR_CNR_COUNTER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC1 - MCG Control 1 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C1_IREFSTEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IREFSTEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IREFSTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C1_IREFSTEN_SHIFT\fP)) & \fBMCG_C1_IREFSTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IRCLKEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IRCLKEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IRCLKEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C1_IRCLKEN_SHIFT\fP)) & \fBMCG_C1_IRCLKEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IREFS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IREFS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_IREFS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C1_IREFS_SHIFT\fP)) & \fBMCG_C1_IREFS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C1_FRDIV_MASK\fP   (0x38U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_FRDIV_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_FRDIV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C1_FRDIV_SHIFT\fP)) & \fBMCG_C1_FRDIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C1_CLKS_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_CLKS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_C1_CLKS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C1_CLKS_SHIFT\fP)) & \fBMCG_C1_CLKS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC2 - MCG Control 2 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C2_IRCS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_IRCS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_IRCS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_IRCS_SHIFT\fP)) & \fBMCG_C2_IRCS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LP_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LP_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_LP_SHIFT\fP)) & \fBMCG_C2_LP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_EREFS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_EREFS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_EREFS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_EREFS_SHIFT\fP)) & \fBMCG_C2_EREFS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_HGO_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_HGO_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_HGO\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_HGO_SHIFT\fP)) & \fBMCG_C2_HGO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_RANGE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_RANGE_SHIFT\fP)) & \fBMCG_C2_RANGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_FCFTRIM_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_FCFTRIM_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_FCFTRIM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_FCFTRIM_SHIFT\fP)) & \fBMCG_C2_FCFTRIM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LOCRE0_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LOCRE0_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_C2_LOCRE0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C2_LOCRE0_SHIFT\fP)) & \fBMCG_C2_LOCRE0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC3 - MCG Control 3 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C3_SCTRIM_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCG_C3_SCTRIM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C3_SCTRIM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C3_SCTRIM_SHIFT\fP)) & \fBMCG_C3_SCTRIM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC4 - MCG Control 4 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C4_SCFTRIM_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_SCFTRIM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_SCFTRIM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C4_SCFTRIM_SHIFT\fP)) & \fBMCG_C4_SCFTRIM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C4_FCTRIM_MASK\fP   (0x1EU)"
.br
.ti -1c
.RI "#define \fBMCG_C4_FCTRIM_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_FCTRIM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C4_FCTRIM_SHIFT\fP)) & \fBMCG_C4_FCTRIM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DRST_DRS_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DRST_DRS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DRST_DRS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C4_DRST_DRS_SHIFT\fP)) & \fBMCG_C4_DRST_DRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DMX32_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DMX32_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_C4_DMX32\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C4_DMX32_SHIFT\fP)) & \fBMCG_C4_DMX32_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC5 - MCG Control 5 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C5_PRDIV0_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PRDIV0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PRDIV0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C5_PRDIV0_SHIFT\fP)) & \fBMCG_C5_PRDIV0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLSTEN0_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLSTEN0_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLSTEN0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C5_PLLSTEN0_SHIFT\fP)) & \fBMCG_C5_PLLSTEN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLCLKEN0_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLCLKEN0_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_C5_PLLCLKEN0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C5_PLLCLKEN0_SHIFT\fP)) & \fBMCG_C5_PLLCLKEN0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC6 - MCG Control 6 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C6_VDIV0_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBMCG_C6_VDIV0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_VDIV0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C6_VDIV0_SHIFT\fP)) & \fBMCG_C6_VDIV0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C6_CME0_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_CME0_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_CME0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C6_CME0_SHIFT\fP)) & \fBMCG_C6_CME0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C6_PLLS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_PLLS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_PLLS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C6_PLLS_SHIFT\fP)) & \fBMCG_C6_PLLS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C6_LOLIE0_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_LOLIE0_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_C6_LOLIE0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C6_LOLIE0_SHIFT\fP)) & \fBMCG_C6_LOLIE0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBS - MCG Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_S_IRCST_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_S_IRCST_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_S_IRCST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_IRCST_SHIFT\fP)) & \fBMCG_S_IRCST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_OSCINIT0_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBMCG_S_OSCINIT0_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCG_S_OSCINIT0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_OSCINIT0_SHIFT\fP)) & \fBMCG_S_OSCINIT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_CLKST_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBMCG_S_CLKST_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBMCG_S_CLKST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_CLKST_SHIFT\fP)) & \fBMCG_S_CLKST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_IREFST_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBMCG_S_IREFST_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBMCG_S_IREFST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_IREFST_SHIFT\fP)) & \fBMCG_S_IREFST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_PLLST_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCG_S_PLLST_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_S_PLLST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_PLLST_SHIFT\fP)) & \fBMCG_S_PLLST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOCK0_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOCK0_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOCK0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_LOCK0_SHIFT\fP)) & \fBMCG_S_LOCK0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOLS0_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOLS0_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_S_LOLS0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_S_LOLS0_SHIFT\fP)) & \fBMCG_S_LOLS0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC - MCG Status and Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_SC_LOCS0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_LOCS0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_LOCS0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_LOCS0_SHIFT\fP)) & \fBMCG_SC_LOCS0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FCRDIV_MASK\fP   (0xEU)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FCRDIV_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FCRDIV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_FCRDIV_SHIFT\fP)) & \fBMCG_SC_FCRDIV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FLTPRSRV_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FLTPRSRV_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_FLTPRSRV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_FLTPRSRV_SHIFT\fP)) & \fBMCG_SC_FLTPRSRV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMF_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMF_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_ATMF_SHIFT\fP)) & \fBMCG_SC_ATMF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATMS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_ATMS_SHIFT\fP)) & \fBMCG_SC_ATMS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATME_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATME_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_SC_ATME\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_SC_ATME_SHIFT\fP)) & \fBMCG_SC_ATME_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATCVH - MCG Auto Trim Compare Value High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_ATCVH_ATCVH_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCG_ATCVH_ATCVH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_ATCVH_ATCVH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_ATCVH_ATCVH_SHIFT\fP)) & \fBMCG_ATCVH_ATCVH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBATCVL - MCG Auto Trim Compare Value Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_ATCVL_ATCVL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCG_ATCVL_ATCVL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_ATCVL_ATCVL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_ATCVL_ATCVL_SHIFT\fP)) & \fBMCG_ATCVL_ATCVL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC7 - MCG Control 7 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C7_OSCSEL_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBMCG_C7_OSCSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C7_OSCSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C7_OSCSEL_SHIFT\fP)) & \fBMCG_C7_OSCSEL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC8 - MCG Control 8 Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCG_C8_LOCS1_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOCS1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOCS1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C8_LOCS1_SHIFT\fP)) & \fBMCG_C8_LOCS1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C8_CME1_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_CME1_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_CME1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C8_CME1_SHIFT\fP)) & \fBMCG_C8_CME1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOLRE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOLRE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOLRE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C8_LOLRE_SHIFT\fP)) & \fBMCG_C8_LOLRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOCRE1_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOCRE1_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBMCG_C8_LOCRE1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBMCG_C8_LOCRE1_SHIFT\fP)) & \fBMCG_C8_LOCRE1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPLASC - Crossbar Switch (AXBS) Slave Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_PLASC_ASC_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PLASC_ASC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PLASC_ASC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLASC_ASC_SHIFT\fP)) & \fBMCM_PLASC_ASC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPLAMC - Crossbar Switch (AXBS) Master Configuration\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PLAMC_AMC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBMCM_PLAMC_AMC_SHIFT\fP)) & \fBMCM_PLAMC_AMC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBISCR - Interrupt Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_IRQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_IRQ_SHIFT\fP)) & \fBMCM_ISCR_IRQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_NMI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_NMI_SHIFT\fP)) & \fBMCM_ISCR_NMI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_DHREQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_DHREQ_SHIFT\fP)) & \fBMCM_ISCR_DHREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOC_SHIFT\fP)) & \fBMCM_ISCR_FIOC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZC_SHIFT\fP)) & \fBMCM_ISCR_FDZC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFC_SHIFT\fP)) & \fBMCM_ISCR_FOFC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFC_SHIFT\fP)) & \fBMCM_ISCR_FUFC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXC_SHIFT\fP)) & \fBMCM_ISCR_FIXC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDC_SHIFT\fP)) & \fBMCM_ISCR_FIDC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIOCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIOCE_SHIFT\fP)) & \fBMCM_ISCR_FIOCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FDZCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FDZCE_SHIFT\fP)) & \fBMCM_ISCR_FDZCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FOFCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FOFCE_SHIFT\fP)) & \fBMCM_ISCR_FOFCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FUFCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FUFCE_SHIFT\fP)) & \fBMCM_ISCR_FUFCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIXCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIXCE_SHIFT\fP)) & \fBMCM_ISCR_FIXCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBMCM_ISCR_FIDCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ISCR_FIDCE_SHIFT\fP)) & \fBMCM_ISCR_FIDCE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBETBCC - ETB Counter Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_CNTEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_CNTEN_SHIFT\fP)) & \fBMCM_ETBCC_CNTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT_MASK\fP   (0x6U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RSPT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RSPT_SHIFT\fP)) & \fBMCM_ETBCC_RSPT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_RLRQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_RLRQ_SHIFT\fP)) & \fBMCM_ETBCC_RLRQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ETDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ETDIS_SHIFT\fP)) & \fBMCM_ETBCC_ETDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCC_ITDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCC_ITDIS_SHIFT\fP)) & \fBMCM_ETBCC_ITDIS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBETBRL - ETB Reload register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD_MASK\fP   (0x7FFU)"
.br
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBRL_RELOAD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBRL_RELOAD_SHIFT\fP)) & \fBMCM_ETBRL_RELOAD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBETBCNT - ETB Counter Value register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER_MASK\fP   (0x7FFU)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_ETBCNT_COUNTER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_ETBCNT_COUNTER_SHIFT\fP)) & \fBMCM_ETBCNT_COUNTER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPID - Process ID register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBMCM_PID_PID_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBMCM_PID_PID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBMCM_PID_PID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBMCM_PID_PID_SHIFT\fP)) & \fBMCM_PID_PID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY3 - Backdoor Comparison Key 3\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY3_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY3_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY3_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY3_KEY_SHIFT\fP)) & \fBNV_BACKKEY3_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY2 - Backdoor Comparison Key 2\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY2_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY2_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY2_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY2_KEY_SHIFT\fP)) & \fBNV_BACKKEY2_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY1 - Backdoor Comparison Key 1\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY1_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY1_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY1_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY1_KEY_SHIFT\fP)) & \fBNV_BACKKEY1_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY0 - Backdoor Comparison Key 0\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY0_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY0_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY0_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY0_KEY_SHIFT\fP)) & \fBNV_BACKKEY0_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY7 - Backdoor Comparison Key 7\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY7_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY7_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY7_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY7_KEY_SHIFT\fP)) & \fBNV_BACKKEY7_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY6 - Backdoor Comparison Key 6\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY6_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY6_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY6_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY6_KEY_SHIFT\fP)) & \fBNV_BACKKEY6_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY5 - Backdoor Comparison Key 5\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY5_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY5_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY5_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY5_KEY_SHIFT\fP)) & \fBNV_BACKKEY5_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBACKKEY4 - Backdoor Comparison Key 4\&.\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_BACKKEY4_KEY_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY4_KEY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_BACKKEY4_KEY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_BACKKEY4_KEY_SHIFT\fP)) & \fBNV_BACKKEY4_KEY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT3 - Non-volatile P-Flash Protection 1 - Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FPROT3_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FPROT3_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FPROT3_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FPROT3_PROT_SHIFT\fP)) & \fBNV_FPROT3_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT2 - Non-volatile P-Flash Protection 1 - High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FPROT2_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FPROT2_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FPROT2_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FPROT2_PROT_SHIFT\fP)) & \fBNV_FPROT2_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT1 - Non-volatile P-Flash Protection 0 - Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FPROT1_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FPROT1_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FPROT1_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FPROT1_PROT_SHIFT\fP)) & \fBNV_FPROT1_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFPROT0 - Non-volatile P-Flash Protection 0 - High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FPROT0_PROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FPROT0_PROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FPROT0_PROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FPROT0_PROT_SHIFT\fP)) & \fBNV_FPROT0_PROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFSEC - Non-volatile Flash Security Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FSEC_SEC_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_SEC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_SEC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FSEC_SEC_SHIFT\fP)) & \fBNV_FSEC_SEC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_FSLACC_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_FSLACC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_FSLACC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FSEC_FSLACC_SHIFT\fP)) & \fBNV_FSEC_FSLACC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_MEEN_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_MEEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_MEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FSEC_MEEN_SHIFT\fP)) & \fBNV_FSEC_MEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_KEYEN_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_KEYEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBNV_FSEC_KEYEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FSEC_KEYEN_SHIFT\fP)) & \fBNV_FSEC_KEYEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFOPT - Non-volatile Flash Option Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FOPT_LPBOOT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBNV_FOPT_LPBOOT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FOPT_LPBOOT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FOPT_LPBOOT_SHIFT\fP)) & \fBNV_FOPT_LPBOOT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBNV_FOPT_EZPORT_DIS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBNV_FOPT_EZPORT_DIS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBNV_FOPT_EZPORT_DIS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FOPT_EZPORT_DIS_SHIFT\fP)) & \fBNV_FOPT_EZPORT_DIS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFEPROT - Non-volatile EERAM Protection Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FEPROT_EPROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FEPROT_EPROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FEPROT_EPROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FEPROT_EPROT_SHIFT\fP)) & \fBNV_FEPROT_EPROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFDPROT - Non-volatile D-Flash Protection Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBNV_FDPROT_DPROT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBNV_FDPROT_DPROT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBNV_FDPROT_DPROT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBNV_FDPROT_DPROT_SHIFT\fP)) & \fBNV_FDPROT_DPROT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR - OSC Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBOSC_CR_SC16P_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC16P_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC16P\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_SC16P_SHIFT\fP)) & \fBOSC_CR_SC16P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC8P_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC8P_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC8P\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_SC8P_SHIFT\fP)) & \fBOSC_CR_SC8P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC4P_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC4P_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC4P\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_SC4P_SHIFT\fP)) & \fBOSC_CR_SC4P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC2P_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC2P_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_SC2P\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_SC2P_SHIFT\fP)) & \fBOSC_CR_SC2P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBOSC_CR_EREFSTEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_EREFSTEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_EREFSTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_EREFSTEN_SHIFT\fP)) & \fBOSC_CR_EREFSTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBOSC_CR_ERCLKEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_ERCLKEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBOSC_CR_ERCLKEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBOSC_CR_ERCLKEN_SHIFT\fP)) & \fBOSC_CR_ERCLKEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC - Status and Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_SC_LDOK_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_LDOK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_LDOK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_LDOK_SHIFT\fP)) & \fBPDB_SC_LDOK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_CONT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_CONT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_CONT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_CONT_SHIFT\fP)) & \fBPDB_SC_CONT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_MULT_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBPDB_SC_MULT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_MULT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_MULT_SHIFT\fP)) & \fBPDB_SC_MULT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_PDBIE_SHIFT\fP)) & \fBPDB_SC_PDBIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIF_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIF_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBIF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_PDBIF_SHIFT\fP)) & \fBPDB_SC_PDBIF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_PDBEN_SHIFT\fP)) & \fBPDB_SC_PDBEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_TRGSEL_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_TRGSEL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_TRGSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_TRGSEL_SHIFT\fP)) & \fBPDB_SC_TRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PRESCALER_MASK\fP   (0x7000U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PRESCALER_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PRESCALER\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_PRESCALER_SHIFT\fP)) & \fBPDB_SC_PRESCALER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_DMAEN_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_DMAEN_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_DMAEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_DMAEN_SHIFT\fP)) & \fBPDB_SC_DMAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_SWTRIG_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_SWTRIG_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_SWTRIG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_SWTRIG_SHIFT\fP)) & \fBPDB_SC_SWTRIG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEIE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEIE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_PDBEIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_PDBEIE_SHIFT\fP)) & \fBPDB_SC_PDBEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_SC_LDMOD_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_LDMOD_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBPDB_SC_LDMOD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_SC_LDMOD_SHIFT\fP)) & \fBPDB_SC_LDMOD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMOD - Modulus register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_MOD_MOD_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_MOD_MOD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_MOD_MOD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_MOD_MOD_SHIFT\fP)) & \fBPDB_MOD_MOD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCNT - Counter register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_CNT_CNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_CNT_CNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_CNT_CNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_CNT_CNT_SHIFT\fP)) & \fBPDB_CNT_CNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIDLY - Interrupt Delay register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_IDLY_IDLY_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_IDLY_IDLY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_IDLY_IDLY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_IDLY_IDLY_SHIFT\fP)) & \fBPDB_IDLY_IDLY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC1 - Channel n Control register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_C1_EN_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBPDB_C1_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_C1_EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_C1_EN_SHIFT\fP)) & \fBPDB_C1_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_C1_TOS_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBPDB_C1_TOS_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBPDB_C1_TOS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_C1_TOS_SHIFT\fP)) & \fBPDB_C1_TOS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_C1_BB_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBPDB_C1_BB_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPDB_C1_BB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_C1_BB_SHIFT\fP)) & \fBPDB_C1_BB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_C1_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBS - Channel n Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_S_ERR_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBPDB_S_ERR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_S_ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_S_ERR_SHIFT\fP)) & \fBPDB_S_ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_S_CF_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBPDB_S_CF_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPDB_S_CF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_S_CF_SHIFT\fP)) & \fBPDB_S_CF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_S_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDLY - Channel n Delay 0 register\&.\&.Channel n Delay 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_DLY_DLY_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_DLY_DLY_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_DLY_DLY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_DLY_DLY_SHIFT\fP)) & \fBPDB_DLY_DLY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_DLY_COUNT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBPDB_DLY_COUNT2\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBINTC - DAC Interval Trigger n Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_INTC_TOE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_TOE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_TOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_INTC_TOE_SHIFT\fP)) & \fBPDB_INTC_TOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_EXT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_EXT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_EXT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_INTC_EXT_SHIFT\fP)) & \fBPDB_INTC_EXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_INTC_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBINT - DAC Interval n register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_INT_INT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_INT_INT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_INT_INT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_INT_INT_SHIFT\fP)) & \fBPDB_INT_INT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_INT_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPOEN - Pulse-Out n Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_POEN_POEN_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBPDB_POEN_POEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_POEN_POEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_POEN_POEN_SHIFT\fP)) & \fBPDB_POEN_POEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPODLY - Pulse-Out n Delay register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPDB_PODLY_DLY2_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_DLY2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_DLY2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_PODLY_DLY2_SHIFT\fP)) & \fBPDB_PODLY_DLY2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_DLY1_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_DLY1_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_DLY1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPDB_PODLY_DLY1_SHIFT\fP)) & \fBPDB_PODLY_DLY1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPDB_PODLY_COUNT\fP   (3U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMCR - PIT Module Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPIT_MCR_FRZ_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPIT_MCR_FRZ_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPIT_MCR_FRZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_MCR_FRZ_SHIFT\fP)) & \fBPIT_MCR_FRZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_MCR_MDIS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBPIT_MCR_MDIS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBPIT_MCR_MDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_MCR_MDIS_SHIFT\fP)) & \fBPIT_MCR_MDIS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLDVAL - Timer Load Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPIT_LDVAL_TSV_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBPIT_LDVAL_TSV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPIT_LDVAL_TSV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_LDVAL_TSV_SHIFT\fP)) & \fBPIT_LDVAL_TSV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_LDVAL_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCVAL - Current Timer Value Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPIT_CVAL_TVL_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBPIT_CVAL_TVL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPIT_CVAL_TVL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_CVAL_TVL_SHIFT\fP)) & \fBPIT_CVAL_TVL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_CVAL_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCTRL - Timer Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPIT_TCTRL_TEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_TEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_TEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_TCTRL_TEN_SHIFT\fP)) & \fBPIT_TCTRL_TEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_TIE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_TIE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_TIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_TCTRL_TIE_SHIFT\fP)) & \fBPIT_TCTRL_TIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_CHN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_CHN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_CHN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_TCTRL_CHN_SHIFT\fP)) & \fBPIT_TCTRL_CHN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_TCTRL_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTFLG - Timer Flag Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPIT_TFLG_TIF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPIT_TFLG_TIF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPIT_TFLG_TIF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPIT_TFLG_TIF_SHIFT\fP)) & \fBPIT_TFLG_TIF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPIT_TFLG_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLVDSC1 - Low Voltage Detect Status And Control 1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDV_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC1_LVDV_SHIFT\fP)) & \fBPMC_LVDSC1_LVDV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDRE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDRE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDRE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC1_LVDRE_SHIFT\fP)) & \fBPMC_LVDSC1_LVDRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDIE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDIE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC1_LVDIE_SHIFT\fP)) & \fBPMC_LVDSC1_LVDIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDACK_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDACK_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDACK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC1_LVDACK_SHIFT\fP)) & \fBPMC_LVDSC1_LVDACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC1_LVDF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC1_LVDF_SHIFT\fP)) & \fBPMC_LVDSC1_LVDF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLVDSC2 - Low Voltage Detect Status And Control 2 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWV_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC2_LVWV_SHIFT\fP)) & \fBPMC_LVDSC2_LVWV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWIE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWIE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC2_LVWIE_SHIFT\fP)) & \fBPMC_LVDSC2_LVWIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWACK_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWACK_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWACK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC2_LVWACK_SHIFT\fP)) & \fBPMC_LVDSC2_LVWACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBPMC_LVDSC2_LVWF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_LVDSC2_LVWF_SHIFT\fP)) & \fBPMC_LVDSC2_LVWF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBREGSC - Regulator Status And Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPMC_REGSC_BGBE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_BGBE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_BGBE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_REGSC_BGBE_SHIFT\fP)) & \fBPMC_REGSC_BGBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_REGONS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_REGONS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_REGONS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_REGSC_REGONS_SHIFT\fP)) & \fBPMC_REGSC_REGONS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_ACKISO_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_ACKISO_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_ACKISO\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_REGSC_ACKISO_SHIFT\fP)) & \fBPMC_REGSC_ACKISO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_BGEN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_BGEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBPMC_REGSC_BGEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBPMC_REGSC_BGEN_SHIFT\fP)) & \fBPMC_REGSC_BGEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPCR - Pin Control Register n\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_PCR_PS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_PS_SHIFT\fP)) & \fBPORT_PCR_PS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_PE_SHIFT\fP)) & \fBPORT_PCR_PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_SRE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_SRE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_SRE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_SRE_SHIFT\fP)) & \fBPORT_PCR_SRE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PFE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PFE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_PFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_PFE_SHIFT\fP)) & \fBPORT_PCR_PFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ODE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ODE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_ODE_SHIFT\fP)) & \fBPORT_PCR_ODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_DSE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_DSE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_DSE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_DSE_SHIFT\fP)) & \fBPORT_PCR_DSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_MUX_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_MUX_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_MUX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_MUX_SHIFT\fP)) & \fBPORT_PCR_MUX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_LK_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_LK_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_LK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_LK_SHIFT\fP)) & \fBPORT_PCR_LK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_IRQC_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_IRQC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_IRQC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_IRQC_SHIFT\fP)) & \fBPORT_PCR_IRQC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ISF_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ISF_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_ISF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_PCR_ISF_SHIFT\fP)) & \fBPORT_PCR_ISF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_PCR_COUNT\fP   (32U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPCLR - Global Pin Control Low Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWD_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_GPCLR_GPWD_SHIFT\fP)) & \fBPORT_GPCLR_GPWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWE_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCLR_GPWE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_GPCLR_GPWE_SHIFT\fP)) & \fBPORT_GPCLR_GPWE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBGPCHR - Global Pin Control High Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWD_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_GPCHR_GPWD_SHIFT\fP)) & \fBPORT_GPCHR_GPWD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWE_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBPORT_GPCHR_GPWE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_GPCHR_GPWE_SHIFT\fP)) & \fBPORT_GPCHR_GPWE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBISFR - Interrupt Status Flag Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_ISFR_ISF_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBPORT_ISFR_ISF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_ISFR_ISF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_ISFR_ISF_SHIFT\fP)) & \fBPORT_ISFR_ISF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDFER - Digital Filter Enable Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DFER_DFE_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBPORT_DFER_DFE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_DFER_DFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_DFER_DFE_SHIFT\fP)) & \fBPORT_DFER_DFE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDFCR - Digital Filter Clock Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DFCR_CS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBPORT_DFCR_CS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_DFCR_CS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_DFCR_CS_SHIFT\fP)) & \fBPORT_DFCR_CS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDFWR - Digital Filter Width Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBPORT_DFWR_FILT_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBPORT_DFWR_FILT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBPORT_DFWR_FILT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBPORT_DFWR_FILT_SHIFT\fP)) & \fBPORT_DFWR_FILT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSRS0 - System Reset Status Register 0\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRCM_SRS0_WAKEUP_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_WAKEUP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_WAKEUP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_WAKEUP_SHIFT\fP)) & \fBRCM_SRS0_WAKEUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LVD_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LVD_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LVD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_LVD_SHIFT\fP)) & \fBRCM_SRS0_LVD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOC_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_LOC_SHIFT\fP)) & \fBRCM_SRS0_LOC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOL_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_LOL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_LOL_SHIFT\fP)) & \fBRCM_SRS0_LOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_WDOG_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_WDOG_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_WDOG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_WDOG_SHIFT\fP)) & \fBRCM_SRS0_WDOG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_PIN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_PIN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_PIN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_PIN_SHIFT\fP)) & \fBRCM_SRS0_PIN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_POR_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_POR_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS0_POR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS0_POR_SHIFT\fP)) & \fBRCM_SRS0_POR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSRS1 - System Reset Status Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRCM_SRS1_JTAG_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_JTAG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_JTAG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_JTAG_SHIFT\fP)) & \fBRCM_SRS1_JTAG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_LOCKUP_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_LOCKUP_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_LOCKUP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_LOCKUP_SHIFT\fP)) & \fBRCM_SRS1_LOCKUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SW_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SW_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SW\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_SW_SHIFT\fP)) & \fBRCM_SRS1_SW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_MDM_AP_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_MDM_AP_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_MDM_AP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_MDM_AP_SHIFT\fP)) & \fBRCM_SRS1_MDM_AP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_EZPT_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_EZPT_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_EZPT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_EZPT_SHIFT\fP)) & \fBRCM_SRS1_EZPT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SACKERR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SACKERR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBRCM_SRS1_SACKERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_SRS1_SACKERR_SHIFT\fP)) & \fBRCM_SRS1_SACKERR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRPFC - Reset Pin Filter Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSRW_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSRW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSRW\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_RPFC_RSTFLTSRW_SHIFT\fP)) & \fBRCM_RPFC_RSTFLTSRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRCM_RPFC_RSTFLTSS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_RPFC_RSTFLTSS_SHIFT\fP)) & \fBRCM_RPFC_RSTFLTSS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRPFW - Reset Pin Filter Width register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRCM_RPFW_RSTFLTSEL_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBRCM_RPFW_RSTFLTSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRCM_RPFW_RSTFLTSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_RPFW_RSTFLTSEL_SHIFT\fP)) & \fBRCM_RPFW_RSTFLTSEL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMR - Mode Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRCM_MR_EZP_MS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRCM_MR_EZP_MS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRCM_MR_EZP_MS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBRCM_MR_EZP_MS_SHIFT\fP)) & \fBRCM_MR_EZP_MS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBREG - Register file register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRFSYS_REG_LL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_LL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_LL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFSYS_REG_LL_SHIFT\fP)) & \fBRFSYS_REG_LL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_LH_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_LH_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_LH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFSYS_REG_LH_SHIFT\fP)) & \fBRFSYS_REG_LH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HL_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFSYS_REG_HL_SHIFT\fP)) & \fBRFSYS_REG_HL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HH_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HH_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_HH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFSYS_REG_HH_SHIFT\fP)) & \fBRFSYS_REG_HH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFSYS_REG_COUNT\fP   (8U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBREG - VBAT register file register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRFVBAT_REG_LL_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_LL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_LL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFVBAT_REG_LL_SHIFT\fP)) & \fBRFVBAT_REG_LL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_LH_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_LH_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_LH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFVBAT_REG_LH_SHIFT\fP)) & \fBRFVBAT_REG_LH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HL_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFVBAT_REG_HL_SHIFT\fP)) & \fBRFVBAT_REG_HL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HH_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HH_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_HH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRFVBAT_REG_HH_SHIFT\fP)) & \fBRFVBAT_REG_HH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRFVBAT_REG_COUNT\fP   (8U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR - RNGA Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRNG_CR_GO_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_GO_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_GO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_GO_SHIFT\fP)) & \fBRNG_CR_GO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_HA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_HA_SHIFT\fP)) & \fBRNG_CR_HA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_INTM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_INTM_SHIFT\fP)) & \fBRNG_CR_INTM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_CLRI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_CLRI_SHIFT\fP)) & \fBRNG_CR_CLRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRNG_CR_SLP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_CR_SLP_SHIFT\fP)) & \fBRNG_CR_SLP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSR - RNGA Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRNG_SR_SECV_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SECV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SECV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SECV_SHIFT\fP)) & \fBRNG_SR_SECV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_LRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_LRS_SHIFT\fP)) & \fBRNG_SR_LRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ORU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ORU_SHIFT\fP)) & \fBRNG_SR_ORU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_ERRI\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_ERRI_SHIFT\fP)) & \fBRNG_SR_ERRI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_SLP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_SLP_SHIFT\fP)) & \fBRNG_SR_SLP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_LVL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_LVL_SHIFT\fP)) & \fBRNG_SR_OREG_LVL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBRNG_SR_OREG_SIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_SR_OREG_SIZE_SHIFT\fP)) & \fBRNG_SR_OREG_SIZE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBER - RNGA Entropy Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_ER_EXT_ENT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_ER_EXT_ENT_SHIFT\fP)) & \fBRNG_ER_EXT_ENT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOR - RNGA Output Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRNG_OR_RANDOUT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRNG_OR_RANDOUT_SHIFT\fP)) & \fBRNG_OR_RANDOUT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTSR - RTC Time Seconds Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_TSR_TSR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRTC_TSR_TSR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_TSR_TSR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TSR_TSR_SHIFT\fP)) & \fBRTC_TSR_TSR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTPR - RTC Time Prescaler Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_TPR_TPR_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBRTC_TPR_TPR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_TPR_TPR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TPR_TPR_SHIFT\fP)) & \fBRTC_TPR_TPR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTAR - RTC Time Alarm Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_TAR_TAR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBRTC_TAR_TAR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_TAR_TAR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TAR_TAR_SHIFT\fP)) & \fBRTC_TAR_TAR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR - RTC Time Compensation Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_TCR_TCR_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_TCR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_TCR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TCR_TCR_SHIFT\fP)) & \fBRTC_TCR_TCR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIR_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIR_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TCR_CIR_SHIFT\fP)) & \fBRTC_TCR_CIR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_TCV_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_TCV_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_TCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TCR_TCV_SHIFT\fP)) & \fBRTC_TCR_TCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIC_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIC_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBRTC_TCR_CIC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_TCR_CIC_SHIFT\fP)) & \fBRTC_TCR_CIC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCR - RTC Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_CR_SWR_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SWR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SWR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SWR_SHIFT\fP)) & \fBRTC_CR_SWR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_WPE_SHIFT\fP)) & \fBRTC_CR_WPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SUP_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SUP_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SUP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SUP_SHIFT\fP)) & \fBRTC_CR_SUP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_UM_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_UM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_UM_SHIFT\fP)) & \fBRTC_CR_UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPS_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_WPS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_WPS_SHIFT\fP)) & \fBRTC_CR_WPS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_OSCE_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_OSCE_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_OSCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_OSCE_SHIFT\fP)) & \fBRTC_CR_OSCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_CLKO_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_CLKO_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_CLKO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_CLKO_SHIFT\fP)) & \fBRTC_CR_CLKO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC16P_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC16P_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC16P\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SC16P_SHIFT\fP)) & \fBRTC_CR_SC16P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC8P_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC8P_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC8P\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SC8P_SHIFT\fP)) & \fBRTC_CR_SC8P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC4P_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC4P_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC4P\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SC4P_SHIFT\fP)) & \fBRTC_CR_SC4P_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC2P_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC2P_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBRTC_CR_SC2P\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_CR_SC2P_SHIFT\fP)) & \fBRTC_CR_SC2P_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSR - RTC Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_SR_TIF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TIF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TIF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_SR_TIF_SHIFT\fP)) & \fBRTC_SR_TIF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TOF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TOF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TOF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_SR_TOF_SHIFT\fP)) & \fBRTC_SR_TOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TAF_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TAF_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TAF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_SR_TAF_SHIFT\fP)) & \fBRTC_SR_TAF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TCE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TCE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_SR_TCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_SR_TCE_SHIFT\fP)) & \fBRTC_SR_TCE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBLR - RTC Lock Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_LR_TCL_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_TCL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_TCL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_LR_TCL_SHIFT\fP)) & \fBRTC_LR_TCL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_LR_CRL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_CRL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_CRL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_LR_CRL_SHIFT\fP)) & \fBRTC_LR_CRL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_LR_SRL_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_SRL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_SRL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_LR_SRL_SHIFT\fP)) & \fBRTC_LR_SRL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_LR_LRL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_LRL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBRTC_LR_LRL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_LR_LRL_SHIFT\fP)) & \fBRTC_LR_LRL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIER - RTC Interrupt Enable Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_IER_TIIE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TIIE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TIIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_IER_TIIE_SHIFT\fP)) & \fBRTC_IER_TIIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TOIE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TOIE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TOIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_IER_TOIE_SHIFT\fP)) & \fBRTC_IER_TOIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TAIE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TAIE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TAIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_IER_TAIE_SHIFT\fP)) & \fBRTC_IER_TAIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TSIE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TSIE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_TSIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_IER_TSIE_SHIFT\fP)) & \fBRTC_IER_TSIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_IER_WPON_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_WPON_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBRTC_IER_WPON\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_IER_WPON_SHIFT\fP)) & \fBRTC_IER_WPON_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWAR - RTC Write Access Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_WAR_TSRW_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TSRW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TSRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_TSRW_SHIFT\fP)) & \fBRTC_WAR_TSRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TPRW_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TPRW_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TPRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_TPRW_SHIFT\fP)) & \fBRTC_WAR_TPRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TARW_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TARW_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TARW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_TARW_SHIFT\fP)) & \fBRTC_WAR_TARW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TCRW_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TCRW_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_TCRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_TCRW_SHIFT\fP)) & \fBRTC_WAR_TCRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_CRW_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_CRW_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_CRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_CRW_SHIFT\fP)) & \fBRTC_WAR_CRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_SRW_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_SRW_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_SRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_SRW_SHIFT\fP)) & \fBRTC_WAR_SRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_LRW_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_LRW_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_LRW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_LRW_SHIFT\fP)) & \fBRTC_WAR_LRW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_IERW_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_IERW_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBRTC_WAR_IERW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_WAR_IERW_SHIFT\fP)) & \fBRTC_WAR_IERW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRAR - RTC Read Access Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBRTC_RAR_TSRR_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TSRR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TSRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_TSRR_SHIFT\fP)) & \fBRTC_RAR_TSRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TPRR_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TPRR_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TPRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_TPRR_SHIFT\fP)) & \fBRTC_RAR_TPRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TARR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TARR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TARR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_TARR_SHIFT\fP)) & \fBRTC_RAR_TARR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TCRR_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TCRR_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_TCRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_TCRR_SHIFT\fP)) & \fBRTC_RAR_TCRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_CRR_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_CRR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_CRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_CRR_SHIFT\fP)) & \fBRTC_RAR_CRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_SRR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_SRR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_SRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_SRR_SHIFT\fP)) & \fBRTC_RAR_SRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_LRR_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_LRR_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_LRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_LRR_SHIFT\fP)) & \fBRTC_RAR_LRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_IERR_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_IERR_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBRTC_RAR_IERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBRTC_RAR_IERR_SHIFT\fP)) & \fBRTC_RAR_IERR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDSADDR - DMA System Address register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_DSADDR_DSADDR_MASK\fP   (0xFFFFFFFCU)"
.br
.ti -1c
.RI "#define \fBSDHC_DSADDR_DSADDR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_DSADDR_DSADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_DSADDR_DSADDR_SHIFT\fP)) & \fBSDHC_DSADDR_DSADDR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBLKATTR - Block Attributes register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKSIZE_MASK\fP   (0x1FFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKSIZE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKSIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_BLKATTR_BLKSIZE_SHIFT\fP)) & \fBSDHC_BLKATTR_BLKSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKCNT_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKCNT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_BLKATTR_BLKCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_BLKATTR_BLKCNT_SHIFT\fP)) & \fBSDHC_BLKATTR_BLKCNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMDARG - Command Argument register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_CMDARG_CMDARG_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDARG_CMDARG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDARG_CMDARG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_CMDARG_CMDARG_SHIFT\fP)) & \fBSDHC_CMDARG_CMDARG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBXFERTYP - Transfer Type register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DMAEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DMAEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DMAEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_DMAEN_SHIFT\fP)) & \fBSDHC_XFERTYP_DMAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_BCEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_BCEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_BCEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_BCEN_SHIFT\fP)) & \fBSDHC_XFERTYP_BCEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_AC12EN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_AC12EN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_AC12EN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_AC12EN_SHIFT\fP)) & \fBSDHC_XFERTYP_AC12EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DTDSEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DTDSEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DTDSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_DTDSEL_SHIFT\fP)) & \fBSDHC_XFERTYP_DTDSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_MSBSEL_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_MSBSEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_MSBSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_MSBSEL_SHIFT\fP)) & \fBSDHC_XFERTYP_MSBSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_RSPTYP_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_RSPTYP_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_RSPTYP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_RSPTYP_SHIFT\fP)) & \fBSDHC_XFERTYP_RSPTYP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CCCEN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CCCEN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CCCEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_CCCEN_SHIFT\fP)) & \fBSDHC_XFERTYP_CCCEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CICEN_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CICEN_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CICEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_CICEN_SHIFT\fP)) & \fBSDHC_XFERTYP_CICEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DPSEL_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DPSEL_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_DPSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_DPSEL_SHIFT\fP)) & \fBSDHC_XFERTYP_DPSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDTYP_MASK\fP   (0xC00000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDTYP_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDTYP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_CMDTYP_SHIFT\fP)) & \fBSDHC_XFERTYP_CMDTYP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDINX_MASK\fP   (0x3F000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDINX_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_XFERTYP_CMDINX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_XFERTYP_CMDINX_SHIFT\fP)) & \fBSDHC_XFERTYP_CMDINX_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCMDRSP - Command Response 0\&.\&.Command Response 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP0_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_CMDRSP_CMDRSP0_SHIFT\fP)) & \fBSDHC_CMDRSP_CMDRSP0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP1_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP1_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_CMDRSP_CMDRSP1_SHIFT\fP)) & \fBSDHC_CMDRSP_CMDRSP1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP2_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP2_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_CMDRSP_CMDRSP2_SHIFT\fP)) & \fBSDHC_CMDRSP_CMDRSP2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP3_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP3_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_CMDRSP3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_CMDRSP_CMDRSP3_SHIFT\fP)) & \fBSDHC_CMDRSP_CMDRSP3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_CMDRSP_COUNT\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBDATPORT - Buffer Data Port register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_DATPORT_DATCONT_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_DATPORT_DATCONT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_DATPORT_DATCONT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_DATPORT_DATCONT_SHIFT\fP)) & \fBSDHC_DATPORT_DATCONT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPRSSTAT - Present State register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CIHB_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CIHB_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CIHB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_CIHB_SHIFT\fP)) & \fBSDHC_PRSSTAT_CIHB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CDIHB_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CDIHB_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CDIHB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_CDIHB_SHIFT\fP)) & \fBSDHC_PRSSTAT_CDIHB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLA_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLA_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_DLA_SHIFT\fP)) & \fBSDHC_PRSSTAT_DLA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDSTB_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDSTB_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDSTB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_SDSTB_SHIFT\fP)) & \fBSDHC_PRSSTAT_SDSTB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_IPGOFF_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_IPGOFF_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_IPGOFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_IPGOFF_SHIFT\fP)) & \fBSDHC_PRSSTAT_IPGOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_HCKOFF_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_HCKOFF_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_HCKOFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_HCKOFF_SHIFT\fP)) & \fBSDHC_PRSSTAT_HCKOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_PEROFF_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_PEROFF_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_PEROFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_PEROFF_SHIFT\fP)) & \fBSDHC_PRSSTAT_PEROFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDOFF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDOFF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_SDOFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_SDOFF_SHIFT\fP)) & \fBSDHC_PRSSTAT_SDOFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_WTA_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_WTA_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_WTA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_WTA_SHIFT\fP)) & \fBSDHC_PRSSTAT_WTA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_RTA_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_RTA_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_RTA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_RTA_SHIFT\fP)) & \fBSDHC_PRSSTAT_RTA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BWEN_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BWEN_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BWEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_BWEN_SHIFT\fP)) & \fBSDHC_PRSSTAT_BWEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BREN_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BREN_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_BREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_BREN_SHIFT\fP)) & \fBSDHC_PRSSTAT_BREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CINS_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CINS_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CINS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_CINS_SHIFT\fP)) & \fBSDHC_PRSSTAT_CINS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CLSL_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CLSL_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_CLSL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_CLSL_SHIFT\fP)) & \fBSDHC_PRSSTAT_CLSL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLSL_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLSL_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_PRSSTAT_DLSL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PRSSTAT_DLSL_SHIFT\fP)) & \fBSDHC_PRSSTAT_DLSL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPROCTL - Protocol Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_PROCTL_LCTL_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_LCTL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_LCTL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_LCTL_SHIFT\fP)) & \fBSDHC_PROCTL_LCTL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DTW_MASK\fP   (0x6U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DTW_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DTW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_DTW_SHIFT\fP)) & \fBSDHC_PROCTL_DTW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_D3CD_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_D3CD_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_D3CD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_D3CD_SHIFT\fP)) & \fBSDHC_PROCTL_D3CD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_EMODE_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_EMODE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_EMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_EMODE_SHIFT\fP)) & \fBSDHC_PROCTL_EMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDTL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDTL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDTL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_CDTL_SHIFT\fP)) & \fBSDHC_PROCTL_CDTL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDSS_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDSS_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CDSS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_CDSS_SHIFT\fP)) & \fBSDHC_PROCTL_CDSS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DMAS_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DMAS_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_DMAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_DMAS_SHIFT\fP)) & \fBSDHC_PROCTL_DMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_SABGREQ_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_SABGREQ_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_SABGREQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_SABGREQ_SHIFT\fP)) & \fBSDHC_PROCTL_SABGREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CREQ_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CREQ_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_CREQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_CREQ_SHIFT\fP)) & \fBSDHC_PROCTL_CREQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_RWCTL_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_RWCTL_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_RWCTL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_RWCTL_SHIFT\fP)) & \fBSDHC_PROCTL_RWCTL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_IABG_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_IABG_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_IABG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_IABG_SHIFT\fP)) & \fBSDHC_PROCTL_IABG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINT_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINT_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_WECINT_SHIFT\fP)) & \fBSDHC_PROCTL_WECINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINS_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINS_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECINS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_WECINS_SHIFT\fP)) & \fBSDHC_PROCTL_WECINS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECRM_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECRM_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSDHC_PROCTL_WECRM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_PROCTL_WECRM_SHIFT\fP)) & \fBSDHC_PROCTL_WECRM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSYSCTL - System Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_SYSCTL_IPGEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_IPGEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_IPGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_IPGEN_SHIFT\fP)) & \fBSDHC_SYSCTL_IPGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_HCKEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_HCKEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_HCKEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_HCKEN_SHIFT\fP)) & \fBSDHC_SYSCTL_HCKEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_PEREN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_PEREN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_PEREN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_PEREN_SHIFT\fP)) & \fBSDHC_SYSCTL_PEREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_SDCLKEN_SHIFT\fP)) & \fBSDHC_SYSCTL_SDCLKEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DVS_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DVS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DVS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_DVS_SHIFT\fP)) & \fBSDHC_SYSCTL_DVS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKFS_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKFS_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_SDCLKFS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_SDCLKFS_SHIFT\fP)) & \fBSDHC_SYSCTL_SDCLKFS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DTOCV_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DTOCV_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_DTOCV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_DTOCV_SHIFT\fP)) & \fBSDHC_SYSCTL_DTOCV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTA_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTA_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_RSTA_SHIFT\fP)) & \fBSDHC_SYSCTL_RSTA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTC_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTC_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_RSTC_SHIFT\fP)) & \fBSDHC_SYSCTL_RSTC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTD_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTD_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_RSTD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_RSTD_SHIFT\fP)) & \fBSDHC_SYSCTL_RSTD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_INITA_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_INITA_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSDHC_SYSCTL_INITA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_SYSCTL_INITA_SHIFT\fP)) & \fBSDHC_SYSCTL_INITA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIRQSTAT - Interrupt Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CC_SHIFT\fP)) & \fBSDHC_IRQSTAT_CC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_TC_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_TC_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_TC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_TC_SHIFT\fP)) & \fBSDHC_IRQSTAT_TC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BGE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BGE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BGE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_BGE_SHIFT\fP)) & \fBSDHC_IRQSTAT_BGE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DINT_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DINT_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_DINT_SHIFT\fP)) & \fBSDHC_IRQSTAT_DINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BWR_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BWR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BWR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_BWR_SHIFT\fP)) & \fBSDHC_IRQSTAT_BWR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BRR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BRR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_BRR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_BRR_SHIFT\fP)) & \fBSDHC_IRQSTAT_BRR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CINS_SHIFT\fP)) & \fBSDHC_IRQSTAT_CINS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CRM_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CRM_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CRM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CRM_SHIFT\fP)) & \fBSDHC_IRQSTAT_CRM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINT_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINT_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CINT_SHIFT\fP)) & \fBSDHC_IRQSTAT_CINT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CTOE_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CTOE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CTOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CTOE_SHIFT\fP)) & \fBSDHC_IRQSTAT_CTOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CCE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CCE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CCE_SHIFT\fP)) & \fBSDHC_IRQSTAT_CCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CEBE_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CEBE_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CEBE_SHIFT\fP)) & \fBSDHC_IRQSTAT_CEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CIE_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CIE_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_CIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_CIE_SHIFT\fP)) & \fBSDHC_IRQSTAT_CIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DTOE_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DTOE_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DTOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_DTOE_SHIFT\fP)) & \fBSDHC_IRQSTAT_DTOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DCE_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DCE_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_DCE_SHIFT\fP)) & \fBSDHC_IRQSTAT_DCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DEBE_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DEBE_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_DEBE_SHIFT\fP)) & \fBSDHC_IRQSTAT_DEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_AC12E_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_AC12E_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_AC12E\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_AC12E_SHIFT\fP)) & \fBSDHC_IRQSTAT_AC12E_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DMAE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DMAE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTAT_DMAE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTAT_DMAE_SHIFT\fP)) & \fBSDHC_IRQSTAT_DMAE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIRQSTATEN - Interrupt Status Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCSEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCSEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CCSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CCSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_TCSEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_TCSEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_TCSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_TCSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_TCSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BGESEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BGESEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BGESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_BGESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_BGESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DINTSEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DINTSEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DINTSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_DINTSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_DINTSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BWRSEN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BWRSEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BWRSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_BWRSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_BWRSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BRRSEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BRRSEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_BRRSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_BRRSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_BRRSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINSEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINSEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CINSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CINSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CRMSEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CRMSEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CRMSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CRMSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CRMSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINTSEN_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINTSEN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CINTSEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CINTSEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CINTSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CTOESEN_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CTOESEN_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CTOESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CTOESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CTOESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCESEN_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCESEN_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CCESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CCESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CCESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CEBESEN_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CEBESEN_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CEBESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CEBESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CEBESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CIESEN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CIESEN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_CIESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_CIESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_CIESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DTOESEN_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DTOESEN_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DTOESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_DTOESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_DTOESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DCESEN_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DCESEN_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DCESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_DCESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_DCESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DEBESEN_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DEBESEN_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DEBESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_DEBESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_DEBESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_AC12ESEN_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_AC12ESEN_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_AC12ESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_AC12ESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_AC12ESEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DMAESEN_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DMAESEN_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSTATEN_DMAESEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSTATEN_DMAESEN_SHIFT\fP)) & \fBSDHC_IRQSTATEN_DMAESEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIRQSIGEN - Interrupt Signal Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCIEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCIEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CCIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CCIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_TCIEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_TCIEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_TCIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_TCIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_TCIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BGEIEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BGEIEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BGEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_BGEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_BGEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DINTIEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DINTIEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DINTIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_DINTIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_DINTIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BWRIEN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BWRIEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BWRIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_BWRIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_BWRIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BRRIEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BRRIEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_BRRIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_BRRIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_BRRIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINSIEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINSIEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINSIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CINSIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CINSIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CRMIEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CRMIEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CRMIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CRMIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CRMIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINTIEN_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINTIEN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CINTIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CINTIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CINTIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CTOEIEN_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CTOEIEN_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CTOEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CTOEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CTOEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCEIEN_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCEIEN_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CCEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CCEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CCEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CEBEIEN_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CEBEIEN_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CEBEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CEBEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CEBEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CIEIEN_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CIEIEN_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_CIEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_CIEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_CIEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DTOEIEN_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DTOEIEN_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DTOEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_DTOEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_DTOEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DCEIEN_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DCEIEN_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DCEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_DCEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_DCEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DEBEIEN_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DEBEIEN_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DEBEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_DEBEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_DEBEIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_AC12EIEN_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_AC12EIEN_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_AC12EIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_AC12EIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_AC12EIEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DMAEIEN_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DMAEIEN_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSDHC_IRQSIGEN_DMAEIEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_IRQSIGEN_DMAEIEN_SHIFT\fP)) & \fBSDHC_IRQSIGEN_DMAEIEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBAC12ERR - Auto CMD12 Error Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12NE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12NE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12NE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_AC12NE_SHIFT\fP)) & \fBSDHC_AC12ERR_AC12NE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12TOE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12TOE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12TOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_AC12TOE_SHIFT\fP)) & \fBSDHC_AC12ERR_AC12TOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12EBE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12EBE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12EBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_AC12EBE_SHIFT\fP)) & \fBSDHC_AC12ERR_AC12EBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12CE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12CE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12CE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_AC12CE_SHIFT\fP)) & \fBSDHC_AC12ERR_AC12CE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12IE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12IE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_AC12IE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_AC12IE_SHIFT\fP)) & \fBSDHC_AC12ERR_AC12IE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_CNIBAC12E_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_CNIBAC12E_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_AC12ERR_CNIBAC12E\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_AC12ERR_CNIBAC12E_SHIFT\fP)) & \fBSDHC_AC12ERR_CNIBAC12E_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBHTCAPBLT - Host Controller Capabilities\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_MBL_MASK\fP   (0x70000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_MBL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_MBL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_MBL_SHIFT\fP)) & \fBSDHC_HTCAPBLT_MBL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_ADMAS_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_ADMAS_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_ADMAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_ADMAS_SHIFT\fP)) & \fBSDHC_HTCAPBLT_ADMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_HSS_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_HSS_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_HSS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_HSS_SHIFT\fP)) & \fBSDHC_HTCAPBLT_HSS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_DMAS_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_DMAS_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_DMAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_DMAS_SHIFT\fP)) & \fBSDHC_HTCAPBLT_DMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_SRS_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_SRS_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_SRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_SRS_SHIFT\fP)) & \fBSDHC_HTCAPBLT_SRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_VS33_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_VS33_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_HTCAPBLT_VS33\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HTCAPBLT_VS33_SHIFT\fP)) & \fBSDHC_HTCAPBLT_VS33_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWML - Watermark Level Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_WML_RDWML_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_WML_RDWML_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_WML_RDWML\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_WML_RDWML_SHIFT\fP)) & \fBSDHC_WML_RDWML_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_WML_WRWML_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBSDHC_WML_WRWML_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_WML_WRWML\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_WML_WRWML_SHIFT\fP)) & \fBSDHC_WML_WRWML_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFEVT - Force Event register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12NE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12NE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12NE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12NE_SHIFT\fP)) & \fBSDHC_FEVT_AC12NE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12TOE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12TOE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12TOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12TOE_SHIFT\fP)) & \fBSDHC_FEVT_AC12TOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12CE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12CE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12CE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12CE_SHIFT\fP)) & \fBSDHC_FEVT_AC12CE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12EBE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12EBE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12EBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12EBE_SHIFT\fP)) & \fBSDHC_FEVT_AC12EBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12IE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12IE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12IE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12IE_SHIFT\fP)) & \fBSDHC_FEVT_AC12IE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CNIBAC12E_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CNIBAC12E_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CNIBAC12E\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CNIBAC12E_SHIFT\fP)) & \fBSDHC_FEVT_CNIBAC12E_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CTOE_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CTOE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CTOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CTOE_SHIFT\fP)) & \fBSDHC_FEVT_CTOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CCE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CCE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CCE_SHIFT\fP)) & \fBSDHC_FEVT_CCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CEBE_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CEBE_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CEBE_SHIFT\fP)) & \fBSDHC_FEVT_CEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CIE_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CIE_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CIE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CIE_SHIFT\fP)) & \fBSDHC_FEVT_CIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DTOE_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DTOE_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DTOE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_DTOE_SHIFT\fP)) & \fBSDHC_FEVT_DTOE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DCE_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DCE_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_DCE_SHIFT\fP)) & \fBSDHC_FEVT_DCE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DEBE_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DEBE_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DEBE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_DEBE_SHIFT\fP)) & \fBSDHC_FEVT_DEBE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12E_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12E_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_AC12E\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_AC12E_SHIFT\fP)) & \fBSDHC_FEVT_AC12E_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DMAE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DMAE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_DMAE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_DMAE_SHIFT\fP)) & \fBSDHC_FEVT_DMAE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CINT_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CINT_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSDHC_FEVT_CINT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_FEVT_CINT_SHIFT\fP)) & \fBSDHC_FEVT_CINT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADMAES - ADMA Error Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMAES_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMAES_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMAES\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_ADMAES_ADMAES_SHIFT\fP)) & \fBSDHC_ADMAES_ADMAES_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMALME_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMALME_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMALME\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_ADMAES_ADMALME_SHIFT\fP)) & \fBSDHC_ADMAES_ADMALME_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMADCE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMADCE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADMAES_ADMADCE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_ADMAES_ADMADCE_SHIFT\fP)) & \fBSDHC_ADMAES_ADMADCE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADSADDR - ADMA System Addressregister\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_ADSADDR_ADSADDR_MASK\fP   (0xFFFFFFFCU)"
.br
.ti -1c
.RI "#define \fBSDHC_ADSADDR_ADSADDR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSDHC_ADSADDR_ADSADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_ADSADDR_ADSADDR_SHIFT\fP)) & \fBSDHC_ADSADDR_ADSADDR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBVENDOR - Vendor Specific register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXTDMAEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXTDMAEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXTDMAEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_VENDOR_EXTDMAEN_SHIFT\fP)) & \fBSDHC_VENDOR_EXTDMAEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXBLKNU_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXBLKNU_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_EXBLKNU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_VENDOR_EXBLKNU_SHIFT\fP)) & \fBSDHC_VENDOR_EXBLKNU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_INTSTVAL_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_INTSTVAL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_VENDOR_INTSTVAL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_VENDOR_INTSTVAL_SHIFT\fP)) & \fBSDHC_VENDOR_INTSTVAL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMMCBOOT - MMC Boot register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_DTOCVACK_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_DTOCVACK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_DTOCVACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_DTOCVACK_SHIFT\fP)) & \fBSDHC_MMCBOOT_DTOCVACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTACK_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTACK_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_BOOTACK_SHIFT\fP)) & \fBSDHC_MMCBOOT_BOOTACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTMODE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTMODE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTMODE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_BOOTMODE_SHIFT\fP)) & \fBSDHC_MMCBOOT_BOOTMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_BOOTEN_SHIFT\fP)) & \fBSDHC_MMCBOOT_BOOTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_AUTOSABGEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_AUTOSABGEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_AUTOSABGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_AUTOSABGEN_SHIFT\fP)) & \fBSDHC_MMCBOOT_AUTOSABGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTBLKCNT_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTBLKCNT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSDHC_MMCBOOT_BOOTBLKCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_MMCBOOT_BOOTBLKCNT_SHIFT\fP)) & \fBSDHC_MMCBOOT_BOOTBLKCNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBHOSTVER - Host Controller Version\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDHC_HOSTVER_SVN_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBSDHC_HOSTVER_SVN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSDHC_HOSTVER_SVN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HOSTVER_SVN_SHIFT\fP)) & \fBSDHC_HOSTVER_SVN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSDHC_HOSTVER_VVN_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBSDHC_HOSTVER_VVN_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSDHC_HOSTVER_VVN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSDHC_HOSTVER_VVN_SHIFT\fP)) & \fBSDHC_HOSTVER_VVN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT1 - System Options Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT1_RAMSIZE_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_RAMSIZE_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_RAMSIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1_RAMSIZE_SHIFT\fP)) & \fBSIM_SOPT1_RAMSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_OSC32KSEL_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_OSC32KSEL_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_OSC32KSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1_OSC32KSEL_SHIFT\fP)) & \fBSIM_SOPT1_OSC32KSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBVSTBY_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBVSTBY_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBVSTBY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1_USBVSTBY_SHIFT\fP)) & \fBSIM_SOPT1_USBVSTBY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBSSTBY_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBSSTBY_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBSSTBY\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1_USBSSTBY_SHIFT\fP)) & \fBSIM_SOPT1_USBSSTBY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBREGEN_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBREGEN_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1_USBREGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1_USBREGEN_SHIFT\fP)) & \fBSIM_SOPT1_USBREGEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT1CFG - SOPT1 Configuration Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_URWE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_URWE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_URWE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1CFG_URWE_SHIFT\fP)) & \fBSIM_SOPT1CFG_URWE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_UVSWE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_UVSWE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_UVSWE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1CFG_UVSWE_SHIFT\fP)) & \fBSIM_SOPT1CFG_UVSWE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_USSWE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_USSWE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT1CFG_USSWE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT1CFG_USSWE_SHIFT\fP)) & \fBSIM_SOPT1CFG_USSWE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT2 - System Options Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT2_RTCCLKOUTSEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_RTCCLKOUTSEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_RTCCLKOUTSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_RTCCLKOUTSEL_SHIFT\fP)) & \fBSIM_SOPT2_RTCCLKOUTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_CLKOUTSEL_MASK\fP   (0xE0U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_CLKOUTSEL_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_CLKOUTSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_CLKOUTSEL_SHIFT\fP)) & \fBSIM_SOPT2_CLKOUTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_FBSL_MASK\fP   (0x300U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_FBSL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_FBSL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_FBSL_SHIFT\fP)) & \fBSIM_SOPT2_FBSL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PTD7PAD_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PTD7PAD_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PTD7PAD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_PTD7PAD_SHIFT\fP)) & \fBSIM_SOPT2_PTD7PAD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TRACECLKSEL_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TRACECLKSEL_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TRACECLKSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_TRACECLKSEL_SHIFT\fP)) & \fBSIM_SOPT2_TRACECLKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PLLFLLSEL_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PLLFLLSEL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_PLLFLLSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_PLLFLLSEL_SHIFT\fP)) & \fBSIM_SOPT2_PLLFLLSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_USBSRC_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_USBSRC_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_USBSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_USBSRC_SHIFT\fP)) & \fBSIM_SOPT2_USBSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_RMIISRC_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_RMIISRC_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_RMIISRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_RMIISRC_SHIFT\fP)) & \fBSIM_SOPT2_RMIISRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TIMESRC_MASK\fP   (0x300000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TIMESRC_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_TIMESRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_TIMESRC_SHIFT\fP)) & \fBSIM_SOPT2_TIMESRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_SDHCSRC_MASK\fP   (0x30000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_SDHCSRC_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT2_SDHCSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT2_SDHCSRC_SHIFT\fP)) & \fBSIM_SOPT2_SDHCSRC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT4 - System Options Register 4\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT0_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT0_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0FLT0_SHIFT\fP)) & \fBSIM_SOPT4_FTM0FLT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT1_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT1_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0FLT1_SHIFT\fP)) & \fBSIM_SOPT4_FTM0FLT1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT2_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT2_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0FLT2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0FLT2_SHIFT\fP)) & \fBSIM_SOPT4_FTM0FLT2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1FLT0_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1FLT0_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1FLT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM1FLT0_SHIFT\fP)) & \fBSIM_SOPT4_FTM1FLT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2FLT0_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2FLT0_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2FLT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM2FLT0_SHIFT\fP)) & \fBSIM_SOPT4_FTM2FLT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3FLT0_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3FLT0_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3FLT0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM3FLT0_SHIFT\fP)) & \fBSIM_SOPT4_FTM3FLT0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CH0SRC_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CH0SRC_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CH0SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM1CH0SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM1CH0SRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CH0SRC_MASK\fP   (0x300000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CH0SRC_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CH0SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM2CH0SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM2CH0SRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0CLKSEL_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0CLKSEL_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0CLKSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0CLKSEL_SHIFT\fP)) & \fBSIM_SOPT4_FTM0CLKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CLKSEL_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CLKSEL_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM1CLKSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM1CLKSEL_SHIFT\fP)) & \fBSIM_SOPT4_FTM1CLKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CLKSEL_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CLKSEL_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM2CLKSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM2CLKSEL_SHIFT\fP)) & \fBSIM_SOPT4_FTM2CLKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3CLKSEL_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3CLKSEL_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3CLKSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM3CLKSEL_SHIFT\fP)) & \fBSIM_SOPT4_FTM3CLKSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG0SRC_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG0SRC_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG0SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0TRG0SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM0TRG0SRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG1SRC_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG1SRC_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM0TRG1SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM0TRG1SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM0TRG1SRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG0SRC_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG0SRC_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG0SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM3TRG0SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM3TRG0SRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG1SRC_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG1SRC_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT4_FTM3TRG1SRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT4_FTM3TRG1SRC_SHIFT\fP)) & \fBSIM_SOPT4_FTM3TRG1SRC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT5 - System Options Register 5\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0TXSRC_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0TXSRC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0TXSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT5_UART0TXSRC_SHIFT\fP)) & \fBSIM_SOPT5_UART0TXSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0RXSRC_MASK\fP   (0xCU)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0RXSRC_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART0RXSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT5_UART0RXSRC_SHIFT\fP)) & \fBSIM_SOPT5_UART0RXSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1TXSRC_MASK\fP   (0x30U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1TXSRC_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1TXSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT5_UART1TXSRC_SHIFT\fP)) & \fBSIM_SOPT5_UART1TXSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1RXSRC_MASK\fP   (0xC0U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1RXSRC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT5_UART1RXSRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT5_UART1RXSRC_SHIFT\fP)) & \fBSIM_SOPT5_UART1RXSRC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOPT7 - System Options Register 7\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0TRGSEL_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0TRGSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0TRGSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC0TRGSEL_SHIFT\fP)) & \fBSIM_SOPT7_ADC0TRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0PRETRGSEL_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0PRETRGSEL_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0PRETRGSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC0PRETRGSEL_SHIFT\fP)) & \fBSIM_SOPT7_ADC0PRETRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0ALTTRGEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0ALTTRGEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC0ALTTRGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC0ALTTRGEN_SHIFT\fP)) & \fBSIM_SOPT7_ADC0ALTTRGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1TRGSEL_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1TRGSEL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1TRGSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC1TRGSEL_SHIFT\fP)) & \fBSIM_SOPT7_ADC1TRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1PRETRGSEL_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1PRETRGSEL_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1PRETRGSEL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC1PRETRGSEL_SHIFT\fP)) & \fBSIM_SOPT7_ADC1PRETRGSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1ALTTRGEN_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1ALTTRGEN_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSIM_SOPT7_ADC1ALTTRGEN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SOPT7_ADC1ALTTRGEN_SHIFT\fP)) & \fBSIM_SOPT7_ADC1ALTTRGEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSDID - System Device Identification Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SDID_PINID_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_PINID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_PINID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_PINID_SHIFT\fP)) & \fBSIM_SDID_PINID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMID_MASK\fP   (0x70U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMID_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_FAMID_SHIFT\fP)) & \fBSIM_SDID_FAMID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_DIEID_MASK\fP   (0xF80U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_DIEID_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_DIEID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_DIEID_SHIFT\fP)) & \fBSIM_SDID_DIEID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_REVID_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_REVID_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_REVID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_REVID_SHIFT\fP)) & \fBSIM_SDID_REVID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SERIESID_MASK\fP   (0xF00000U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SERIESID_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SERIESID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_SERIESID_SHIFT\fP)) & \fBSIM_SDID_SERIESID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SUBFAMID_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SUBFAMID_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_SUBFAMID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_SUBFAMID_SHIFT\fP)) & \fBSIM_SDID_SUBFAMID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMILYID_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMILYID_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSIM_SDID_FAMILYID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SDID_FAMILYID_SHIFT\fP)) & \fBSIM_SDID_FAMILYID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC1 - System Clock Gating Control Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC1_I2C2_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_I2C2_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_I2C2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC1_I2C2_SHIFT\fP)) & \fBSIM_SCGC1_I2C2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART4_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART4_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC1_UART4_SHIFT\fP)) & \fBSIM_SCGC1_UART4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART5_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART5_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC1_UART5\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC1_UART5_SHIFT\fP)) & \fBSIM_SCGC1_UART5_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC2 - System Clock Gating Control Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC2_ENET_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_ENET_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_ENET\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC2_ENET_SHIFT\fP)) & \fBSIM_SCGC2_ENET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC0_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC0_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC2_DAC0_SHIFT\fP)) & \fBSIM_SCGC2_DAC0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC1_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC1_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC2_DAC1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC2_DAC1_SHIFT\fP)) & \fBSIM_SCGC2_DAC1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC3 - System Clock Gating Control Register 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC3_RNGA_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_RNGA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_RNGA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_RNGA_SHIFT\fP)) & \fBSIM_SCGC3_RNGA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SPI2_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SPI2_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SPI2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_SPI2_SHIFT\fP)) & \fBSIM_SCGC3_SPI2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SDHC_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SDHC_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_SDHC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_SDHC_SHIFT\fP)) & \fBSIM_SCGC3_SDHC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM2_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM2_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_FTM2_SHIFT\fP)) & \fBSIM_SCGC3_FTM2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM3_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM3_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_FTM3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_FTM3_SHIFT\fP)) & \fBSIM_SCGC3_FTM3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_ADC1_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_ADC1_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC3_ADC1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC3_ADC1_SHIFT\fP)) & \fBSIM_SCGC3_ADC1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC4 - System Clock Gating Control Register 4\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC4_EWM_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_EWM_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_EWM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_EWM_SHIFT\fP)) & \fBSIM_SCGC4_EWM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_CMT_SHIFT\fP)) & \fBSIM_SCGC4_CMT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C0_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C0_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_I2C0_SHIFT\fP)) & \fBSIM_SCGC4_I2C0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C1_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C1_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_I2C1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_I2C1_SHIFT\fP)) & \fBSIM_SCGC4_I2C1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART0_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART0_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_UART0_SHIFT\fP)) & \fBSIM_SCGC4_UART0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART1_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART1_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_UART1_SHIFT\fP)) & \fBSIM_SCGC4_UART1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART2_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART2_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_UART2_SHIFT\fP)) & \fBSIM_SCGC4_UART2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART3_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART3_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_UART3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_UART3_SHIFT\fP)) & \fBSIM_SCGC4_UART3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_USBOTG_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_USBOTG_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_USBOTG\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_USBOTG_SHIFT\fP)) & \fBSIM_SCGC4_USBOTG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMP_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMP_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_CMP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_CMP_SHIFT\fP)) & \fBSIM_SCGC4_CMP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_VREF_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_VREF_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC4_VREF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC4_VREF_SHIFT\fP)) & \fBSIM_SCGC4_VREF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC5 - System Clock Gating Control Register 5\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC5_LPTMR_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_LPTMR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_LPTMR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_LPTMR_SHIFT\fP)) & \fBSIM_SCGC5_LPTMR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTA_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTA_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_PORTA_SHIFT\fP)) & \fBSIM_SCGC5_PORTA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTB_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTB_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_PORTB_SHIFT\fP)) & \fBSIM_SCGC5_PORTB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTC_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTC_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_PORTC_SHIFT\fP)) & \fBSIM_SCGC5_PORTC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTD_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTD_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_PORTD_SHIFT\fP)) & \fBSIM_SCGC5_PORTD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTE_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTE_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC5_PORTE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC5_PORTE_SHIFT\fP)) & \fBSIM_SCGC5_PORTE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC6 - System Clock Gating Control Register 6\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC6_FTF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_FTF_SHIFT\fP)) & \fBSIM_SCGC6_FTF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DMAMUX_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DMAMUX_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DMAMUX\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_DMAMUX_SHIFT\fP)) & \fBSIM_SCGC6_DMAMUX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FLEXCAN0_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FLEXCAN0_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FLEXCAN0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_FLEXCAN0_SHIFT\fP)) & \fBSIM_SCGC6_FLEXCAN0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RNGA_MASK\fP   (0x200U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RNGA_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RNGA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_RNGA_SHIFT\fP)) & \fBSIM_SCGC6_RNGA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI0_MASK\fP   (0x1000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI0_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_SPI0_SHIFT\fP)) & \fBSIM_SCGC6_SPI0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI1_MASK\fP   (0x2000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI1_SHIFT\fP   (13U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_SPI1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_SPI1_SHIFT\fP)) & \fBSIM_SCGC6_SPI1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_I2S_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_I2S_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_I2S\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_I2S_SHIFT\fP)) & \fBSIM_SCGC6_I2S_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_CRC_MASK\fP   (0x40000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_CRC_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_CRC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_CRC_SHIFT\fP)) & \fBSIM_SCGC6_CRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_USBDCD_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_USBDCD_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_USBDCD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_USBDCD_SHIFT\fP)) & \fBSIM_SCGC6_USBDCD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PDB_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PDB_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PDB\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_PDB_SHIFT\fP)) & \fBSIM_SCGC6_PDB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PIT_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PIT_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_PIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_PIT_SHIFT\fP)) & \fBSIM_SCGC6_PIT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM0_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM0_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_FTM0_SHIFT\fP)) & \fBSIM_SCGC6_FTM0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM1_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM1_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_FTM1_SHIFT\fP)) & \fBSIM_SCGC6_FTM1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM2_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM2_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_FTM2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_FTM2_SHIFT\fP)) & \fBSIM_SCGC6_FTM2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_ADC0_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_ADC0_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_ADC0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_ADC0_SHIFT\fP)) & \fBSIM_SCGC6_ADC0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RTC_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RTC_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_RTC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_RTC_SHIFT\fP)) & \fBSIM_SCGC6_RTC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DAC0_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DAC0_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC6_DAC0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC6_DAC0_SHIFT\fP)) & \fBSIM_SCGC6_DAC0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSCGC7 - System Clock Gating Control Register 7\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_SCGC7_FLEXBUS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_FLEXBUS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_FLEXBUS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC7_FLEXBUS_SHIFT\fP)) & \fBSIM_SCGC7_FLEXBUS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_DMA_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_DMA_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_DMA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC7_DMA_SHIFT\fP)) & \fBSIM_SCGC7_DMA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_MPU_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_MPU_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBSIM_SCGC7_MPU\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_SCGC7_MPU_SHIFT\fP)) & \fBSIM_SCGC7_MPU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLKDIV1 - System Clock Divider Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV4_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV4_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV4\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV1_OUTDIV4_SHIFT\fP)) & \fBSIM_CLKDIV1_OUTDIV4_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV3_MASK\fP   (0xF00000U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV3_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV3\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV1_OUTDIV3_SHIFT\fP)) & \fBSIM_CLKDIV1_OUTDIV3_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV2_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV2_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV2\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV1_OUTDIV2_SHIFT\fP)) & \fBSIM_CLKDIV1_OUTDIV2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV1_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV1_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV1_OUTDIV1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV1_OUTDIV1_SHIFT\fP)) & \fBSIM_CLKDIV1_OUTDIV1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLKDIV2 - System Clock Divider Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBFRAC_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBFRAC_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBFRAC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV2_USBFRAC_SHIFT\fP)) & \fBSIM_CLKDIV2_USBFRAC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBDIV_MASK\fP   (0xEU)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBDIV_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_CLKDIV2_USBDIV\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_CLKDIV2_USBDIV_SHIFT\fP)) & \fBSIM_CLKDIV2_USBDIV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCFG1 - Flash Configuration Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDIS_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDIS_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDIS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_FLASHDIS_SHIFT\fP)) & \fBSIM_FCFG1_FLASHDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDOZE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDOZE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_FLASHDOZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_FLASHDOZE_SHIFT\fP)) & \fBSIM_FCFG1_FLASHDOZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_DEPART_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_DEPART_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_DEPART\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_DEPART_SHIFT\fP)) & \fBSIM_FCFG1_DEPART_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_EESIZE_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_EESIZE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_EESIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_EESIZE_SHIFT\fP)) & \fBSIM_FCFG1_EESIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_PFSIZE_MASK\fP   (0xF000000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_PFSIZE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_PFSIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_PFSIZE_SHIFT\fP)) & \fBSIM_FCFG1_PFSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_NVMSIZE_MASK\fP   (0xF0000000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_NVMSIZE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG1_NVMSIZE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG1_NVMSIZE_SHIFT\fP)) & \fBSIM_FCFG1_NVMSIZE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFCFG2 - Flash Configuration Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR1_MASK\fP   (0x7F0000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR1_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR1\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG2_MAXADDR1_SHIFT\fP)) & \fBSIM_FCFG2_MAXADDR1_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_PFLSH_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_PFLSH_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_PFLSH\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG2_PFLSH_SHIFT\fP)) & \fBSIM_FCFG2_PFLSH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR0_MASK\fP   (0x7F000000U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR0_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSIM_FCFG2_MAXADDR0\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_FCFG2_MAXADDR0_SHIFT\fP)) & \fBSIM_FCFG2_MAXADDR0_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUIDH - Unique Identification Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_UIDH_UID_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSIM_UIDH_UID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_UIDH_UID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_UIDH_UID_SHIFT\fP)) & \fBSIM_UIDH_UID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUIDMH - Unique Identification Register Mid-High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_UIDMH_UID_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSIM_UIDMH_UID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_UIDMH_UID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_UIDMH_UID_SHIFT\fP)) & \fBSIM_UIDMH_UID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUIDML - Unique Identification Register Mid Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_UIDML_UID_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSIM_UIDML_UID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_UIDML_UID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_UIDML_UID_SHIFT\fP)) & \fBSIM_UIDML_UID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUIDL - Unique Identification Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSIM_UIDL_UID_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSIM_UIDL_UID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSIM_UIDL_UID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSIM_UIDL_UID_SHIFT\fP)) & \fBSIM_UIDL_UID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPMPROT - Power Mode Protection register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLLS_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLLS_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLLS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMPROT_AVLLS_SHIFT\fP)) & \fBSMC_PMPROT_AVLLS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_ALLS_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_ALLS_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_ALLS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMPROT_ALLS_SHIFT\fP)) & \fBSMC_PMPROT_ALLS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLP_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLP_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSMC_PMPROT_AVLP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMPROT_AVLP_SHIFT\fP)) & \fBSMC_PMPROT_AVLP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPMCTRL - Power Mode Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPM_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMCTRL_STOPM_SHIFT\fP)) & \fBSMC_PMCTRL_STOPM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPA_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPA_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_STOPA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMCTRL_STOPA_SHIFT\fP)) & \fBSMC_PMCTRL_STOPA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_RUNM_MASK\fP   (0x60U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_RUNM_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_RUNM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMCTRL_RUNM_SHIFT\fP)) & \fBSMC_PMCTRL_RUNM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_LPWUI_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_LPWUI_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBSMC_PMCTRL_LPWUI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMCTRL_LPWUI_SHIFT\fP)) & \fBSMC_PMCTRL_LPWUI_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBVLLSCTRL - VLLS Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_VLLSM_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_VLLSM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_VLLSM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_VLLSCTRL_VLLSM_SHIFT\fP)) & \fBSMC_VLLSCTRL_VLLSM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_PORPO_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_PORPO_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSMC_VLLSCTRL_PORPO\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_VLLSCTRL_PORPO_SHIFT\fP)) & \fBSMC_VLLSCTRL_PORPO_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPMSTAT - Power Mode Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSMC_PMSTAT_PMSTAT_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBSMC_PMSTAT_PMSTAT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSMC_PMSTAT_PMSTAT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBSMC_PMSTAT_PMSTAT_SHIFT\fP)) & \fBSMC_PMSTAT_PMSTAT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCR - Transfer Count Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_TCR_SPI_TCNT_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSPI_TCR_SPI_TCNT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_TCR_SPI_TCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TCR_SPI_TCNT_SHIFT\fP)) & \fBSPI_TCR_SPI_TCNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTAR - Clock and Transfer Attributes Register (In Master Mode)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_CTAR_BR_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_BR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_BR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_BR_SHIFT\fP)) & \fBSPI_CTAR_BR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DT_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DT_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_DT_SHIFT\fP)) & \fBSPI_CTAR_DT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_ASC_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_ASC_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_ASC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_ASC_SHIFT\fP)) & \fBSPI_CTAR_ASC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CSSCK_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CSSCK_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CSSCK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_CSSCK_SHIFT\fP)) & \fBSPI_CTAR_CSSCK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PBR_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PBR_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PBR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_PBR_SHIFT\fP)) & \fBSPI_CTAR_PBR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PDT_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PDT_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PDT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_PDT_SHIFT\fP)) & \fBSPI_CTAR_PDT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PASC_MASK\fP   (0x300000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PASC_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PASC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_PASC_SHIFT\fP)) & \fBSPI_CTAR_PASC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PCSSCK_MASK\fP   (0xC00000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PCSSCK_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_PCSSCK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_PCSSCK_SHIFT\fP)) & \fBSPI_CTAR_PCSSCK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_LSBFE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_LSBFE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_LSBFE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_LSBFE_SHIFT\fP)) & \fBSPI_CTAR_LSBFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPHA_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPHA_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPHA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_CPHA_SHIFT\fP)) & \fBSPI_CTAR_CPHA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPOL_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPOL_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_CPOL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_CPOL_SHIFT\fP)) & \fBSPI_CTAR_CPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_FMSZ_MASK\fP   (0x78000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_FMSZ_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_FMSZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_FMSZ_SHIFT\fP)) & \fBSPI_CTAR_FMSZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DBR_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DBR_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_DBR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_DBR_SHIFT\fP)) & \fBSPI_CTAR_DBR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_COUNT\fP   (2U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTAR_SLAVE - Clock and Transfer Attributes Register (In Slave Mode)\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPHA_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPHA_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPHA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_SLAVE_CPHA_SHIFT\fP)) & \fBSPI_CTAR_SLAVE_CPHA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPOL_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPOL_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_CPOL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_SLAVE_CPOL_SHIFT\fP)) & \fBSPI_CTAR_SLAVE_CPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_FMSZ_MASK\fP   (0xF8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_FMSZ_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_FMSZ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_CTAR_SLAVE_FMSZ_SHIFT\fP)) & \fBSPI_CTAR_SLAVE_FMSZ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_CTAR_SLAVE_COUNT\fP   (1U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSR - Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_SR_POPNXTPTR_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBSPI_SR_POPNXTPTR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_POPNXTPTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_POPNXTPTR_SHIFT\fP)) & \fBSPI_SR_POPNXTPTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RXCTR_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RXCTR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RXCTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_RXCTR_SHIFT\fP)) & \fBSPI_SR_RXCTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXNXTPTR_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXNXTPTR_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXNXTPTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TXNXTPTR_SHIFT\fP)) & \fBSPI_SR_TXNXTPTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXCTR_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXCTR_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXCTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TXCTR_SHIFT\fP)) & \fBSPI_SR_TXCTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFDF_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFDF_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFDF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_RFDF_SHIFT\fP)) & \fBSPI_SR_RFDF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFOF_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFOF_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_RFOF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_RFOF_SHIFT\fP)) & \fBSPI_SR_RFOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFFF_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFFF_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFFF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TFFF_SHIFT\fP)) & \fBSPI_SR_TFFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFUF_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFUF_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TFUF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TFUF_SHIFT\fP)) & \fBSPI_SR_TFUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_EOQF_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_EOQF_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_EOQF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_EOQF_SHIFT\fP)) & \fBSPI_SR_EOQF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXRXS_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXRXS_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TXRXS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TXRXS_SHIFT\fP)) & \fBSPI_SR_TXRXS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TCF_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TCF_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_SR_TCF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_SR_TCF_SHIFT\fP)) & \fBSPI_SR_TCF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRSER - DMA/Interrupt Request Select and Enable Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_DIRS_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_DIRS_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_DIRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_RFDF_DIRS_SHIFT\fP)) & \fBSPI_RSER_RFDF_DIRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_RE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_RE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFDF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_RFDF_RE_SHIFT\fP)) & \fBSPI_RSER_RFDF_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFOF_RE_MASK\fP   (0x80000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFOF_RE_SHIFT\fP   (19U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_RFOF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_RFOF_RE_SHIFT\fP)) & \fBSPI_RSER_RFOF_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_DIRS_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_DIRS_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_DIRS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_TFFF_DIRS_SHIFT\fP)) & \fBSPI_RSER_TFFF_DIRS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_RE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_RE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFFF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_TFFF_RE_SHIFT\fP)) & \fBSPI_RSER_TFFF_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFUF_RE_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFUF_RE_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TFUF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_TFUF_RE_SHIFT\fP)) & \fBSPI_RSER_TFUF_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_EOQF_RE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_EOQF_RE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_EOQF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_EOQF_RE_SHIFT\fP)) & \fBSPI_RSER_EOQF_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TCF_RE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TCF_RE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_RSER_TCF_RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RSER_TCF_RE_SHIFT\fP)) & \fBSPI_RSER_TCF_RE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPUSHR - PUSH TX FIFO Register In Master Mode\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_PUSHR_TXDATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_TXDATA_SHIFT\fP)) & \fBSPI_PUSHR_TXDATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_PCS_MASK\fP   (0x3F0000U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_PCS_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_PCS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_PCS_SHIFT\fP)) & \fBSPI_PUSHR_PCS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTCNT_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTCNT_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTCNT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_CTCNT_SHIFT\fP)) & \fBSPI_PUSHR_CTCNT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_EOQ_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_EOQ_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_EOQ\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_EOQ_SHIFT\fP)) & \fBSPI_PUSHR_EOQ_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTAS_MASK\fP   (0x70000000U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTAS_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CTAS\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_CTAS_SHIFT\fP)) & \fBSPI_PUSHR_CTAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CONT_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CONT_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_CONT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_CONT_SHIFT\fP)) & \fBSPI_PUSHR_CONT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPUSHR_SLAVE - PUSH TX FIFO Register In Slave Mode\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_PUSHR_SLAVE_TXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_SLAVE_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_PUSHR_SLAVE_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_PUSHR_SLAVE_TXDATA_SHIFT\fP)) & \fBSPI_PUSHR_SLAVE_TXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPOPR - POP RX FIFO Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_POPR_RXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_POPR_RXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_POPR_RXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_POPR_RXDATA_SHIFT\fP)) & \fBSPI_POPR_RXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTXFR0 - Transmit FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_TXFR0_TXDATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR0_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR0_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR0_TXDATA_SHIFT\fP)) & \fBSPI_TXFR0_TXDATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR0_TXCMD_TXDATA_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR0_TXCMD_TXDATA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR0_TXCMD_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR0_TXCMD_TXDATA_SHIFT\fP)) & \fBSPI_TXFR0_TXCMD_TXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTXFR1 - Transmit FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_TXFR1_TXDATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR1_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR1_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR1_TXDATA_SHIFT\fP)) & \fBSPI_TXFR1_TXDATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR1_TXCMD_TXDATA_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR1_TXCMD_TXDATA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR1_TXCMD_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR1_TXCMD_TXDATA_SHIFT\fP)) & \fBSPI_TXFR1_TXCMD_TXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTXFR2 - Transmit FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_TXFR2_TXDATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR2_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR2_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR2_TXDATA_SHIFT\fP)) & \fBSPI_TXFR2_TXDATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR2_TXCMD_TXDATA_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR2_TXCMD_TXDATA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR2_TXCMD_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR2_TXCMD_TXDATA_SHIFT\fP)) & \fBSPI_TXFR2_TXCMD_TXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTXFR3 - Transmit FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_TXFR3_TXDATA_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR3_TXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR3_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR3_TXDATA_SHIFT\fP)) & \fBSPI_TXFR3_TXDATA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR3_TXCMD_TXDATA_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR3_TXCMD_TXDATA_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSPI_TXFR3_TXCMD_TXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_TXFR3_TXCMD_TXDATA_SHIFT\fP)) & \fBSPI_TXFR3_TXCMD_TXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFR0 - Receive FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_RXFR0_RXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR0_RXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR0_RXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RXFR0_RXDATA_SHIFT\fP)) & \fBSPI_RXFR0_RXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFR1 - Receive FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_RXFR1_RXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR1_RXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR1_RXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RXFR1_RXDATA_SHIFT\fP)) & \fBSPI_RXFR1_RXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFR2 - Receive FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_RXFR2_RXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR2_RXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR2_RXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RXFR2_RXDATA_SHIFT\fP)) & \fBSPI_RXFR2_RXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRXFR3 - Receive FIFO Registers\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSPI_RXFR3_RXDATA_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR3_RXDATA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSPI_RXFR3_RXDATA\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSPI_RXFR3_RXDATA_SHIFT\fP)) & \fBSPI_RXFR3_RXDATA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCESR - Control/Error Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSYSMPU_CESR_VLD_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_VLD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_VLD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_CESR_VLD_SHIFT\fP)) & \fBSYSMPU_CESR_VLD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NRGD_MASK\fP   (0xF00U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NRGD_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NRGD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_CESR_NRGD_SHIFT\fP)) & \fBSYSMPU_CESR_NRGD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NSP_MASK\fP   (0xF000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NSP_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_NSP\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_CESR_NSP_SHIFT\fP)) & \fBSYSMPU_CESR_NSP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_HRL_MASK\fP   (0xF0000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_HRL_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_HRL\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_CESR_HRL_SHIFT\fP)) & \fBSYSMPU_CESR_HRL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_SPERR_MASK\fP   (0xF8000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_SPERR_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_CESR_SPERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_CESR_SPERR_SHIFT\fP)) & \fBSYSMPU_CESR_SPERR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEAR - Error Address Register, slave port n\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSYSMPU_EAR_EADDR_MASK\fP   (0xFFFFFFFFU)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EAR_EADDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EAR_EADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EAR_EADDR_SHIFT\fP)) & \fBSYSMPU_EAR_EADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EAR_COUNT\fP   (5U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBEDR - Error Detail Register, slave port n\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSYSMPU_EDR_ERW_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_ERW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_ERW\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EDR_ERW_SHIFT\fP)) & \fBSYSMPU_EDR_ERW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EATTR_MASK\fP   (0xEU)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EATTR_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EATTR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EDR_EATTR_SHIFT\fP)) & \fBSYSMPU_EDR_EATTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EMN_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EMN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EMN\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EDR_EMN_SHIFT\fP)) & \fBSYSMPU_EDR_EMN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EPID_MASK\fP   (0xFF00U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EPID_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EPID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EDR_EPID_SHIFT\fP)) & \fBSYSMPU_EDR_EPID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EACD_MASK\fP   (0xFFFF0000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EACD_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_EACD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_EDR_EACD_SHIFT\fP)) & \fBSYSMPU_EDR_EACD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_EDR_COUNT\fP   (5U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWORD - Region Descriptor n, Word 0\&.\&.Region Descriptor n, Word 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSYSMPU_WORD_VLD_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_VLD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_VLD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_VLD_SHIFT\fP)) & \fBSYSMPU_WORD_VLD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0UM_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0UM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M0UM_SHIFT\fP)) & \fBSYSMPU_WORD_M0UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0SM_MASK\fP   (0x18U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0SM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M0SM_SHIFT\fP)) & \fBSYSMPU_WORD_M0SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0PE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0PE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M0PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M0PE_SHIFT\fP)) & \fBSYSMPU_WORD_M0PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_ENDADDR_MASK\fP   (0xFFFFFFE0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_ENDADDR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_ENDADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_ENDADDR_SHIFT\fP)) & \fBSYSMPU_WORD_ENDADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_SRTADDR_MASK\fP   (0xFFFFFFE0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_SRTADDR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_SRTADDR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_SRTADDR_SHIFT\fP)) & \fBSYSMPU_WORD_SRTADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1UM_MASK\fP   (0x1C0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1UM_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M1UM_SHIFT\fP)) & \fBSYSMPU_WORD_M1UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1SM_MASK\fP   (0x600U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1SM_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M1SM_SHIFT\fP)) & \fBSYSMPU_WORD_M1SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1PE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1PE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M1PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M1PE_SHIFT\fP)) & \fBSYSMPU_WORD_M1PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2UM_MASK\fP   (0x7000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2UM_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M2UM_SHIFT\fP)) & \fBSYSMPU_WORD_M2UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2SM_MASK\fP   (0x18000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2SM_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M2SM_SHIFT\fP)) & \fBSYSMPU_WORD_M2SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PIDMASK_MASK\fP   (0xFF0000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PIDMASK_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PIDMASK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_PIDMASK_SHIFT\fP)) & \fBSYSMPU_WORD_PIDMASK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2PE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2PE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M2PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M2PE_SHIFT\fP)) & \fBSYSMPU_WORD_M2PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3UM_MASK\fP   (0x1C0000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3UM_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M3UM_SHIFT\fP)) & \fBSYSMPU_WORD_M3UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3SM_MASK\fP   (0x600000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3SM_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M3SM_SHIFT\fP)) & \fBSYSMPU_WORD_M3SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3PE_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3PE_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M3PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M3PE_SHIFT\fP)) & \fBSYSMPU_WORD_M3PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PID_MASK\fP   (0xFF000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PID_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_PID\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_PID_SHIFT\fP)) & \fBSYSMPU_WORD_PID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4WE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4WE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M4WE_SHIFT\fP)) & \fBSYSMPU_WORD_M4WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4RE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4RE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M4RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M4RE_SHIFT\fP)) & \fBSYSMPU_WORD_M4RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5WE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5WE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M5WE_SHIFT\fP)) & \fBSYSMPU_WORD_M5WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5RE_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5RE_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M5RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M5RE_SHIFT\fP)) & \fBSYSMPU_WORD_M5RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6WE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6WE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M6WE_SHIFT\fP)) & \fBSYSMPU_WORD_M6WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6RE_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6RE_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M6RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M6RE_SHIFT\fP)) & \fBSYSMPU_WORD_M6RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7WE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7WE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M7WE_SHIFT\fP)) & \fBSYSMPU_WORD_M7WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7RE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7RE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_M7RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_WORD_M7RE_SHIFT\fP)) & \fBSYSMPU_WORD_M7RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_COUNT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_WORD_COUNT2\fP   (4U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRGDAAC - Region Descriptor Alternate Access Control n\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0UM_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0UM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M0UM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M0UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0SM_MASK\fP   (0x18U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0SM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M0SM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M0SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0PE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0PE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M0PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M0PE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M0PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1UM_MASK\fP   (0x1C0U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1UM_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M1UM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M1UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1SM_MASK\fP   (0x600U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1SM_SHIFT\fP   (9U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M1SM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M1SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1PE_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1PE_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M1PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M1PE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M1PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2UM_MASK\fP   (0x7000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2UM_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M2UM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M2UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2SM_MASK\fP   (0x18000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2SM_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M2SM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M2SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2PE_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2PE_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M2PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M2PE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M2PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3UM_MASK\fP   (0x1C0000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3UM_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3UM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M3UM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M3UM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3SM_MASK\fP   (0x600000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3SM_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3SM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M3SM_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M3SM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3PE_MASK\fP   (0x800000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3PE_SHIFT\fP   (23U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M3PE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M3PE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M3PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4WE_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4WE_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M4WE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M4WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4RE_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4RE_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M4RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M4RE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M4RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5WE_MASK\fP   (0x4000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5WE_SHIFT\fP   (26U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M5WE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M5WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5RE_MASK\fP   (0x8000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5RE_SHIFT\fP   (27U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M5RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M5RE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M5RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6WE_MASK\fP   (0x10000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6WE_SHIFT\fP   (28U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M6WE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M6WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6RE_MASK\fP   (0x20000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6RE_SHIFT\fP   (29U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M6RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M6RE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M6RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7WE_MASK\fP   (0x40000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7WE_SHIFT\fP   (30U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7WE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M7WE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M7WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7RE_MASK\fP   (0x80000000U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7RE_SHIFT\fP   (31U)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_M7RE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBSYSMPU_RGDAAC_M7RE_SHIFT\fP)) & \fBSYSMPU_RGDAAC_M7RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBSYSMPU_RGDAAC_COUNT\fP   (12U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBDH - UART Baud Rate Registers: High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_BDH_SBR_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBUART_BDH_SBR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_SBR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_BDH_SBR_SHIFT\fP)) & \fBUART_BDH_SBR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_BDH_SBNS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_SBNS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_SBNS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_BDH_SBNS_SHIFT\fP)) & \fBUART_BDH_SBNS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_BDH_RXEDGIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_RXEDGIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_RXEDGIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_BDH_RXEDGIE_SHIFT\fP)) & \fBUART_BDH_RXEDGIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_BDH_LBKDIE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_LBKDIE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_BDH_LBKDIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_BDH_LBKDIE_SHIFT\fP)) & \fBUART_BDH_LBKDIE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBDL - UART Baud Rate Registers: Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_BDL_SBR_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_BDL_SBR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_BDL_SBR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_BDL_SBR_SHIFT\fP)) & \fBUART_BDL_SBR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC1 - UART Control Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C1_PT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_C1_PT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_C1_PT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_PT_SHIFT\fP)) & \fBUART_C1_PT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_PE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_C1_PE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_C1_PE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_PE_SHIFT\fP)) & \fBUART_C1_PE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_ILT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_C1_ILT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_C1_ILT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_ILT_SHIFT\fP)) & \fBUART_C1_ILT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_WAKE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_C1_WAKE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_C1_WAKE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_WAKE_SHIFT\fP)) & \fBUART_C1_WAKE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_M_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_C1_M_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_C1_M\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_M_SHIFT\fP)) & \fBUART_C1_M_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_RSRC_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_C1_RSRC_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_C1_RSRC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_RSRC_SHIFT\fP)) & \fBUART_C1_RSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_UARTSWAI_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_C1_UARTSWAI_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_C1_UARTSWAI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_UARTSWAI_SHIFT\fP)) & \fBUART_C1_UARTSWAI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C1_LOOPS_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_C1_LOOPS_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_C1_LOOPS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C1_LOOPS_SHIFT\fP)) & \fBUART_C1_LOOPS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC2 - UART Control Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C2_SBK_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_C2_SBK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_C2_SBK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_SBK_SHIFT\fP)) & \fBUART_C2_SBK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_RWU_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RWU_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RWU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_RWU_SHIFT\fP)) & \fBUART_C2_RWU_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_RE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_RE_SHIFT\fP)) & \fBUART_C2_RE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_TE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_TE_SHIFT\fP)) & \fBUART_C2_TE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_ILIE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_C2_ILIE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_C2_ILIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_ILIE_SHIFT\fP)) & \fBUART_C2_ILIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_RIE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RIE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_C2_RIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_RIE_SHIFT\fP)) & \fBUART_C2_RIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_TCIE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TCIE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TCIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_TCIE_SHIFT\fP)) & \fBUART_C2_TCIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C2_TIE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TIE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_C2_TIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C2_TIE_SHIFT\fP)) & \fBUART_C2_TIE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBS1 - UART Status Register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_S1_PF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_S1_PF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_S1_PF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_PF_SHIFT\fP)) & \fBUART_S1_PF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_FE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_S1_FE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_S1_FE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_FE_SHIFT\fP)) & \fBUART_S1_FE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_NF_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_S1_NF_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_S1_NF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_NF_SHIFT\fP)) & \fBUART_S1_NF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_OR_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_S1_OR_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_S1_OR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_OR_SHIFT\fP)) & \fBUART_S1_OR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_IDLE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_S1_IDLE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_S1_IDLE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_IDLE_SHIFT\fP)) & \fBUART_S1_IDLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_RDRF_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_S1_RDRF_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_S1_RDRF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_RDRF_SHIFT\fP)) & \fBUART_S1_RDRF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_TC_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_S1_TC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_S1_TC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_TC_SHIFT\fP)) & \fBUART_S1_TC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S1_TDRE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_S1_TDRE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_S1_TDRE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S1_TDRE_SHIFT\fP)) & \fBUART_S1_TDRE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBS2 - UART Status Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_S2_RAF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RAF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RAF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_RAF_SHIFT\fP)) & \fBUART_S2_RAF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_LBKDE_SHIFT\fP)) & \fBUART_S2_LBKDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_BRK13_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_S2_BRK13_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_S2_BRK13\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_BRK13_SHIFT\fP)) & \fBUART_S2_BRK13_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_RWUID_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RWUID_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RWUID\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_RWUID_SHIFT\fP)) & \fBUART_S2_RWUID_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXINV_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXINV_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXINV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_RXINV_SHIFT\fP)) & \fBUART_S2_RXINV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_MSBF_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_S2_MSBF_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_S2_MSBF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_MSBF_SHIFT\fP)) & \fBUART_S2_MSBF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXEDGIF_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXEDGIF_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_S2_RXEDGIF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_RXEDGIF_SHIFT\fP)) & \fBUART_S2_RXEDGIF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDIF_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDIF_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_S2_LBKDIF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_S2_LBKDIF_SHIFT\fP)) & \fBUART_S2_LBKDIF_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC3 - UART Control Register 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C3_PEIE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_C3_PEIE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_C3_PEIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_PEIE_SHIFT\fP)) & \fBUART_C3_PEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_FEIE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_C3_FEIE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_C3_FEIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_FEIE_SHIFT\fP)) & \fBUART_C3_FEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_NEIE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_C3_NEIE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_C3_NEIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_NEIE_SHIFT\fP)) & \fBUART_C3_NEIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_ORIE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_C3_ORIE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_C3_ORIE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_ORIE_SHIFT\fP)) & \fBUART_C3_ORIE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXINV_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXINV_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXINV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_TXINV_SHIFT\fP)) & \fBUART_C3_TXINV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXDIR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXDIR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_C3_TXDIR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_TXDIR_SHIFT\fP)) & \fBUART_C3_TXDIR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_T8_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_C3_T8_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_C3_T8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_T8_SHIFT\fP)) & \fBUART_C3_T8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C3_R8_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_C3_R8_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_C3_R8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C3_R8_SHIFT\fP)) & \fBUART_C3_R8_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBD - UART Data Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_D_RT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_D_RT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_D_RT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_D_RT_SHIFT\fP)) & \fBUART_D_RT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMA1 - UART Match Address Registers 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_MA1_MA_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_MA1_MA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_MA1_MA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MA1_MA_SHIFT\fP)) & \fBUART_MA1_MA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMA2 - UART Match Address Registers 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_MA2_MA_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_MA2_MA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_MA2_MA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MA2_MA_SHIFT\fP)) & \fBUART_MA2_MA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC4 - UART Control Register 4\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C4_BRFA_MASK\fP   (0x1FU)"
.br
.ti -1c
.RI "#define \fBUART_C4_BRFA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_C4_BRFA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C4_BRFA_SHIFT\fP)) & \fBUART_C4_BRFA_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C4_M10_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_C4_M10_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_C4_M10\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C4_M10_SHIFT\fP)) & \fBUART_C4_M10_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN2_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN2_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN2\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C4_MAEN2_SHIFT\fP)) & \fBUART_C4_MAEN2_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN1_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN1_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_C4_MAEN1\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C4_MAEN1_SHIFT\fP)) & \fBUART_C4_MAEN1_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC5 - UART Control Register 5\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C5_LBKDDMAS_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_C5_LBKDDMAS_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_C5_LBKDDMAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C5_LBKDDMAS_SHIFT\fP)) & \fBUART_C5_LBKDDMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C5_ILDMAS_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_C5_ILDMAS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_C5_ILDMAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C5_ILDMAS_SHIFT\fP)) & \fBUART_C5_ILDMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C5_RDMAS_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_C5_RDMAS_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_C5_RDMAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C5_RDMAS_SHIFT\fP)) & \fBUART_C5_RDMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C5_TCDMAS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_C5_TCDMAS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_C5_TCDMAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C5_TCDMAS_SHIFT\fP)) & \fBUART_C5_TCDMAS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C5_TDMAS_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_C5_TDMAS_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_C5_TDMAS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C5_TDMAS_SHIFT\fP)) & \fBUART_C5_TDMAS_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBED - UART Extended Data Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_ED_PARITYE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_ED_PARITYE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_ED_PARITYE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_ED_PARITYE_SHIFT\fP)) & \fBUART_ED_PARITYE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_ED_NOISY_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_ED_NOISY_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_ED_NOISY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_ED_NOISY_SHIFT\fP)) & \fBUART_ED_NOISY_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBMODEM - UART Modem Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_MODEM_TXCTSE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXCTSE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXCTSE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MODEM_TXCTSE_SHIFT\fP)) & \fBUART_MODEM_TXCTSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MODEM_TXRTSE_SHIFT\fP)) & \fBUART_MODEM_TXRTSE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSPOL_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSPOL_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_TXRTSPOL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MODEM_TXRTSPOL_SHIFT\fP)) & \fBUART_MODEM_TXRTSPOL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_RXRTSE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_RXRTSE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_MODEM_RXRTSE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_MODEM_RXRTSE_SHIFT\fP)) & \fBUART_MODEM_RXRTSE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIR - UART Infrared Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_IR_TNP_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBUART_IR_TNP_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_IR_TNP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IR_TNP_SHIFT\fP)) & \fBUART_IR_TNP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IR_IREN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_IR_IREN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_IR_IREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IR_IREN_SHIFT\fP)) & \fBUART_IR_IREN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPFIFO - UART FIFO Parameters\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_PFIFO_RXFIFOSIZE_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_RXFIFOSIZE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_RXFIFOSIZE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_PFIFO_RXFIFOSIZE_SHIFT\fP)) & \fBUART_PFIFO_RXFIFOSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_RXFE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_RXFE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_RXFE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_PFIFO_RXFE_SHIFT\fP)) & \fBUART_PFIFO_RXFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFIFOSIZE_MASK\fP   (0x70U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFIFOSIZE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFIFOSIZE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_PFIFO_TXFIFOSIZE_SHIFT\fP)) & \fBUART_PFIFO_TXFIFOSIZE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_PFIFO_TXFE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_PFIFO_TXFE_SHIFT\fP)) & \fBUART_PFIFO_TXFE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCFIFO - UART FIFO Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_CFIFO_RXUFE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXUFE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXUFE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_CFIFO_RXUFE_SHIFT\fP)) & \fBUART_CFIFO_RXUFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXOFE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXOFE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXOFE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_CFIFO_TXOFE_SHIFT\fP)) & \fBUART_CFIFO_TXOFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXOFE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXOFE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXOFE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_CFIFO_RXOFE_SHIFT\fP)) & \fBUART_CFIFO_RXOFE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXFLUSH_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXFLUSH_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_RXFLUSH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_CFIFO_RXFLUSH_SHIFT\fP)) & \fBUART_CFIFO_RXFLUSH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXFLUSH_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXFLUSH_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_CFIFO_TXFLUSH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_CFIFO_TXFLUSH_SHIFT\fP)) & \fBUART_CFIFO_TXFLUSH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSFIFO - UART FIFO Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_SFIFO_RXUF_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXUF_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXUF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_SFIFO_RXUF_SHIFT\fP)) & \fBUART_SFIFO_RXUF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXOF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXOF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXOF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_SFIFO_TXOF_SHIFT\fP)) & \fBUART_SFIFO_TXOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXOF_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXOF_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXOF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_SFIFO_RXOF_SHIFT\fP)) & \fBUART_SFIFO_RXOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXEMPT_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXEMPT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_RXEMPT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_SFIFO_RXEMPT_SHIFT\fP)) & \fBUART_SFIFO_RXEMPT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXEMPT_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXEMPT_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_SFIFO_TXEMPT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_SFIFO_TXEMPT_SHIFT\fP)) & \fBUART_SFIFO_TXEMPT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTWFIFO - UART FIFO Transmit Watermark\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_TWFIFO_TXWATER_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_TWFIFO_TXWATER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_TWFIFO_TXWATER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_TWFIFO_TXWATER_SHIFT\fP)) & \fBUART_TWFIFO_TXWATER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTCFIFO - UART FIFO Transmit Count\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_TCFIFO_TXCOUNT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_TCFIFO_TXCOUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_TCFIFO_TXCOUNT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_TCFIFO_TXCOUNT_SHIFT\fP)) & \fBUART_TCFIFO_TXCOUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRWFIFO - UART FIFO Receive Watermark\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_RWFIFO_RXWATER_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_RWFIFO_RXWATER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_RWFIFO_RXWATER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_RWFIFO_RXWATER_SHIFT\fP)) & \fBUART_RWFIFO_RXWATER_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRCFIFO - UART FIFO Receive Count\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_RCFIFO_RXCOUNT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_RCFIFO_RXCOUNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_RCFIFO_RXCOUNT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_RCFIFO_RXCOUNT_SHIFT\fP)) & \fBUART_RCFIFO_RXCOUNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBC7816 - UART 7816 Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_C7816_ISO_7816E_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ISO_7816E_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ISO_7816E\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C7816_ISO_7816E_SHIFT\fP)) & \fBUART_C7816_ISO_7816E_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C7816_TTYPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_TTYPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_TTYPE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C7816_TTYPE_SHIFT\fP)) & \fBUART_C7816_TTYPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C7816_INIT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_INIT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_INIT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C7816_INIT_SHIFT\fP)) & \fBUART_C7816_INIT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ANACK_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ANACK_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ANACK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C7816_ANACK_SHIFT\fP)) & \fBUART_C7816_ANACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ONACK_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ONACK_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_C7816_ONACK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_C7816_ONACK_SHIFT\fP)) & \fBUART_C7816_ONACK_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIE7816 - UART 7816 Interrupt Enable Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_IE7816_RXTE_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_RXTE_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_RXTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_RXTE_SHIFT\fP)) & \fBUART_IE7816_RXTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_TXTE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_TXTE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_TXTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_TXTE_SHIFT\fP)) & \fBUART_IE7816_TXTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_GTVE_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_GTVE_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_GTVE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_GTVE_SHIFT\fP)) & \fBUART_IE7816_GTVE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_INITDE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_INITDE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_INITDE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_INITDE_SHIFT\fP)) & \fBUART_IE7816_INITDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_BWTE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_BWTE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_BWTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_BWTE_SHIFT\fP)) & \fBUART_IE7816_BWTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_CWTE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_CWTE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_CWTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_CWTE_SHIFT\fP)) & \fBUART_IE7816_CWTE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_WTE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_WTE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_IE7816_WTE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IE7816_WTE_SHIFT\fP)) & \fBUART_IE7816_WTE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIS7816 - UART 7816 Interrupt Status Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_IS7816_RXT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_RXT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_RXT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_RXT_SHIFT\fP)) & \fBUART_IS7816_RXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_TXT_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_TXT_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_TXT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_TXT_SHIFT\fP)) & \fBUART_IS7816_TXT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_GTV_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_GTV_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_GTV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_GTV_SHIFT\fP)) & \fBUART_IS7816_GTV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_INITD_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_INITD_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_INITD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_INITD_SHIFT\fP)) & \fBUART_IS7816_INITD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_BWT_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_BWT_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_BWT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_BWT_SHIFT\fP)) & \fBUART_IS7816_BWT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_CWT_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_CWT_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_CWT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_CWT_SHIFT\fP)) & \fBUART_IS7816_CWT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_WT_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_WT_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUART_IS7816_WT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_IS7816_WT_SHIFT\fP)) & \fBUART_IS7816_WT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWP7816T0 - UART 7816 Wait Parameter Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_WP7816T0_WI_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T0_WI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T0_WI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_WP7816T0_WI_SHIFT\fP)) & \fBUART_WP7816T0_WI_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWP7816T1 - UART 7816 Wait Parameter Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_WP7816T1_BWI_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T1_BWI_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T1_BWI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_WP7816T1_BWI_SHIFT\fP)) & \fBUART_WP7816T1_BWI_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T1_CWI_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T1_CWI_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_WP7816T1_CWI\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_WP7816T1_CWI_SHIFT\fP)) & \fBUART_WP7816T1_CWI_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWN7816 - UART 7816 Wait N Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_WN7816_GTN_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_WN7816_GTN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_WN7816_GTN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_WN7816_GTN_SHIFT\fP)) & \fBUART_WN7816_GTN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWF7816 - UART 7816 Wait FD Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_WF7816_GTFD_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_WF7816_GTFD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_WF7816_GTFD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_WF7816_GTFD_SHIFT\fP)) & \fBUART_WF7816_GTFD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBET7816 - UART 7816 Error Threshold Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_ET7816_RXTHRESHOLD_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBUART_ET7816_RXTHRESHOLD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_ET7816_RXTHRESHOLD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_ET7816_RXTHRESHOLD_SHIFT\fP)) & \fBUART_ET7816_RXTHRESHOLD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUART_ET7816_TXTHRESHOLD_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBUART_ET7816_TXTHRESHOLD_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUART_ET7816_TXTHRESHOLD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_ET7816_TXTHRESHOLD_SHIFT\fP)) & \fBUART_ET7816_TXTHRESHOLD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTL7816 - UART 7816 Transmit Length Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUART_TL7816_TLEN_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUART_TL7816_TLEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUART_TL7816_TLEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUART_TL7816_TLEN_SHIFT\fP)) & \fBUART_TL7816_TLEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPERID - Peripheral ID register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_PERID_ID_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBUSB_PERID_ID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_PERID_ID\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_PERID_ID_SHIFT\fP)) & \fBUSB_PERID_ID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBIDCOMP - Peripheral ID Complement register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_IDCOMP_NID_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBUSB_IDCOMP_NID_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_IDCOMP_NID\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_IDCOMP_NID_SHIFT\fP)) & \fBUSB_IDCOMP_NID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBREV - Peripheral Revision register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_REV_REV_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_REV_REV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_REV_REV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_REV_REV_SHIFT\fP)) & \fBUSB_REV_REV_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADDINFO - Peripheral Additional Info register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ADDINFO_IEHOST_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDINFO_IEHOST_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDINFO_IEHOST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ADDINFO_IEHOST_SHIFT\fP)) & \fBUSB_ADDINFO_IEHOST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ADDINFO_IRQNUM_MASK\fP   (0xF8U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDINFO_IRQNUM_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDINFO_IRQNUM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ADDINFO_IRQNUM_SHIFT\fP)) & \fBUSB_ADDINFO_IRQNUM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOTGISTAT - OTG Interrupt Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_OTGISTAT_AVBUSCHG_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_AVBUSCHG_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_AVBUSCHG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_AVBUSCHG_SHIFT\fP)) & \fBUSB_OTGISTAT_AVBUSCHG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_B_SESS_CHG_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_B_SESS_CHG_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_B_SESS_CHG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_B_SESS_CHG_SHIFT\fP)) & \fBUSB_OTGISTAT_B_SESS_CHG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_SESSVLDCHG_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_SESSVLDCHG_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_SESSVLDCHG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_SESSVLDCHG_SHIFT\fP)) & \fBUSB_OTGISTAT_SESSVLDCHG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_LINE_STATE_CHG_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_LINE_STATE_CHG_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_LINE_STATE_CHG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_LINE_STATE_CHG_SHIFT\fP)) & \fBUSB_OTGISTAT_LINE_STATE_CHG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_ONEMSEC_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_ONEMSEC_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_ONEMSEC\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_ONEMSEC_SHIFT\fP)) & \fBUSB_OTGISTAT_ONEMSEC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_IDCHG_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_IDCHG_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGISTAT_IDCHG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGISTAT_IDCHG_SHIFT\fP)) & \fBUSB_OTGISTAT_IDCHG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOTGICR - OTG Interrupt Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_OTGICR_AVBUSEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_AVBUSEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_AVBUSEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_AVBUSEN_SHIFT\fP)) & \fBUSB_OTGICR_AVBUSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_BSESSEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_BSESSEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_BSESSEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_BSESSEN_SHIFT\fP)) & \fBUSB_OTGICR_BSESSEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_SESSVLDEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_SESSVLDEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_SESSVLDEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_SESSVLDEN_SHIFT\fP)) & \fBUSB_OTGICR_SESSVLDEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_LINESTATEEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_LINESTATEEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_LINESTATEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_LINESTATEEN_SHIFT\fP)) & \fBUSB_OTGICR_LINESTATEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_ONEMSECEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_ONEMSECEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_ONEMSECEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_ONEMSECEN_SHIFT\fP)) & \fBUSB_OTGICR_ONEMSECEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_IDEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_IDEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGICR_IDEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGICR_IDEN_SHIFT\fP)) & \fBUSB_OTGICR_IDEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOTGSTAT - OTG Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_OTGSTAT_AVBUSVLD_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_AVBUSVLD_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_AVBUSVLD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_AVBUSVLD_SHIFT\fP)) & \fBUSB_OTGSTAT_AVBUSVLD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_BSESSEND_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_BSESSEND_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_BSESSEND\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_BSESSEND_SHIFT\fP)) & \fBUSB_OTGSTAT_BSESSEND_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_SESS_VLD_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_SESS_VLD_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_SESS_VLD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_SESS_VLD_SHIFT\fP)) & \fBUSB_OTGSTAT_SESS_VLD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_LINESTATESTABLE_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_LINESTATESTABLE_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_LINESTATESTABLE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_LINESTATESTABLE_SHIFT\fP)) & \fBUSB_OTGSTAT_LINESTATESTABLE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ONEMSECEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ONEMSECEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ONEMSECEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_ONEMSECEN_SHIFT\fP)) & \fBUSB_OTGSTAT_ONEMSECEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ID_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ID_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGSTAT_ID\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGSTAT_ID_SHIFT\fP)) & \fBUSB_OTGSTAT_ID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOTGCTL - OTG Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_OTGCTL_OTGEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_OTGEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_OTGEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGCTL_OTGEN_SHIFT\fP)) & \fBUSB_OTGCTL_OTGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DMLOW_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DMLOW_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DMLOW\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGCTL_DMLOW_SHIFT\fP)) & \fBUSB_OTGCTL_DMLOW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPLOW_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPLOW_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPLOW\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGCTL_DPLOW_SHIFT\fP)) & \fBUSB_OTGCTL_DPLOW_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPHIGH_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPHIGH_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_OTGCTL_DPHIGH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OTGCTL_DPHIGH_SHIFT\fP)) & \fBUSB_OTGCTL_DPHIGH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBISTAT - Interrupt Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ISTAT_USBRST_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_USBRST_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_USBRST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_USBRST_SHIFT\fP)) & \fBUSB_ISTAT_USBRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ERROR_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ERROR_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ERROR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_ERROR_SHIFT\fP)) & \fBUSB_ISTAT_ERROR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SOFTOK_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SOFTOK_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SOFTOK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_SOFTOK_SHIFT\fP)) & \fBUSB_ISTAT_SOFTOK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_TOKDNE_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_TOKDNE_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_TOKDNE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_TOKDNE_SHIFT\fP)) & \fBUSB_ISTAT_TOKDNE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SLEEP_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SLEEP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_SLEEP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_SLEEP_SHIFT\fP)) & \fBUSB_ISTAT_SLEEP_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_RESUME_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_RESUME_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_RESUME\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_RESUME_SHIFT\fP)) & \fBUSB_ISTAT_RESUME_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ATTACH_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ATTACH_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_ATTACH\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_ATTACH_SHIFT\fP)) & \fBUSB_ISTAT_ATTACH_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_STALL_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_STALL_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_ISTAT_STALL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ISTAT_STALL_SHIFT\fP)) & \fBUSB_ISTAT_STALL_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBINTEN - Interrupt Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_INTEN_USBRSTEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_USBRSTEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_USBRSTEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_USBRSTEN_SHIFT\fP)) & \fBUSB_INTEN_USBRSTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ERROREN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ERROREN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ERROREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_ERROREN_SHIFT\fP)) & \fBUSB_INTEN_ERROREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SOFTOKEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SOFTOKEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SOFTOKEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_SOFTOKEN_SHIFT\fP)) & \fBUSB_INTEN_SOFTOKEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_TOKDNEEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_TOKDNEEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_TOKDNEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_TOKDNEEN_SHIFT\fP)) & \fBUSB_INTEN_TOKDNEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SLEEPEN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SLEEPEN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_SLEEPEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_SLEEPEN_SHIFT\fP)) & \fBUSB_INTEN_SLEEPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_RESUMEEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_RESUMEEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_RESUMEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_RESUMEEN_SHIFT\fP)) & \fBUSB_INTEN_RESUMEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ATTACHEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ATTACHEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_ATTACHEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_ATTACHEN_SHIFT\fP)) & \fBUSB_INTEN_ATTACHEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_STALLEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_STALLEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_INTEN_STALLEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_INTEN_STALLEN_SHIFT\fP)) & \fBUSB_INTEN_STALLEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBERRSTAT - Error Interrupt Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ERRSTAT_PIDERR_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_PIDERR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_PIDERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_PIDERR_SHIFT\fP)) & \fBUSB_ERRSTAT_PIDERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC5EOF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC5EOF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC5EOF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_CRC5EOF_SHIFT\fP)) & \fBUSB_ERRSTAT_CRC5EOF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC16_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC16_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_CRC16\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_CRC16_SHIFT\fP)) & \fBUSB_ERRSTAT_CRC16_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DFN8_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DFN8_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DFN8\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_DFN8_SHIFT\fP)) & \fBUSB_ERRSTAT_DFN8_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTOERR_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTOERR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTOERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_BTOERR_SHIFT\fP)) & \fBUSB_ERRSTAT_BTOERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DMAERR_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DMAERR_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_DMAERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_DMAERR_SHIFT\fP)) & \fBUSB_ERRSTAT_DMAERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTSERR_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTSERR_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_ERRSTAT_BTSERR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERRSTAT_BTSERR_SHIFT\fP)) & \fBUSB_ERRSTAT_BTSERR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBERREN - Error Interrupt Enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ERREN_PIDERREN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_PIDERREN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_PIDERREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_PIDERREN_SHIFT\fP)) & \fBUSB_ERREN_PIDERREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC5EOFEN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC5EOFEN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC5EOFEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_CRC5EOFEN_SHIFT\fP)) & \fBUSB_ERREN_CRC5EOFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC16EN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC16EN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_CRC16EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_CRC16EN_SHIFT\fP)) & \fBUSB_ERREN_CRC16EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DFN8EN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DFN8EN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DFN8EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_DFN8EN_SHIFT\fP)) & \fBUSB_ERREN_DFN8EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTOERREN_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTOERREN_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTOERREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_BTOERREN_SHIFT\fP)) & \fBUSB_ERREN_BTOERREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DMAERREN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DMAERREN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_DMAERREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_DMAERREN_SHIFT\fP)) & \fBUSB_ERREN_DMAERREN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTSERREN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTSERREN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_ERREN_BTSERREN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ERREN_BTSERREN_SHIFT\fP)) & \fBUSB_ERREN_BTSERREN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTAT - Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_STAT_ODD_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_ODD_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_ODD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_STAT_ODD_SHIFT\fP)) & \fBUSB_STAT_ODD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_TX_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_TX_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_TX\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_STAT_TX_SHIFT\fP)) & \fBUSB_STAT_TX_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_ENDP_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_ENDP_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_STAT_ENDP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_STAT_ENDP_SHIFT\fP)) & \fBUSB_STAT_ENDP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCTL - Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_CTL_USBENSOFEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_USBENSOFEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_USBENSOFEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_USBENSOFEN_SHIFT\fP)) & \fBUSB_CTL_USBENSOFEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_ODDRST_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_ODDRST_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_ODDRST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_ODDRST_SHIFT\fP)) & \fBUSB_CTL_ODDRST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESUME_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESUME_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESUME\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_RESUME_SHIFT\fP)) & \fBUSB_CTL_RESUME_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_HOSTMODEEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_HOSTMODEEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_HOSTMODEEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_HOSTMODEEN_SHIFT\fP)) & \fBUSB_CTL_HOSTMODEEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESET_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESET_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_RESET\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_RESET_SHIFT\fP)) & \fBUSB_CTL_RESET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_TXSUSPENDTOKENBUSY_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_TXSUSPENDTOKENBUSY_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_TXSUSPENDTOKENBUSY\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_TXSUSPENDTOKENBUSY_SHIFT\fP)) & \fBUSB_CTL_TXSUSPENDTOKENBUSY_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_SE0_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_SE0_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_SE0\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_SE0_SHIFT\fP)) & \fBUSB_CTL_SE0_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_JSTATE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_JSTATE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_CTL_JSTATE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CTL_JSTATE_SHIFT\fP)) & \fBUSB_CTL_JSTATE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBADDR - Address register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ADDR_ADDR_MASK\fP   (0x7FU)"
.br
.ti -1c
.RI "#define \fBUSB_ADDR_ADDR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDR_ADDR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ADDR_ADDR_SHIFT\fP)) & \fBUSB_ADDR_ADDR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ADDR_LSEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDR_LSEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_ADDR_LSEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ADDR_LSEN_SHIFT\fP)) & \fBUSB_ADDR_LSEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBDTPAGE1 - BDT Page register 1\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_BDTPAGE1_BDTBA_MASK\fP   (0xFEU)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE1_BDTBA_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE1_BDTBA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_BDTPAGE1_BDTBA_SHIFT\fP)) & \fBUSB_BDTPAGE1_BDTBA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFRMNUML - Frame Number register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_FRMNUML_FRM_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_FRMNUML_FRM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_FRMNUML_FRM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_FRMNUML_FRM_SHIFT\fP)) & \fBUSB_FRMNUML_FRM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBFRMNUMH - Frame Number register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_FRMNUMH_FRM_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBUSB_FRMNUMH_FRM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_FRMNUMH_FRM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_FRMNUMH_FRM_SHIFT\fP)) & \fBUSB_FRMNUMH_FRM_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTOKEN - Token register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENENDPT_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENENDPT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENENDPT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_TOKEN_TOKENENDPT_SHIFT\fP)) & \fBUSB_TOKEN_TOKENENDPT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENPID_MASK\fP   (0xF0U)"
.br
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENPID_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_TOKEN_TOKENPID\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_TOKEN_TOKENPID_SHIFT\fP)) & \fBUSB_TOKEN_TOKENPID_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSOFTHLD - SOF Threshold register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_SOFTHLD_CNT_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_SOFTHLD_CNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_SOFTHLD_CNT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_SOFTHLD_CNT_SHIFT\fP)) & \fBUSB_SOFTHLD_CNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBDTPAGE2 - BDT Page Register 2\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_BDTPAGE2_BDTBA_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE2_BDTBA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE2_BDTBA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_BDTPAGE2_BDTBA_SHIFT\fP)) & \fBUSB_BDTPAGE2_BDTBA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBBDTPAGE3 - BDT Page Register 3\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_BDTPAGE3_BDTBA_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE3_BDTBA_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_BDTPAGE3_BDTBA\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_BDTPAGE3_BDTBA_SHIFT\fP)) & \fBUSB_BDTPAGE3_BDTBA_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBENDPT - Endpoint Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_ENDPT_EPHSHK_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPHSHK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPHSHK\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_EPHSHK_SHIFT\fP)) & \fBUSB_ENDPT_EPHSHK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPSTALL_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPSTALL_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPSTALL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_EPSTALL_SHIFT\fP)) & \fBUSB_ENDPT_EPSTALL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPTXEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPTXEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPTXEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_EPTXEN_SHIFT\fP)) & \fBUSB_ENDPT_EPTXEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPRXEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPRXEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPRXEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_EPRXEN_SHIFT\fP)) & \fBUSB_ENDPT_EPRXEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPCTLDIS_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPCTLDIS_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_EPCTLDIS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_EPCTLDIS_SHIFT\fP)) & \fBUSB_ENDPT_EPCTLDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_RETRYDIS_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_RETRYDIS_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_RETRYDIS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_RETRYDIS_SHIFT\fP)) & \fBUSB_ENDPT_RETRYDIS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_HOSTWOHUB_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_HOSTWOHUB_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_HOSTWOHUB\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_ENDPT_HOSTWOHUB_SHIFT\fP)) & \fBUSB_ENDPT_HOSTWOHUB_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_ENDPT_COUNT\fP   (16U)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUSBCTRL - USB Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_USBCTRL_PDE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_USBCTRL_PDE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_USBCTRL_PDE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBCTRL_PDE_SHIFT\fP)) & \fBUSB_USBCTRL_PDE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_USBCTRL_SUSP_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_USBCTRL_SUSP_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_USBCTRL_SUSP\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBCTRL_SUSP_SHIFT\fP)) & \fBUSB_USBCTRL_SUSP_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBOBSERVE - USB OTG Observe register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_OBSERVE_DMPD_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DMPD_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DMPD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OBSERVE_DMPD_SHIFT\fP)) & \fBUSB_OBSERVE_DMPD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPD_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPD_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPD\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OBSERVE_DPPD_SHIFT\fP)) & \fBUSB_OBSERVE_DPPD_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPU_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPU_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_OBSERVE_DPPU\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_OBSERVE_DPPU_SHIFT\fP)) & \fBUSB_OBSERVE_DPPU_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCONTROL - USB OTG Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_CONTROL_DPPULLUPNONOTG_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_CONTROL_DPPULLUPNONOTG_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_CONTROL_DPPULLUPNONOTG\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CONTROL_DPPULLUPNONOTG_SHIFT\fP)) & \fBUSB_CONTROL_DPPULLUPNONOTG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUSBTRC0 - USB Transceiver Control register 0\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_RESUME_INT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_RESUME_INT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_RESUME_INT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBTRC0_USB_RESUME_INT_SHIFT\fP)) & \fBUSB_USBTRC0_USB_RESUME_INT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_SYNC_DET_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_SYNC_DET_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_SYNC_DET\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBTRC0_SYNC_DET_SHIFT\fP)) & \fBUSB_USBTRC0_SYNC_DET_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_CLK_RECOVERY_INT_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_CLK_RECOVERY_INT_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USB_CLK_RECOVERY_INT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBTRC0_USB_CLK_RECOVERY_INT_SHIFT\fP)) & \fBUSB_USBTRC0_USB_CLK_RECOVERY_INT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESMEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESMEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESMEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBTRC0_USBRESMEN_SHIFT\fP)) & \fBUSB_USBTRC0_USBRESMEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESET_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESET_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_USBTRC0_USBRESET\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBTRC0_USBRESET_SHIFT\fP)) & \fBUSB_USBTRC0_USBRESET_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUSBFRMADJUST - Frame Adjust Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_USBFRMADJUST_ADJ_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBUSB_USBFRMADJUST_ADJ_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_USBFRMADJUST_ADJ\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_USBFRMADJUST_ADJ_SHIFT\fP)) & \fBUSB_USBFRMADJUST_ADJ_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLK_RECOVER_CTRL - USB Clock recovery control\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_SHIFT\fP)) & \fBUSB_CLK_RECOVER_CTRL_RESTART_IFRTRIM_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_SHIFT\fP)) & \fBUSB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_SHIFT\fP)) & \fBUSB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLK_RECOVER_IRC_EN - IRC48M oscillator enable register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_REG_EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_REG_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_IRC_EN_REG_EN_SHIFT\fP)) & \fBUSB_CLK_RECOVER_IRC_EN_REG_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_IRC_EN_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_IRC_EN_IRC_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_IRC_EN_IRC_EN_SHIFT\fP)) & \fBUSB_CLK_RECOVER_IRC_EN_IRC_EN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLK_RECOVER_INT_STATUS - Clock recovery separated interrupt status\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_INT_STATUS_OVF_ERROR_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBUSB_CLK_RECOVER_INT_STATUS_OVF_ERROR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBUSB_CLK_RECOVER_INT_STATUS_OVF_ERROR_SHIFT\fP)) & \fBUSB_CLK_RECOVER_INT_STATUS_OVF_ERROR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCONTROL - Control register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IACK_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IACK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IACK\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_IACK_SHIFT\fP)) & \fBUSBDCD_CONTROL_IACK_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IF_MASK\fP   (0x100U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IF_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IF\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_IF_SHIFT\fP)) & \fBUSBDCD_CONTROL_IF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IE_MASK\fP   (0x10000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IE_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_IE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_IE_SHIFT\fP)) & \fBUSBDCD_CONTROL_IE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_BC12_MASK\fP   (0x20000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_BC12_SHIFT\fP   (17U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_BC12\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_BC12_SHIFT\fP)) & \fBUSBDCD_CONTROL_BC12_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_START_MASK\fP   (0x1000000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_START_SHIFT\fP   (24U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_START\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_START_SHIFT\fP)) & \fBUSBDCD_CONTROL_START_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_SR_MASK\fP   (0x2000000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_SR_SHIFT\fP   (25U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CONTROL_SR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CONTROL_SR_SHIFT\fP)) & \fBUSBDCD_CONTROL_SR_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBCLOCK - Clock register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_UNIT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_UNIT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_UNIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CLOCK_CLOCK_UNIT_SHIFT\fP)) & \fBUSBDCD_CLOCK_CLOCK_UNIT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_SPEED_MASK\fP   (0xFFCU)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_SPEED_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_CLOCK_CLOCK_SPEED\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_CLOCK_CLOCK_SPEED_SHIFT\fP)) & \fBUSBDCD_CLOCK_CLOCK_SPEED_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTATUS - Status register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_RES_MASK\fP   (0x30000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_RES_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_RES\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_STATUS_SEQ_RES_SHIFT\fP)) & \fBUSBDCD_STATUS_SEQ_RES_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_STAT_MASK\fP   (0xC0000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_STAT_SHIFT\fP   (18U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_SEQ_STAT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_STATUS_SEQ_STAT_SHIFT\fP)) & \fBUSBDCD_STATUS_SEQ_STAT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ERR_MASK\fP   (0x100000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ERR_SHIFT\fP   (20U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ERR\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_STATUS_ERR_SHIFT\fP)) & \fBUSBDCD_STATUS_ERR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_TO_MASK\fP   (0x200000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_TO_SHIFT\fP   (21U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_TO\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_STATUS_TO_SHIFT\fP)) & \fBUSBDCD_STATUS_TO_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ACTIVE_MASK\fP   (0x400000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ACTIVE_SHIFT\fP   (22U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_STATUS_ACTIVE\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_STATUS_ACTIVE_SHIFT\fP)) & \fBUSBDCD_STATUS_ACTIVE_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIMER0 - TIMER0 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TUNITCON_MASK\fP   (0xFFFU)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TUNITCON_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TUNITCON\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER0_TUNITCON_SHIFT\fP)) & \fBUSBDCD_TIMER0_TUNITCON_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TSEQ_INIT_MASK\fP   (0x3FF0000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TSEQ_INIT_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER0_TSEQ_INIT\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER0_TSEQ_INIT_SHIFT\fP)) & \fBUSBDCD_TIMER0_TSEQ_INIT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIMER1 - TIMER1 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TVDPSRC_ON_MASK\fP   (0x3FFU)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TVDPSRC_ON_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TVDPSRC_ON\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER1_TVDPSRC_ON_SHIFT\fP)) & \fBUSBDCD_TIMER1_TVDPSRC_ON_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TDCD_DBNC_MASK\fP   (0x3FF0000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TDCD_DBNC_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER1_TDCD_DBNC\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER1_TDCD_DBNC_SHIFT\fP)) & \fBUSBDCD_TIMER1_TDCD_DBNC_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIMER2_BC11 - TIMER2_BC11 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_CHECK_DM_MASK\fP   (0xFU)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_CHECK_DM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_CHECK_DM\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER2_BC11_CHECK_DM_SHIFT\fP)) & \fBUSBDCD_TIMER2_BC11_CHECK_DM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_TVDPSRC_CON_MASK\fP   (0x3FF0000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC11_TVDPSRC_CON\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT\fP)) & \fBUSBDCD_TIMER2_BC11_TVDPSRC_CON_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTIMER2_BC12 - TIMER2_BC12 register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TVDMSRC_ON_MASK\fP   (0x3FFU)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TVDMSRC_ON\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT\fP)) & \fBUSBDCD_TIMER2_BC12_TVDMSRC_ON_MASK\fP)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK\fP   (0x3FF0000U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT\fP   (16U)"
.br
.ti -1c
.RI "#define \fBUSBDCD_TIMER2_BC12_TWAIT_AFTER_PRD\fP(x)   (((uint32_t)(((uint32_t)(x)) << \fBUSBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT\fP)) & \fBUSBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTRM - VREF Trim Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBVREF_TRM_TRIM_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBVREF_TRM_TRIM_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBVREF_TRM_TRIM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_TRM_TRIM_SHIFT\fP)) & \fBVREF_TRM_TRIM_MASK\fP)"
.br
.ti -1c
.RI "#define \fBVREF_TRM_CHOPEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBVREF_TRM_CHOPEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBVREF_TRM_CHOPEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_TRM_CHOPEN_SHIFT\fP)) & \fBVREF_TRM_CHOPEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSC - VREF Status and Control Register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBVREF_SC_MODE_LV_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_MODE_LV_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_MODE_LV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_SC_MODE_LV_SHIFT\fP)) & \fBVREF_SC_MODE_LV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFST_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFST_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFST\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_SC_VREFST_SHIFT\fP)) & \fBVREF_SC_VREFST_MASK\fP)"
.br
.ti -1c
.RI "#define \fBVREF_SC_ICOMPEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_ICOMPEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_ICOMPEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_SC_ICOMPEN_SHIFT\fP)) & \fBVREF_SC_ICOMPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBVREF_SC_REGEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_REGEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_REGEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_SC_REGEN_SHIFT\fP)) & \fBVREF_SC_REGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBVREF_SC_VREFEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBVREF_SC_VREFEN_SHIFT\fP)) & \fBVREF_SC_VREFEN_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTCTRLH - Watchdog Status and Control Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WDOGEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WDOGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WDOGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_CLKSRC\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_CLKSRC_SHIFT\fP)) & \fBWDOG_STCTRLH_CLKSRC_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_IRQRSTEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_IRQRSTEN_SHIFT\fP)) & \fBWDOG_STCTRLH_IRQRSTEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WINEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WINEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WINEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_ALLOWUPDATE\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_ALLOWUPDATE_SHIFT\fP)) & \fBWDOG_STCTRLH_ALLOWUPDATE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN_MASK\fP   (0x20U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN_SHIFT\fP   (5U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DBGEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DBGEN_SHIFT\fP)) & \fBWDOG_STCTRLH_DBGEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_STOPEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_STOPEN_SHIFT\fP)) & \fBWDOG_STCTRLH_STOPEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_WAITEN\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_WAITEN_SHIFT\fP)) & \fBWDOG_STCTRLH_WAITEN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG_MASK\fP   (0x400U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG_SHIFT\fP   (10U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTWDOG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTWDOG_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL_MASK\fP   (0x800U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL_SHIFT\fP   (11U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_TESTSEL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_TESTSEL_SHIFT\fP)) & \fBWDOG_STCTRLH_TESTSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL_MASK\fP   (0x3000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL_SHIFT\fP   (12U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_BYTESEL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_BYTESEL_SHIFT\fP)) & \fBWDOG_STCTRLH_BYTESEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG_MASK\fP   (0x4000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG_SHIFT\fP   (14U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLH_DISTESTWDOG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLH_DISTESTWDOG_SHIFT\fP)) & \fBWDOG_STCTRLH_DISTESTWDOG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBSTCTRLL - Watchdog Status and Control Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG_MASK\fP   (0x8000U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG_SHIFT\fP   (15U)"
.br
.ti -1c
.RI "#define \fBWDOG_STCTRLL_INTFLG\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_STCTRLL_INTFLG_SHIFT\fP)) & \fBWDOG_STCTRLL_INTFLG_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTOVALH - Watchdog Time-out Value Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALH_TOVALHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALH_TOVALHIGH_SHIFT\fP)) & \fBWDOG_TOVALH_TOVALHIGH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTOVALL - Watchdog Time-out Value Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TOVALL_TOVALLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TOVALL_TOVALLOW_SHIFT\fP)) & \fBWDOG_TOVALL_TOVALLOW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWINH - Watchdog Window Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_WINH_WINHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINH_WINHIGH_SHIFT\fP)) & \fBWDOG_WINH_WINHIGH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBWINL - Watchdog Window Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_WINL_WINLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_WINL_WINLOW_SHIFT\fP)) & \fBWDOG_WINL_WINLOW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBREFRESH - Watchdog Refresh register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_REFRESH_WDOGREFRESH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_REFRESH_WDOGREFRESH_SHIFT\fP)) & \fBWDOG_REFRESH_WDOGREFRESH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBUNLOCK - Watchdog Unlock register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_UNLOCK_WDOGUNLOCK\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_UNLOCK_WDOGUNLOCK_SHIFT\fP)) & \fBWDOG_UNLOCK_WDOGUNLOCK_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTMROUTH - Watchdog Timer Output Register High\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTH_TIMEROUTHIGH\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTH_TIMEROUTHIGH_SHIFT\fP)) & \fBWDOG_TMROUTH_TIMEROUTHIGH_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBTMROUTL - Watchdog Timer Output Register Low\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_TMROUTL_TIMEROUTLOW\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_TMROUTL_TIMEROUTLOW_SHIFT\fP)) & \fBWDOG_TMROUTL_TIMEROUTLOW_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBRSTCNT - Watchdog Reset Count register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT_MASK\fP   (0xFFFFU)"
.br
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBWDOG_RSTCNT_RSTCNT\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_RSTCNT_RSTCNT_SHIFT\fP)) & \fBWDOG_RSTCNT_RSTCNT_MASK\fP)"
.br
.in -1c
.in -1c
.PP
.RI "\fBPRESC - Watchdog Prescaler register\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL_MASK\fP   (0x700U)"
.br
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL_SHIFT\fP   (8U)"
.br
.ti -1c
.RI "#define \fBWDOG_PRESC_PRESCVAL\fP(x)   (((uint16_t)(((uint16_t)(x)) << \fBWDOG_PRESC_PRESCVAL_SHIFT\fP)) & \fBWDOG_PRESC_PRESCVAL_MASK\fP)"
.br
.in -1c
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBIRQn\fP \fBIRQn_Type\fP"
.br
.ti -1c
.RI "typedef enum \fB_dma_request_source\fP \fBdma_request_source_t\fP"
.br
.RI "Structure for the DMA hardware request\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBIRQn\fP { \fBNotAvail_IRQn\fP = -128, \fBNonMaskableInt_IRQn\fP = -14, \fBHardFault_IRQn\fP = -13, \fBMemoryManagement_IRQn\fP = -12, \fBBusFault_IRQn\fP = -11, \fBUsageFault_IRQn\fP = -10, \fBSVCall_IRQn\fP = -5, \fBDebugMonitor_IRQn\fP = -4, \fBPendSV_IRQn\fP = -2, \fBSysTick_IRQn\fP = -1, \fBDMA0_IRQn\fP = 0, \fBDMA1_IRQn\fP = 1, \fBDMA2_IRQn\fP = 2, \fBDMA3_IRQn\fP = 3, \fBDMA4_IRQn\fP = 4, \fBDMA5_IRQn\fP = 5, \fBDMA6_IRQn\fP = 6, \fBDMA7_IRQn\fP = 7, \fBDMA8_IRQn\fP = 8, \fBDMA9_IRQn\fP = 9, \fBDMA10_IRQn\fP = 10, \fBDMA11_IRQn\fP = 11, \fBDMA12_IRQn\fP = 12, \fBDMA13_IRQn\fP = 13, \fBDMA14_IRQn\fP = 14, \fBDMA15_IRQn\fP = 15, \fBDMA_Error_IRQn\fP = 16, \fBMCM_IRQn\fP = 17, \fBFTFE_IRQn\fP = 18, \fBRead_Collision_IRQn\fP = 19, \fBLVD_LVW_IRQn\fP = 20, \fBLLWU_IRQn\fP = 21, \fBWDOG_EWM_IRQn\fP = 22, \fBRNG_IRQn\fP = 23, \fBI2C0_IRQn\fP = 24, \fBI2C1_IRQn\fP = 25, \fBSPI0_IRQn\fP = 26, \fBSPI1_IRQn\fP = 27, \fBI2S0_Tx_IRQn\fP = 28, \fBI2S0_Rx_IRQn\fP = 29, \fBUART0_LON_IRQn\fP = 30, \fBUART0_RX_TX_IRQn\fP = 31, \fBUART0_ERR_IRQn\fP = 32, \fBUART1_RX_TX_IRQn\fP = 33, \fBUART1_ERR_IRQn\fP = 34, \fBUART2_RX_TX_IRQn\fP = 35, \fBUART2_ERR_IRQn\fP = 36, \fBUART3_RX_TX_IRQn\fP = 37, \fBUART3_ERR_IRQn\fP = 38, \fBADC0_IRQn\fP = 39, \fBCMP0_IRQn\fP = 40, \fBCMP1_IRQn\fP = 41, \fBFTM0_IRQn\fP = 42, \fBFTM1_IRQn\fP = 43, \fBFTM2_IRQn\fP = 44, \fBCMT_IRQn\fP = 45, \fBRTC_IRQn\fP = 46, \fBRTC_Seconds_IRQn\fP = 47, \fBPIT0_IRQn\fP = 48, \fBPIT1_IRQn\fP = 49, \fBPIT2_IRQn\fP = 50, \fBPIT3_IRQn\fP = 51, \fBPDB0_IRQn\fP = 52, \fBUSB0_IRQn\fP = 53, \fBUSBDCD_IRQn\fP = 54, \fBReserved71_IRQn\fP = 55, \fBDAC0_IRQn\fP = 56, \fBMCG_IRQn\fP = 57, \fBLPTMR0_IRQn\fP = 58, \fBPORTA_IRQn\fP = 59, \fBPORTB_IRQn\fP = 60, \fBPORTC_IRQn\fP = 61, \fBPORTD_IRQn\fP = 62, \fBPORTE_IRQn\fP = 63, \fBSWI_IRQn\fP = 64, \fBSPI2_IRQn\fP = 65, \fBUART4_RX_TX_IRQn\fP = 66, \fBUART4_ERR_IRQn\fP = 67, \fBUART5_RX_TX_IRQn\fP = 68, \fBUART5_ERR_IRQn\fP = 69, \fBCMP2_IRQn\fP = 70, \fBFTM3_IRQn\fP = 71, \fBDAC1_IRQn\fP = 72, \fBADC1_IRQn\fP = 73, \fBI2C2_IRQn\fP = 74, \fBCAN0_ORed_Message_buffer_IRQn\fP = 75, \fBCAN0_Bus_Off_IRQn\fP = 76, \fBCAN0_Error_IRQn\fP = 77, \fBCAN0_Tx_Warning_IRQn\fP = 78, \fBCAN0_Rx_Warning_IRQn\fP = 79, \fBCAN0_Wake_Up_IRQn\fP = 80, \fBSDHC_IRQn\fP = 81, \fBENET_1588_Timer_IRQn\fP = 82, \fBENET_Transmit_IRQn\fP = 83, \fBENET_Receive_IRQn\fP = 84, \fBENET_Error_IRQn\fP = 85 }"
.br
.ti -1c
.RI "enum \fB_dma_request_source\fP { \fBkDmaRequestMux0Disable\fP = 0|0x100U, \fBkDmaRequestMux0Reserved1\fP = 1|0x100U, \fBkDmaRequestMux0UART0Rx\fP = 2|0x100U, \fBkDmaRequestMux0UART0Tx\fP = 3|0x100U, \fBkDmaRequestMux0UART1Rx\fP = 4|0x100U, \fBkDmaRequestMux0UART1Tx\fP = 5|0x100U, \fBkDmaRequestMux0UART2Rx\fP = 6|0x100U, \fBkDmaRequestMux0UART2Tx\fP = 7|0x100U, \fBkDmaRequestMux0UART3Rx\fP = 8|0x100U, \fBkDmaRequestMux0UART3Tx\fP = 9|0x100U, \fBkDmaRequestMux0UART4\fP = 10|0x100U, \fBkDmaRequestMux0UART5\fP = 11|0x100U, \fBkDmaRequestMux0I2S0Rx\fP = 12|0x100U, \fBkDmaRequestMux0I2S0Tx\fP = 13|0x100U, \fBkDmaRequestMux0SPI0Rx\fP = 14|0x100U, \fBkDmaRequestMux0SPI0Tx\fP = 15|0x100U, \fBkDmaRequestMux0SPI1\fP = 16|0x100U, \fBkDmaRequestMux0SPI2\fP = 17|0x100U, \fBkDmaRequestMux0I2C0\fP = 18|0x100U, \fBkDmaRequestMux0I2C1I2C2\fP = 19|0x100U, \fBkDmaRequestMux0I2C1\fP = 19|0x100U, \fBkDmaRequestMux0I2C2\fP = 19|0x100U, \fBkDmaRequestMux0FTM0Channel0\fP = 20|0x100U, \fBkDmaRequestMux0FTM0Channel1\fP = 21|0x100U, \fBkDmaRequestMux0FTM0Channel2\fP = 22|0x100U, \fBkDmaRequestMux0FTM0Channel3\fP = 23|0x100U, \fBkDmaRequestMux0FTM0Channel4\fP = 24|0x100U, \fBkDmaRequestMux0FTM0Channel5\fP = 25|0x100U, \fBkDmaRequestMux0FTM0Channel6\fP = 26|0x100U, \fBkDmaRequestMux0FTM0Channel7\fP = 27|0x100U, \fBkDmaRequestMux0FTM1Channel0\fP = 28|0x100U, \fBkDmaRequestMux0FTM1Channel1\fP = 29|0x100U, \fBkDmaRequestMux0FTM2Channel0\fP = 30|0x100U, \fBkDmaRequestMux0FTM2Channel1\fP = 31|0x100U, \fBkDmaRequestMux0FTM3Channel0\fP = 32|0x100U, \fBkDmaRequestMux0FTM3Channel1\fP = 33|0x100U, \fBkDmaRequestMux0FTM3Channel2\fP = 34|0x100U, \fBkDmaRequestMux0FTM3Channel3\fP = 35|0x100U, \fBkDmaRequestMux0FTM3Channel4\fP = 36|0x100U, \fBkDmaRequestMux0FTM3Channel5\fP = 37|0x100U, \fBkDmaRequestMux0FTM3Channel6\fP = 38|0x100U, \fBkDmaRequestMux0FTM3Channel7\fP = 39|0x100U, \fBkDmaRequestMux0ADC0\fP = 40|0x100U, \fBkDmaRequestMux0ADC1\fP = 41|0x100U, \fBkDmaRequestMux0CMP0\fP = 42|0x100U, \fBkDmaRequestMux0CMP1\fP = 43|0x100U, \fBkDmaRequestMux0CMP2\fP = 44|0x100U, \fBkDmaRequestMux0DAC0\fP = 45|0x100U, \fBkDmaRequestMux0DAC1\fP = 46|0x100U, \fBkDmaRequestMux0CMT\fP = 47|0x100U, \fBkDmaRequestMux0PDB\fP = 48|0x100U, \fBkDmaRequestMux0PortA\fP = 49|0x100U, \fBkDmaRequestMux0PortB\fP = 50|0x100U, \fBkDmaRequestMux0PortC\fP = 51|0x100U, \fBkDmaRequestMux0PortD\fP = 52|0x100U, \fBkDmaRequestMux0PortE\fP = 53|0x100U, \fBkDmaRequestMux0IEEE1588Timer0\fP = 54|0x100U, \fBkDmaRequestMux0IEEE1588Timer1\fP = 55|0x100U, \fBkDmaRequestMux0IEEE1588Timer2\fP = 56|0x100U, \fBkDmaRequestMux0IEEE1588Timer3\fP = 57|0x100U, \fBkDmaRequestMux0AlwaysOn58\fP = 58|0x100U, \fBkDmaRequestMux0AlwaysOn59\fP = 59|0x100U, \fBkDmaRequestMux0AlwaysOn60\fP = 60|0x100U, \fBkDmaRequestMux0AlwaysOn61\fP = 61|0x100U, \fBkDmaRequestMux0AlwaysOn62\fP = 62|0x100U, \fBkDmaRequestMux0AlwaysOn63\fP = 63|0x100U }"
.br
.RI "Structure for the DMA hardware request\&. "
.in -1c
.SH "Detailed Description"
.PP 
CMSIS Peripheral Access Layer for MK64F12\&. 


.PP
\fBVersion:\fP
.RS 4
2\&.9 
.RE
.PP
\fBDate:\fP
.RS 4
2016-03-21 CMSIS Peripheral Access Layer for MK64F12 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define _MK64F12_H_"
Symbol preventing repeated inclusion 
.SS "#define BITBAND_REG(Reg, Bit)   (\fBBITBAND_REG32\fP((Reg),(Bit)))"

.SS "#define BITBAND_REG16(Reg, Bit)   (*((uint16_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"

.PP
Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 16bit access allowed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIReg\fP Register to access\&. 
.br
\fIBit\fP Bit number to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Value of the targeted bit in the bit band region\&. 
.RE
.PP

.SS "#define BITBAND_REG32(Reg, Bit)   (*((uint32_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"

.PP
Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 32bit access allowed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIReg\fP Register to access\&. 
.br
\fIBit\fP Bit number to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Value of the targeted bit in the bit band region\&. 
.RE
.PP

.SS "#define BITBAND_REG8(Reg, Bit)   (*((uint8_t volatile*)(\fBBITBAND_REGADDR\fP((Reg),(Bit)))))"

.PP
Macro to access a single bit of a peripheral register (bit band region 0x40000000 to 0x400FFFFF) using the bit-band alias region access\&. Can be used for peripherals with 8bit access allowed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIReg\fP Register to access\&. 
.br
\fIBit\fP Bit number to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Value of the targeted bit in the bit band region\&. 
.RE
.PP

.SS "#define BITBAND_REGADDR(Reg, Bit)   (0x42000000u + (32u*((uint32_t)&(Reg) \- (uint32_t)0x40000000u)) + (4u*((uint32_t)(Bit))))"

.PP
Macro to calculate address of an aliased word in the peripheral bitband area for a peripheral register and bit (bit band region 0x40000000 to 0x400FFFFF)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIReg\fP Register to access\&. 
.br
\fIBit\fP Bit number to access\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Address of the aliased word in the peripheral bitband area\&. 
.RE
.PP

.SS "#define MCU_MEM_MAP_VERSION   0x0200U"
Memory map major version (memory maps with equal major version number are compatible) 
.SS "#define MCU_MEM_MAP_VERSION_MINOR   0x0009U"
Memory map minor version 
.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
