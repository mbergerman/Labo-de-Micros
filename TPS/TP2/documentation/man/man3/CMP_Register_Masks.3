.TH "CMP_Register_Masks" 3 "Mon Sep 13 2021" "TP2_G1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CMP_Register_Masks
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCMP0_BASE\fP   (0x40073000u)"
.br
.ti -1c
.RI "#define \fBCMP0\fP   ((\fBCMP_Type\fP *)\fBCMP0_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP1_BASE\fP   (0x40073008u)"
.br
.ti -1c
.RI "#define \fBCMP1\fP   ((\fBCMP_Type\fP *)\fBCMP1_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP2_BASE\fP   (0x40073010u)"
.br
.ti -1c
.RI "#define \fBCMP2\fP   ((\fBCMP_Type\fP *)\fBCMP2_BASE\fP)"
.br
.ti -1c
.RI "#define \fBCMP_BASE_ADDRS\fP   { \fBCMP0_BASE\fP, \fBCMP1_BASE\fP, \fBCMP2_BASE\fP }"
.br
.ti -1c
.RI "#define \fBCMP_BASE_PTRS\fP   { \fBCMP0\fP, \fBCMP1\fP, \fBCMP2\fP }"
.br
.ti -1c
.RI "#define \fBCMP_IRQS\fP   { \fBCMP0_IRQn\fP, \fBCMP1_IRQn\fP, \fBCMP2_IRQn\fP }"
.br
.in -1c
.SS "CR0 - CMP Control Register 0"

.in +1c
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR_MASK\fP   (0x3U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_HYSTCTR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_HYSTCTR_SHIFT\fP)) & \fBCMP_CR0_HYSTCTR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT_MASK\fP   (0x70U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR0_FILTER_CNT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_FILTER_CNT_SHIFT\fP)) & \fBCMP_CR0_FILTER_CNT_MASK\fP)"
.br
.in -1c
.SS "CR1 - CMP Control Register 1"

.in +1c
.ti -1c
.RI "#define \fBCMP_CR1_EN_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_EN_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_EN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_EN_SHIFT\fP)) & \fBCMP_CR1_EN_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_OPE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_OPE_SHIFT\fP)) & \fBCMP_CR1_OPE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_COS\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_COS_SHIFT\fP)) & \fBCMP_CR1_COS_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_INV\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_INV_SHIFT\fP)) & \fBCMP_CR1_INV_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_PMODE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_PMODE_SHIFT\fP)) & \fBCMP_CR1_PMODE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_WE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_WE_SHIFT\fP)) & \fBCMP_CR1_WE_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_CR1_SE\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_SE_SHIFT\fP)) & \fBCMP_CR1_SE_MASK\fP)"
.br
.in -1c
.SS "FPR - CMP Filter Period Register"

.in +1c
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER_MASK\fP   (0xFFU)"
.br
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_FPR_FILT_PER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_FPR_FILT_PER_SHIFT\fP)) & \fBCMP_FPR_FILT_PER_MASK\fP)"
.br
.in -1c
.SS "SCR - CMP Status and Control Register"

.in +1c
.ti -1c
.RI "#define \fBCMP_SCR_COUT_MASK\fP   (0x1U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_COUT_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_COUT\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_COUT_SHIFT\fP)) & \fBCMP_SCR_COUT_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF_MASK\fP   (0x2U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF_SHIFT\fP   (1U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFF_SHIFT\fP)) & \fBCMP_SCR_CFF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR_MASK\fP   (0x4U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR_SHIFT\fP   (2U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_CFR\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFR_SHIFT\fP)) & \fBCMP_SCR_CFR_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF_MASK\fP   (0x8U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IEF\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IEF_SHIFT\fP)) & \fBCMP_SCR_IEF_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER_MASK\fP   (0x10U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER_SHIFT\fP   (4U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_IER\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IER_SHIFT\fP)) & \fBCMP_SCR_IER_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_SCR_DMAEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_DMAEN_SHIFT\fP)) & \fBCMP_SCR_DMAEN_MASK\fP)"
.br
.in -1c
.SS "DACCR - DAC Control Register"

.in +1c
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL_MASK\fP   (0x3FU)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VOSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VOSEL_SHIFT\fP)) & \fBCMP_DACCR_VOSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL_MASK\fP   (0x40U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL_SHIFT\fP   (6U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_VRSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VRSEL_SHIFT\fP)) & \fBCMP_DACCR_VRSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_DACCR_DACEN\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_DACEN_SHIFT\fP)) & \fBCMP_DACCR_DACEN_MASK\fP)"
.br
.in -1c
.SS "MUXCR - MUX Control Register"

.in +1c
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL_MASK\fP   (0x7U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL_SHIFT\fP   (0U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_MSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_MSEL_SHIFT\fP)) & \fBCMP_MUXCR_MSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL_MASK\fP   (0x38U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL_SHIFT\fP   (3U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSEL\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSEL_SHIFT\fP)) & \fBCMP_MUXCR_PSEL_MASK\fP)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM_MASK\fP   (0x80U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM_SHIFT\fP   (7U)"
.br
.ti -1c
.RI "#define \fBCMP_MUXCR_PSTM\fP(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSTM_SHIFT\fP)) & \fBCMP_MUXCR_PSTM_MASK\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define CMP0   ((\fBCMP_Type\fP *)\fBCMP0_BASE\fP)"
Peripheral CMP0 base pointer 
.SS "#define CMP0_BASE   (0x40073000u)"
Peripheral CMP0 base address 
.SS "#define CMP1   ((\fBCMP_Type\fP *)\fBCMP1_BASE\fP)"
Peripheral CMP1 base pointer 
.SS "#define CMP1_BASE   (0x40073008u)"
Peripheral CMP1 base address 
.SS "#define CMP2   ((\fBCMP_Type\fP *)\fBCMP2_BASE\fP)"
Peripheral CMP2 base pointer 
.SS "#define CMP2_BASE   (0x40073010u)"
Peripheral CMP2 base address 
.SS "#define CMP_BASE_ADDRS   { \fBCMP0_BASE\fP, \fBCMP1_BASE\fP, \fBCMP2_BASE\fP }"
Array initializer of CMP peripheral base addresses 
.SS "#define CMP_BASE_PTRS   { \fBCMP0\fP, \fBCMP1\fP, \fBCMP2\fP }"
Array initializer of CMP peripheral base pointers 
.SS "#define CMP_CR0_FILTER_CNT(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_FILTER_CNT_SHIFT\fP)) & \fBCMP_CR0_FILTER_CNT_MASK\fP)"

.SS "#define CMP_CR0_FILTER_CNT_MASK   (0x70U)"

.SS "#define CMP_CR0_FILTER_CNT_SHIFT   (4U)"

.SS "#define CMP_CR0_HYSTCTR(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR0_HYSTCTR_SHIFT\fP)) & \fBCMP_CR0_HYSTCTR_MASK\fP)"

.SS "#define CMP_CR0_HYSTCTR_MASK   (0x3U)"

.SS "#define CMP_CR0_HYSTCTR_SHIFT   (0U)"

.SS "#define CMP_CR1_COS(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_COS_SHIFT\fP)) & \fBCMP_CR1_COS_MASK\fP)"

.SS "#define CMP_CR1_COS_MASK   (0x4U)"

.SS "#define CMP_CR1_COS_SHIFT   (2U)"

.SS "#define CMP_CR1_EN(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_EN_SHIFT\fP)) & \fBCMP_CR1_EN_MASK\fP)"

.SS "#define CMP_CR1_EN_MASK   (0x1U)"

.SS "#define CMP_CR1_EN_SHIFT   (0U)"

.SS "#define CMP_CR1_INV(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_INV_SHIFT\fP)) & \fBCMP_CR1_INV_MASK\fP)"

.SS "#define CMP_CR1_INV_MASK   (0x8U)"

.SS "#define CMP_CR1_INV_SHIFT   (3U)"

.SS "#define CMP_CR1_OPE(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_OPE_SHIFT\fP)) & \fBCMP_CR1_OPE_MASK\fP)"

.SS "#define CMP_CR1_OPE_MASK   (0x2U)"

.SS "#define CMP_CR1_OPE_SHIFT   (1U)"

.SS "#define CMP_CR1_PMODE(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_PMODE_SHIFT\fP)) & \fBCMP_CR1_PMODE_MASK\fP)"

.SS "#define CMP_CR1_PMODE_MASK   (0x10U)"

.SS "#define CMP_CR1_PMODE_SHIFT   (4U)"

.SS "#define CMP_CR1_SE(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_SE_SHIFT\fP)) & \fBCMP_CR1_SE_MASK\fP)"

.SS "#define CMP_CR1_SE_MASK   (0x80U)"

.SS "#define CMP_CR1_SE_SHIFT   (7U)"

.SS "#define CMP_CR1_WE(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_CR1_WE_SHIFT\fP)) & \fBCMP_CR1_WE_MASK\fP)"

.SS "#define CMP_CR1_WE_MASK   (0x40U)"

.SS "#define CMP_CR1_WE_SHIFT   (6U)"

.SS "#define CMP_DACCR_DACEN(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_DACEN_SHIFT\fP)) & \fBCMP_DACCR_DACEN_MASK\fP)"

.SS "#define CMP_DACCR_DACEN_MASK   (0x80U)"

.SS "#define CMP_DACCR_DACEN_SHIFT   (7U)"

.SS "#define CMP_DACCR_VOSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VOSEL_SHIFT\fP)) & \fBCMP_DACCR_VOSEL_MASK\fP)"

.SS "#define CMP_DACCR_VOSEL_MASK   (0x3FU)"

.SS "#define CMP_DACCR_VOSEL_SHIFT   (0U)"

.SS "#define CMP_DACCR_VRSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_DACCR_VRSEL_SHIFT\fP)) & \fBCMP_DACCR_VRSEL_MASK\fP)"

.SS "#define CMP_DACCR_VRSEL_MASK   (0x40U)"

.SS "#define CMP_DACCR_VRSEL_SHIFT   (6U)"

.SS "#define CMP_FPR_FILT_PER(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_FPR_FILT_PER_SHIFT\fP)) & \fBCMP_FPR_FILT_PER_MASK\fP)"

.SS "#define CMP_FPR_FILT_PER_MASK   (0xFFU)"

.SS "#define CMP_FPR_FILT_PER_SHIFT   (0U)"

.SS "#define CMP_IRQS   { \fBCMP0_IRQn\fP, \fBCMP1_IRQn\fP, \fBCMP2_IRQn\fP }"
Interrupt vectors for the CMP peripheral type 
.SS "#define CMP_MUXCR_MSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_MSEL_SHIFT\fP)) & \fBCMP_MUXCR_MSEL_MASK\fP)"

.SS "#define CMP_MUXCR_MSEL_MASK   (0x7U)"

.SS "#define CMP_MUXCR_MSEL_SHIFT   (0U)"

.SS "#define CMP_MUXCR_PSEL(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSEL_SHIFT\fP)) & \fBCMP_MUXCR_PSEL_MASK\fP)"

.SS "#define CMP_MUXCR_PSEL_MASK   (0x38U)"

.SS "#define CMP_MUXCR_PSEL_SHIFT   (3U)"

.SS "#define CMP_MUXCR_PSTM(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_MUXCR_PSTM_SHIFT\fP)) & \fBCMP_MUXCR_PSTM_MASK\fP)"

.SS "#define CMP_MUXCR_PSTM_MASK   (0x80U)"

.SS "#define CMP_MUXCR_PSTM_SHIFT   (7U)"

.SS "#define CMP_SCR_CFF(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFF_SHIFT\fP)) & \fBCMP_SCR_CFF_MASK\fP)"

.SS "#define CMP_SCR_CFF_MASK   (0x2U)"

.SS "#define CMP_SCR_CFF_SHIFT   (1U)"

.SS "#define CMP_SCR_CFR(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_CFR_SHIFT\fP)) & \fBCMP_SCR_CFR_MASK\fP)"

.SS "#define CMP_SCR_CFR_MASK   (0x4U)"

.SS "#define CMP_SCR_CFR_SHIFT   (2U)"

.SS "#define CMP_SCR_COUT(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_COUT_SHIFT\fP)) & \fBCMP_SCR_COUT_MASK\fP)"

.SS "#define CMP_SCR_COUT_MASK   (0x1U)"

.SS "#define CMP_SCR_COUT_SHIFT   (0U)"

.SS "#define CMP_SCR_DMAEN(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_DMAEN_SHIFT\fP)) & \fBCMP_SCR_DMAEN_MASK\fP)"

.SS "#define CMP_SCR_DMAEN_MASK   (0x40U)"

.SS "#define CMP_SCR_DMAEN_SHIFT   (6U)"

.SS "#define CMP_SCR_IEF(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IEF_SHIFT\fP)) & \fBCMP_SCR_IEF_MASK\fP)"

.SS "#define CMP_SCR_IEF_MASK   (0x8U)"

.SS "#define CMP_SCR_IEF_SHIFT   (3U)"

.SS "#define CMP_SCR_IER(x)   (((uint8_t)(((uint8_t)(x)) << \fBCMP_SCR_IER_SHIFT\fP)) & \fBCMP_SCR_IER_MASK\fP)"

.SS "#define CMP_SCR_IER_MASK   (0x10U)"

.SS "#define CMP_SCR_IER_SHIFT   (4U)"

.SH "Author"
.PP 
Generated automatically by Doxygen for TP2_G1 from the source code\&.
